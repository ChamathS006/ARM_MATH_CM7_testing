
CMSIS_4.5_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08005224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c0  24000074  08005298  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000134  08005298  00020134  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017104  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025e9  00000000  00000000  000371a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a78  00000000  00000000  00039790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000009c0  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002eff7  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dc96  00000000  00000000  00069bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133f65  00000000  00000000  00077855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c3  00000000  00000000  001ab7ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b90  00000000  00000000  001ab880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000004ae  00000000  00000000  001ae410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000074 	.word	0x24000074
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005164 	.word	0x08005164

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000078 	.word	0x24000078
 80002e8:	08005164 	.word	0x08005164

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <mat_f32_check_equal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

arm_status mat_f32_check_equal(arm_matrix_instance_f32 matrixA, arm_matrix_instance_f32 matrixB) {
 80005e4:	b490      	push	{r4, r7}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	f107 0408 	add.w	r4, r7, #8
 80005ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80005f2:	4639      	mov	r1, r7
 80005f4:	e881 000c 	stmia.w	r1, {r2, r3}
	 * Returns ARM_MATH_TEST_FAILURE if matrices aren't equal
	 *
	 * */

	// Check if the rows and cols match up in number
	int test_nRows = (matrixA.numRows == matrixB.numRows);
 80005f8:	893a      	ldrh	r2, [r7, #8]
 80005fa:	883b      	ldrh	r3, [r7, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	61bb      	str	r3, [r7, #24]
	int test_nCols = (matrixA.numCols == matrixB.numCols);
 8000608:	897a      	ldrh	r2, [r7, #10]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	429a      	cmp	r2, r3
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	617b      	str	r3, [r7, #20]

	// If there's a mismatch, then return ARM_MATH_SIZE_MISMATCH immediately
	if (test_nRows * test_nCols == 0) {
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <mat_f32_check_equal+0x46>
		return ARM_MATH_SIZE_MISMATCH;
 8000624:	f06f 0302 	mvn.w	r3, #2
 8000628:	e021      	b.n	800066e <mat_f32_check_equal+0x8a>
	}

	// Since rows and cols match, we need to check every entry
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e016      	b.n	800065e <mat_f32_check_equal+0x7a>
		if (matrixA.pData[i] != matrixB.pData[i]) {
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	ed93 7a00 	vldr	s14, [r3]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eeb4 7a67 	vcmp.f32	s14, s15
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	d002      	beq.n	8000658 <mat_f32_check_equal+0x74>
			return ARM_MATH_TEST_FAILURE;
 8000652:	f06f 0305 	mvn.w	r3, #5
 8000656:	e00a      	b.n	800066e <mat_f32_check_equal+0x8a>
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	3301      	adds	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	893b      	ldrh	r3, [r7, #8]
 8000660:	897a      	ldrh	r2, [r7, #10]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbe1      	blt.n	8000630 <mat_f32_check_equal+0x4c>
		}
	}

	// If it's fine, then return ARM_MATH_SUCCESS
	return ARM_MATH_SUCCESS;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bc90      	pop	{r4, r7}
 8000676:	4770      	bx	lr

08000678 <mat_mult_f32_test>:

arm_status mat_mult_f32_test(arm_matrix_instance_f32 matrixA, arm_matrix_instance_f32 matrixB, arm_matrix_instance_f32 matrixTrue) {
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	f107 0408 	add.w	r4, r7, #8
 8000682:	e884 0003 	stmia.w	r4, {r0, r1}
 8000686:	4639      	mov	r1, r7
 8000688:	e881 000c 	stmia.w	r1, {r2, r3}
 800068c:	466b      	mov	r3, sp
 800068e:	461d      	mov	r5, r3
	 * */
	// Initialise variables
	arm_matrix_instance_f32 matrixC; //C. Meant to be C = AB

	// Initialise matrixC to store the result of matrixA * matrixB
	uint16_t matrixC_size = matrixA.numRows * matrixB.numCols;
 8000690:	893a      	ldrh	r2, [r7, #8]
 8000692:	887b      	ldrh	r3, [r7, #2]
 8000694:	fb12 f303 	smulbb	r3, r2, r3
 8000698:	84bb      	strh	r3, [r7, #36]	; 0x24
	float32_t pDataC[matrixC_size];
 800069a:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 800069c:	4623      	mov	r3, r4
 800069e:	3b01      	subs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
 80006a2:	b2a0      	uxth	r0, r4
 80006a4:	f04f 0100 	mov.w	r1, #0
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	014b      	lsls	r3, r1, #5
 80006b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006b6:	0142      	lsls	r2, r0, #5
 80006b8:	b2a0      	uxth	r0, r4
 80006ba:	f04f 0100 	mov.w	r1, #0
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	014b      	lsls	r3, r1, #5
 80006c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006cc:	0142      	lsls	r2, r0, #5
 80006ce:	4623      	mov	r3, r4
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	3307      	adds	r3, #7
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	ebad 0d03 	sub.w	sp, sp, r3
 80006dc:	466b      	mov	r3, sp
 80006de:	3303      	adds	r3, #3
 80006e0:	089b      	lsrs	r3, r3, #2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
	arm_mat_init_f32(&matrixC, matrixA.numRows, matrixB.numCols, pDataC);
 80006e6:	8939      	ldrh	r1, [r7, #8]
 80006e8:	887a      	ldrh	r2, [r7, #2]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	f107 0014 	add.w	r0, r7, #20
 80006f0:	f004 fca2 	bl	8005038 <arm_mat_init_f32>

	// Multiply A and B and store in C. Status stores error info if necessary
	arm_status status = arm_mat_mult_f32(&matrixA, &matrixB, &matrixC);
 80006f4:	f107 0214 	add.w	r2, r7, #20
 80006f8:	4639      	mov	r1, r7
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fbf0 	bl	8004ee4 <arm_mat_mult_f32>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// If multiplication failed, then return it
	// If not, then check if the result is equal to the true result and return status

	if (status == ARM_MATH_SUCCESS) {
 800070a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10a      	bne.n	8000728 <mat_mult_f32_test+0xb0>
		status = mat_f32_check_equal(matrixC, matrixTrue);
 8000712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000716:	cb0c      	ldmia	r3, {r2, r3}
 8000718:	f107 0114 	add.w	r1, r7, #20
 800071c:	c903      	ldmia	r1, {r0, r1}
 800071e:	f7ff ff61 	bl	80005e4 <mat_f32_check_equal>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	free(pDataC);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	4618      	mov	r0, r3
 800072c:	f004 fcac 	bl	8005088 <free>
	return status;
 8000730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000734:	46ad      	mov	sp, r5
}
 8000736:	4618      	mov	r0, r3
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b0a4      	sub	sp, #144	; 0x90
 8000744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fbd1 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f88d 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f94d 	bl	80009ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000752:	f000 f8f7 	bl	8000944 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000756:	f000 f941 	bl	80009dc <MX_USB_OTG_HS_USB_Init>
  arm_matrix_instance_f32 matrixA; //A
  arm_matrix_instance_f32 matrixB; //B
//  arm_matrix_instance_f32 matrixC; //C. Meant to be C = AB
  arm_matrix_instance_f32 matrixTrue_mat_mult_f32; // True result to compare against

  uint16_t nRowsA = 3;
 800075a:	2303      	movs	r3, #3
 800075c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  uint16_t nColsA = 3;
 8000760:	2303      	movs	r3, #3
 8000762:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  float32_t pDataA[] = {1,2,3,4,5,6,7,8,9};
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <main+0x118>)
 8000768:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800076c:	461d      	mov	r5, r3
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	6023      	str	r3, [r4, #0]

  uint16_t nRowsB = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  uint16_t nColsB = 3;
 8000780:	2303      	movs	r3, #3
 8000782:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  float32_t pDataB[] = {8,1,3,5,2,4};
 8000786:	4b35      	ldr	r3, [pc, #212]	; (800085c <main+0x11c>)
 8000788:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000796:	e884 0003 	stmia.w	r4, {r0, r1}

  uint16_t nRowsTrue_mat_mult_f32 = nRowsA;
 800079a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800079e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
  uint16_t nColsTrue_mat_mult_f32 = nColsB;
 80007a2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80007a6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  float32_t pDataTrue_mat_mult_f32[] = {18,5,11,44,11,25,70,17,39};
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <main+0x120>)
 80007ac:	463c      	mov	r4, r7
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	682b      	ldr	r3, [r5, #0]
 80007ba:	6023      	str	r3, [r4, #0]

  arm_mat_init_f32(&matrixA, nRowsA, nColsA, pDataA);
 80007bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c0:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80007c4:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 80007c8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80007cc:	f004 fc34 	bl	8005038 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixB, nRowsB, nColsB, pDataB);
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80007d8:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
 80007dc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80007e0:	f004 fc2a 	bl	8005038 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue_mat_mult_f32, nRowsTrue_mat_mult_f32, nColsTrue_mat_mult_f32, pDataTrue_mat_mult_f32);
 80007e4:	463b      	mov	r3, r7
 80007e6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80007ea:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 80007ee:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80007f2:	f004 fc21 	bl	8005038 <arm_mat_init_f32>

  // Call the test itself
  arm_status test_result = mat_mult_f32_test(matrixA, matrixB, matrixTrue_mat_mult_f32);
 80007f6:	466a      	mov	r2, sp
 80007f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000800:	e882 0003 	stmia.w	r2, {r0, r1}
 8000804:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000808:	cb0c      	ldmia	r3, {r2, r3}
 800080a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800080e:	c903      	ldmia	r1, {r0, r1}
 8000810:	f7ff ff32 	bl	8000678 <mat_mult_f32_test>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  // Depending on the test result, blink LED's appropriately
  if (test_result == ARM_MATH_SIZE_MISMATCH) {
 800081a:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 800081e:	f113 0f03 	cmn.w	r3, #3
 8000822:	d101      	bne.n	8000828 <main+0xe8>
	  Error_Handler();
 8000824:	f000 f9fc 	bl	8000c20 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_result == ARM_MATH_SUCCESS) {
 8000828:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <main+0xfa>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8000830:	2101      	movs	r1, #1
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <main+0x124>)
 8000834:	f000 febd 	bl	80015b2 <HAL_GPIO_TogglePin>
 8000838:	e009      	b.n	800084e <main+0x10e>
	  }
	  else if (test_result == ARM_MATH_TEST_FAILURE) {
 800083a:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 800083e:	f113 0f06 	cmn.w	r3, #6
 8000842:	d104      	bne.n	800084e <main+0x10e>
		  HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <main+0x124>)
 800084a:	f000 feb2 	bl	80015b2 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f000 fbdd 	bl	8001010 <HAL_Delay>
	  if (test_result == ARM_MATH_SUCCESS) {
 8000856:	e7e7      	b.n	8000828 <main+0xe8>
 8000858:	0800517c 	.word	0x0800517c
 800085c:	080051a0 	.word	0x080051a0
 8000860:	080051b8 	.word	0x080051b8
 8000864:	58020400 	.word	0x58020400

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	; 0x70
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	224c      	movs	r2, #76	; 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fc0e 	bl	8005098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fc08 	bl	8005098 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000888:	2004      	movs	r0, #4
 800088a:	f000 fead 	bl	80015e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <SystemClock_Config+0xd8>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <SystemClock_Config+0xd8>)
 8000898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <SystemClock_Config+0xd8>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008aa:	bf00      	nop
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <SystemClock_Config+0xd8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b8:	d1f8      	bne.n	80008ac <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008ba:	2321      	movs	r3, #33	; 0x21
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008d4:	2318      	movs	r3, #24
 80008d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008e4:	230c      	movs	r3, #12
 80008e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fed1 	bl	800169c <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000900:	f000 f98e 	bl	8000c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	233f      	movs	r3, #63	; 0x3f
 8000906:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2303      	movs	r3, #3
 800090a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2102      	movs	r1, #2
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fabb 	bl	8001ea4 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000934:	f000 f974 	bl	8000c20 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3770      	adds	r7, #112	; 0x70
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58024800 	.word	0x58024800

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_USART3_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800098e:	f003 f943 	bl	8003c18 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f942 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009a0:	f004 f9d6 	bl	8004d50 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f939 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f004 fa0b 	bl	8004dcc <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f930 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f004 f98c 	bl	8004cde <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f928 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	24000094 	.word	0x24000094
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b80      	ldr	r3, [pc, #512]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a08:	4a7e      	ldr	r2, [pc, #504]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a12:	4b7c      	ldr	r3, [pc, #496]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	623b      	str	r3, [r7, #32]
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a20:	4b78      	ldr	r3, [pc, #480]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a26:	4a77      	ldr	r2, [pc, #476]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a30:	4b74      	ldr	r3, [pc, #464]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	4b71      	ldr	r3, [pc, #452]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	4a6f      	ldr	r2, [pc, #444]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a4e:	4b6d      	ldr	r3, [pc, #436]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b69      	ldr	r3, [pc, #420]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a62:	4a68      	ldr	r2, [pc, #416]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a6c:	4b65      	ldr	r3, [pc, #404]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b62      	ldr	r3, [pc, #392]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a80:	4a60      	ldr	r2, [pc, #384]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8a:	4b5e      	ldr	r3, [pc, #376]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a98:	4b5a      	ldr	r3, [pc, #360]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9e:	4a59      	ldr	r2, [pc, #356]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa8:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b53      	ldr	r3, [pc, #332]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000abc:	4a51      	ldr	r2, [pc, #324]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac6:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad4:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ada:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae4:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x218>)
 8000ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4843      	ldr	r0, [pc, #268]	; (8000c08 <MX_GPIO_Init+0x21c>)
 8000afa:	f000 fd41 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b04:	4841      	ldr	r0, [pc, #260]	; (8000c0c <MX_GPIO_Init+0x220>)
 8000b06:	f000 fd3b 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4840      	ldr	r0, [pc, #256]	; (8000c10 <MX_GPIO_Init+0x224>)
 8000b10:	f000 fd36 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	483a      	ldr	r0, [pc, #232]	; (8000c14 <MX_GPIO_Init+0x228>)
 8000b2a:	f000 fb79 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4830      	ldr	r0, [pc, #192]	; (8000c08 <MX_GPIO_Init+0x21c>)
 8000b48:	f000 fb6a 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8000b4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_GPIO_Init+0x220>)
 8000b66:	f000 fb5b 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4826      	ldr	r0, [pc, #152]	; (8000c18 <MX_GPIO_Init+0x22c>)
 8000b80:	f000 fb4e 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <MX_GPIO_Init+0x230>)
 8000b9a:	f000 fb41 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_GPIO_Init+0x230>)
 8000bbc:	f000 fb30 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000bc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <MX_GPIO_Init+0x230>)
 8000bda:	f000 fb21 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8000bde:	2302      	movs	r3, #2
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x224>)
 8000bf6:	f000 fb13 	bl	8001220 <HAL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	; 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58021400 	.word	0x58021400
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	58021000 	.word	0x58021000
 8000c14:	58020800 	.word	0x58020800
 8000c18:	58021800 	.word	0x58021800
 8000c1c:	58020000 	.word	0x58020000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <Error_Handler+0x2c>)
 8000c30:	f000 fca6 	bl	8001580 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2101      	movs	r1, #1
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <Error_Handler+0x2c>)
 8000c3a:	f000 fca1 	bl	8001580 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2102      	movs	r1, #2
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <Error_Handler+0x30>)
 8000c44:	f000 fc9c 	bl	8001580 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000c48:	e7ee      	b.n	8000c28 <Error_Handler+0x8>
 8000c4a:	bf00      	nop
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	58021000 	.word	0x58021000

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x30>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x30>)
 8000c6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0b8      	sub	sp, #224	; 0xe0
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	22b8      	movs	r2, #184	; 0xb8
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f9f5 	bl	8005098 <memset>
  if(huart->Instance==USART3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <HAL_UART_MspInit+0xc0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d142      	bne.n	8000d3e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fc78 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd2:	f7ff ffa5 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000ce8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0xc4>)
 8000d06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0xc8>)
 8000d3a:	f000 fa71 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	37e0      	adds	r7, #224	; 0xe0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020c00 	.word	0x58020c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f916 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <SystemInit+0xd0>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <SystemInit+0xd0>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <SystemInit+0xd4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d807      	bhi.n	8000dd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <SystemInit+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 030f 	bic.w	r3, r3, #15
 8000dd0:	4a2a      	ldr	r2, [pc, #168]	; (8000e7c <SystemInit+0xd4>)
 8000dd2:	f043 0303 	orr.w	r3, r3, #3
 8000dd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <SystemInit+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <SystemInit+0xd8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemInit+0xd8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemInit+0xd8>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4924      	ldr	r1, [pc, #144]	; (8000e80 <SystemInit+0xd8>)
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <SystemInit+0xdc>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <SystemInit+0xd4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <SystemInit+0xd4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 030f 	bic.w	r3, r3, #15
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <SystemInit+0xd4>)
 8000e0c:	f043 0303 	orr.w	r3, r3, #3
 8000e10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SystemInit+0xd8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <SystemInit+0xd8>)
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <SystemInit+0xe0>)
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <SystemInit+0xd8>)
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <SystemInit+0xe4>)
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <SystemInit+0xd8>)
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <SystemInit+0xe8>)
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <SystemInit+0xd8>)
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SystemInit+0xe8>)
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0xd8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <SystemInit+0xd8>)
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <SystemInit+0xe8>)
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SystemInit+0xd8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <SystemInit+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <SystemInit+0xd8>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SystemInit+0xd8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <SystemInit+0xec>)
 8000e68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e6c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	52004000 	.word	0x52004000

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff ff84 	bl	8000da8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 f8bb 	bl	8005040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fc39 	bl	8000740 <main>
  bx  lr
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000edc:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 8000ee0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000ee4:	24000134 	.word	0x24000134

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f962 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ef8:	f001 f98a 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4913      	ldr	r1, [pc, #76]	; (8000f58 <HAL_Init+0x6c>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_Init+0x68>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_Init+0x6c>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x70>)
 8000f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f814 	bl	8000f64 <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e002      	b.n	8000f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fe85 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	080051dc 	.word	0x080051dc
 8000f5c:	24000004 	.word	0x24000004
 8000f60:	24000000 	.word	0x24000000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e021      	b.n	8000fbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_InitTick+0x64>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f939 	bl	8001206 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f911 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x68>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2400000c 	.word	0x2400000c
 8000fc8:	24000000 	.word	0x24000000
 8000fcc:	24000008 	.word	0x24000008

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	24000124 	.word	0x24000124

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	24000124 	.word	0x24000124

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2400000c 	.word	0x2400000c

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	4313      	orrs	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	05fa0000 	.word	0x05fa0000

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff47 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff5e 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffb2 	bl	8001178 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_GPIO_Init+0x234>)
 8001230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001232:	e194      	b.n	800155e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8186 	beq.w	8001558 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d005      	beq.n	8001264 <HAL_GPIO_Init+0x44>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f003 0201 	and.w	r2, r3, #1
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d017      	beq.n	8001302 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d123      	bne.n	8001356 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0203 	and.w	r2, r3, #3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80e0 	beq.w	8001558 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x238>)
 800139a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800139e:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <HAL_GPIO_Init+0x238>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_GPIO_Init+0x238>)
 80013aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_GPIO_Init+0x23c>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <HAL_GPIO_Init+0x240>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d052      	beq.n	8001488 <HAL_GPIO_Init+0x268>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_GPIO_Init+0x244>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_GPIO_Init+0x22e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_GPIO_Init+0x248>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x22a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x24c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x226>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_GPIO_Init+0x250>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x222>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x254>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x21e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x258>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x21a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_GPIO_Init+0x25c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x216>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x260>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x212>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_GPIO_Init+0x264>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x20e>
 800142a:	2309      	movs	r3, #9
 800142c:	e02d      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800142e:	230a      	movs	r3, #10
 8001430:	e02b      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001432:	2308      	movs	r3, #8
 8001434:	e029      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001436:	2307      	movs	r3, #7
 8001438:	e027      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800143a:	2306      	movs	r3, #6
 800143c:	e025      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800143e:	2305      	movs	r3, #5
 8001440:	e023      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001442:	2304      	movs	r3, #4
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001446:	2303      	movs	r3, #3
 8001448:	e01f      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800144a:	2302      	movs	r3, #2
 800144c:	e01d      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800144e:	2301      	movs	r3, #1
 8001450:	e01b      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001452:	bf00      	nop
 8001454:	58000080 	.word	0x58000080
 8001458:	58024400 	.word	0x58024400
 800145c:	58000400 	.word	0x58000400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020400 	.word	0x58020400
 8001468:	58020800 	.word	0x58020800
 800146c:	58020c00 	.word	0x58020c00
 8001470:	58021000 	.word	0x58021000
 8001474:	58021400 	.word	0x58021400
 8001478:	58021800 	.word	0x58021800
 800147c:	58021c00 	.word	0x58021c00
 8001480:	58022000 	.word	0x58022000
 8001484:	58022400 	.word	0x58022400
 8001488:	2300      	movs	r3, #0
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149a:	4938      	ldr	r1, [pc, #224]	; (800157c <HAL_GPIO_Init+0x35c>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3301      	adds	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae63 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	3724      	adds	r7, #36	; 0x24
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58000400 	.word	0x58000400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d00a      	beq.n	8001612 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e040      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e03e      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800161a:	491f      	ldr	r1, [pc, #124]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001622:	f7ff fce9 	bl	8000ff8 <HAL_GetTick>
 8001626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001628:	e009      	b.n	800163e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800162a:	f7ff fce5 	bl	8000ff8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001638:	d901      	bls.n	800163e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e028      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d1ee      	bne.n	800162a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b1e      	cmp	r3, #30
 8001650:	d008      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b2e      	cmp	r3, #46	; 0x2e
 8001656:	d005      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b1d      	cmp	r3, #29
 800165c:	d002      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b2d      	cmp	r3, #45	; 0x2d
 8001662:	d114      	bne.n	800168e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001664:	f7ff fcc8 	bl	8000ff8 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800166a:	e009      	b.n	8001680 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800166c:	f7ff fcc4 	bl	8000ff8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e007      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024800 	.word	0x58024800

0800169c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e3f3      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b3 	beq.w	8001822 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c6:	4b9c      	ldr	r3, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d007      	beq.n	80016e2 <HAL_RCC_OscConfig+0x46>
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	2b18      	cmp	r3, #24
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0x62>
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d10d      	bne.n	80016fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4b95      	ldr	r3, [pc, #596]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8098 	beq.w	8001820 <HAL_RCC_OscConfig+0x184>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f040 8093 	bne.w	8001820 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e3cb      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x7a>
 8001708:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a8a      	ldr	r2, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e058      	b.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0xa8>
 800171e:	4b86      	ldr	r3, [pc, #536]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a85      	ldr	r2, [pc, #532]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a82      	ldr	r2, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001730:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7f      	ldr	r2, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e041      	b.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0xd8>
 800174e:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a79      	ldr	r2, [pc, #484]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b77      	ldr	r3, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a76      	ldr	r2, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001760:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a73      	ldr	r2, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e029      	b.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x108>
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6d      	ldr	r2, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a67      	ldr	r2, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e011      	b.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a60      	ldr	r2, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc12 	bl	8000ff8 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc0e 	bl	8000ff8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e355      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x13c>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbfe 	bl	8000ff8 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fbfa 	bl	8000ff8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e341      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x164>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 808c 	beq.w	8001948 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001830:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001838:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_RCC_OscConfig+0x1ba>
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	2b18      	cmp	r3, #24
 800184a:	d137      	bne.n	80018bc <HAL_RCC_OscConfig+0x220>
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d132      	bne.n	80018bc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x1d2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e313      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0219 	bic.w	r2, r3, #25
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	492f      	ldr	r1, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001880:	f7ff fbba 	bl	8000ff8 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff fbb6 	bl	8000ff8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e2fd      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	061b      	lsls	r3, r3, #24
 80018b4:	4920      	ldr	r1, [pc, #128]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ba:	e045      	b.n	8001948 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d026      	beq.n	8001912 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0219 	bic.w	r2, r3, #25
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4919      	ldr	r1, [pc, #100]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb8f 	bl	8000ff8 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fb8b 	bl	8000ff8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e2d2      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	490b      	ldr	r1, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
 8001910:	e01a      	b.n	8001948 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x29c>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff fb6b 	bl	8000ff8 <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fb67 	bl	8000ff8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d903      	bls.n	800193c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2ae      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
 8001938:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800193c:	4b99      	ldr	r3, [pc, #612]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d06a      	beq.n	8001a2a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001954:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800195c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d007      	beq.n	800197a <HAL_RCC_OscConfig+0x2de>
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b18      	cmp	r3, #24
 800196e:	d11b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x30c>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800197a:	4b8a      	ldr	r3, [pc, #552]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f6>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b80      	cmp	r3, #128	; 0x80
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e281      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001992:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4980      	ldr	r1, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019a6:	e040      	b.n	8001a2a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019b0:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb1c 	bl	8000ff8 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019c4:	f7ff fb18 	bl	8000ff8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e25f      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019e2:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	061b      	lsls	r3, r3, #24
 80019f0:	496c      	ldr	r1, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60cb      	str	r3, [r1, #12]
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 80019fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff faf8 	bl	8000ff8 <HAL_GetTick>
 8001a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a0c:	f7ff faf4 	bl	8000ff8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e23b      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d036      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a42:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fad5 	bl	8000ff8 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff fad1 	bl	8000ff8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e218      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3b6>
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a76:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fabb 	bl	8000ff8 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff fab7 	bl	8000ff8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1fe      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a98:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d036      	beq.n	8001b1e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d019      	beq.n	8001aec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa98 	bl	8000ff8 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001acc:	f7ff fa94 	bl	8000ff8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1db      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x430>
 8001aea:	e018      	b.n	8001b1e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fa7e 	bl	8000ff8 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b00:	f7ff fa7a 	bl	8000ff8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1c1      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80af 	beq.w	8001c8a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_OscConfig+0x50c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x50c>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b38:	f7ff fa5e 	bl	8000ff8 <HAL_GetTick>
 8001b3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7ff fa5a 	bl	8000ff8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1a1      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0x50c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4d8>
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e05b      	b.n	8001c2c <HAL_RCC_OscConfig+0x590>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d117      	bne.n	8001bac <HAL_RCC_OscConfig+0x510>
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a02      	ldr	r2, [pc, #8]	; (8001ba4 <HAL_RCC_OscConfig+0x508>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e044      	b.n	8001c2c <HAL_RCC_OscConfig+0x590>
 8001ba2:	bf00      	nop
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58024800 	.word	0x58024800
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x53e>
 8001bb4:	4b95      	ldr	r3, [pc, #596]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a91      	ldr	r2, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a8e      	ldr	r2, [pc, #568]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	e028      	b.n	8001c2c <HAL_RCC_OscConfig+0x590>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b85      	cmp	r3, #133	; 0x85
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x56c>
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a89      	ldr	r2, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b87      	ldr	r3, [pc, #540]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a86      	ldr	r2, [pc, #536]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b84      	ldr	r3, [pc, #528]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a83      	ldr	r2, [pc, #524]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	e011      	b.n	8001c2c <HAL_RCC_OscConfig+0x590>
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a7f      	ldr	r2, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a7c      	ldr	r2, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a79      	ldr	r2, [pc, #484]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f9e0 	bl	8000ff8 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f9dc 	bl	8000ff8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e121      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5a0>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f9ca 	bl	8000ff8 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f9c6 	bl	8000ff8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e10b      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8100 	beq.w	8001e94 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9c:	2b18      	cmp	r3, #24
 8001c9e:	f000 80bb 	beq.w	8001e18 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f040 8095 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a56      	ldr	r2, [pc, #344]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f99e 	bl	8000ff8 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f99a 	bl	8000ff8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0e1      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_RCC_OscConfig+0x774>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4946      	ldr	r1, [pc, #280]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	3b01      	subs	r3, #1
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	3b01      	subs	r3, #1
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	3b01      	subs	r3, #1
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d28:	4938      	ldr	r1, [pc, #224]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	4a36      	ldr	r2, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x778>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	4930      	ldr	r1, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f023 020c 	bic.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	492c      	ldr	r1, [pc, #176]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f023 0202 	bic.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	4927      	ldr	r1, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff f923 	bl	8000ff8 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff f91f 	bl	8000ff8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e066      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x71a>
 8001dd4:	e05e      	b.n	8001e94 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff f909 	bl	8000ff8 <HAL_GetTick>
 8001de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff f905 	bl	8000ff8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e04c      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_OscConfig+0x770>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x74e>
 8001e08:	e044      	b.n	8001e94 <HAL_RCC_OscConfig+0x7f8>
 8001e0a:	bf00      	nop
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	fffffc0c 	.word	0xfffffc0c
 8001e14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_RCC_OscConfig+0x804>)
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x804>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d031      	beq.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0203 	and.w	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d12a      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d122      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d11a      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0a5b      	lsrs	r3, r3, #9
 8001e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d111      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0c1b      	lsrs	r3, r3, #16
 8001e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0e1b      	lsrs	r3, r3, #24
 8001e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3730      	adds	r7, #48	; 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e19c      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b8a      	ldr	r3, [pc, #552]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b87      	ldr	r3, [pc, #540]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	4985      	ldr	r1, [pc, #532]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b83      	ldr	r3, [pc, #524]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e184      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4975      	ldr	r1, [pc, #468]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	496a      	ldr	r1, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f60:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	495e      	ldr	r1, [pc, #376]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f8e:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4953      	ldr	r1, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d908      	bls.n	8001fce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4947      	ldr	r1, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d055      	beq.n	8002086 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4940      	ldr	r1, [pc, #256]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0f6      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d107      	bne.n	800201c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d115      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0ea      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0de      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d6      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002052:	4313      	orrs	r3, r2
 8002054:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe ffcf 	bl	8000ff8 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205c:	e00a      	b.n	8002074 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7fe ffcb 	bl	8000ff8 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0be      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	429a      	cmp	r2, r3
 8002084:	d1eb      	bne.n	800205e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	429a      	cmp	r2, r3
 80020a0:	d208      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d214      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 020f 	bic.w	r2, r3, #15
 80020ca:	4906      	ldr	r1, [pc, #24]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_ClockConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e086      	b.n	80021f2 <HAL_RCC_ClockConfig+0x34e>
 80020e4:	52002000 	.word	0x52002000
 80020e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002108:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4939      	ldr	r1, [pc, #228]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002116:	4313      	orrs	r3, r2
 8002118:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d208      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	492e      	ldr	r1, [pc, #184]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002160:	429a      	cmp	r2, r3
 8002162:	d208      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002172:	4313      	orrs	r3, r2
 8002174:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800218e:	429a      	cmp	r2, r3
 8002190:	d208      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4917      	ldr	r1, [pc, #92]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80021a4:	f000 f834 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x35c>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x358>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_RCC_ClockConfig+0x35c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x360>)
 80021da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x364>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x368>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe febc 	bl	8000f64 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	58024400 	.word	0x58024400
 8002200:	080051dc 	.word	0x080051dc
 8002204:	24000004 	.word	0x24000004
 8002208:	24000000 	.word	0x24000000
 800220c:	24000008 	.word	0x24000008

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002216:	4bb3      	ldr	r3, [pc, #716]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221e:	2b18      	cmp	r3, #24
 8002220:	f200 8155 	bhi.w	80024ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	08002291 	.word	0x08002291
 8002230:	080024cf 	.word	0x080024cf
 8002234:	080024cf 	.word	0x080024cf
 8002238:	080024cf 	.word	0x080024cf
 800223c:	080024cf 	.word	0x080024cf
 8002240:	080024cf 	.word	0x080024cf
 8002244:	080024cf 	.word	0x080024cf
 8002248:	080024cf 	.word	0x080024cf
 800224c:	080022b7 	.word	0x080022b7
 8002250:	080024cf 	.word	0x080024cf
 8002254:	080024cf 	.word	0x080024cf
 8002258:	080024cf 	.word	0x080024cf
 800225c:	080024cf 	.word	0x080024cf
 8002260:	080024cf 	.word	0x080024cf
 8002264:	080024cf 	.word	0x080024cf
 8002268:	080024cf 	.word	0x080024cf
 800226c:	080022bd 	.word	0x080022bd
 8002270:	080024cf 	.word	0x080024cf
 8002274:	080024cf 	.word	0x080024cf
 8002278:	080024cf 	.word	0x080024cf
 800227c:	080024cf 	.word	0x080024cf
 8002280:	080024cf 	.word	0x080024cf
 8002284:	080024cf 	.word	0x080024cf
 8002288:	080024cf 	.word	0x080024cf
 800228c:	080022c3 	.word	0x080022c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002290:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800229c:	4b91      	ldr	r3, [pc, #580]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	4a90      	ldr	r2, [pc, #576]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022ae:	e111      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022b0:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b2:	61bb      	str	r3, [r7, #24]
    break;
 80022b4:	e10e      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022b6:	4b8d      	ldr	r3, [pc, #564]	; (80024ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022b8:	61bb      	str	r3, [r7, #24]
    break;
 80022ba:	e10b      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022bc:	4b8c      	ldr	r3, [pc, #560]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022be:	61bb      	str	r3, [r7, #24]
    break;
 80022c0:	e108      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022cc:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022d8:	4b82      	ldr	r3, [pc, #520]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022e2:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80e1 	beq.w	80024c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	f000 8083 	beq.w	8002414 <HAL_RCC_GetSysClockFreq+0x204>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b02      	cmp	r3, #2
 8002312:	f200 80a1 	bhi.w	8002458 <HAL_RCC_GetSysClockFreq+0x248>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x114>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d056      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002322:	e099      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02d      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002330:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	4a6b      	ldr	r2, [pc, #428]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236a:	ed97 6a02 	vldr	s12, [r7, #8]
 800236e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800238a:	e087      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002396:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800239a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ce:	e065      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80023de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002412:	e043      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002500 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002456:	e021      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	0a5b      	lsrs	r3, r3, #9
 80024a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a6:	3301      	adds	r3, #1
 80024a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80024b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c0:	ee17 3a90 	vmov	r3, s15
 80024c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
    break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024d0:	61bb      	str	r3, [r7, #24]
    break;
 80024d2:	bf00      	nop
  }

  return sysclockfreq;
 80024d4:	69bb      	ldr	r3, [r7, #24]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	58024400 	.word	0x58024400
 80024e8:	03d09000 	.word	0x03d09000
 80024ec:	003d0900 	.word	0x003d0900
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	46000000 	.word	0x46000000
 80024f8:	4c742400 	.word	0x4c742400
 80024fc:	4a742400 	.word	0x4a742400
 8002500:	4af42400 	.word	0x4af42400

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800250a:	f7ff fe81 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_GetHCLKFreq+0x50>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490f      	ldr	r1, [pc, #60]	; (8002558 <HAL_RCC_GetHCLKFreq+0x54>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_RCC_GetHCLKFreq+0x50>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_RCC_GetHCLKFreq+0x54>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_RCC_GetHCLKFreq+0x58>)
 8002540:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_RCC_GetHCLKFreq+0x58>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	58024400 	.word	0x58024400
 8002558:	080051dc 	.word	0x080051dc
 800255c:	24000004 	.word	0x24000004
 8002560:	24000000 	.word	0x24000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002568:	f7ff ffcc 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4904      	ldr	r1, [pc, #16]	; (800258c <HAL_RCC_GetPCLK1Freq+0x28>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	080051dc 	.word	0x080051dc

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002594:	f7ff ffb6 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58024400 	.word	0x58024400
 80025b8:	080051dc 	.word	0x080051dc

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03f      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025e0:	d02a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025e6:	d824      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ec:	d018      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f2:	d81e      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fc:	d007      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025fe:	e018      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4ba6      	ldr	r3, [pc, #664]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4aa5      	ldr	r2, [pc, #660]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800260c:	e015      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f001 f99b 	bl	8003950 <RCCEx_PLL2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800261e:	e00c      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3324      	adds	r3, #36	; 0x24
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fa44 	bl	8003ab4 <RCCEx_PLL3_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002630:	e003      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
      break;
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002640:	4b96      	ldr	r3, [pc, #600]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264c:	4993      	ldr	r1, [pc, #588]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	650b      	str	r3, [r1, #80]	; 0x50
 8002652:	e001      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	2b04      	cmp	r3, #4
 800266a:	d826      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800266c:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	08002689 	.word	0x08002689
 8002678:	08002697 	.word	0x08002697
 800267c:	080026a9 	.word	0x080026a9
 8002680:	080026c1 	.word	0x080026c1
 8002684:	080026c1 	.word	0x080026c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002688:	4b84      	ldr	r3, [pc, #528]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4a83      	ldr	r2, [pc, #524]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800268e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002694:	e015      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f957 	bl	8003950 <RCCEx_PLL2_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026a6:	e00c      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3324      	adds	r3, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 fa00 	bl	8003ab4 <RCCEx_PLL3_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026b8:	e003      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
      break;
 80026be:	e000      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c8:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	f023 0207 	bic.w	r2, r3, #7
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	4971      	ldr	r1, [pc, #452]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	650b      	str	r3, [r1, #80]	; 0x50
 80026da:	e001      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026f4:	d031      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80026f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026fa:	d82b      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002700:	d02d      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d825      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002708:	2bc0      	cmp	r3, #192	; 0xc0
 800270a:	d02a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800270c:	2bc0      	cmp	r3, #192	; 0xc0
 800270e:	d821      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d016      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d81d      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d007      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002720:	e018      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002722:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800272e:	e019      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f90a 	bl	8003950 <RCCEx_PLL2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002740:	e010      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3324      	adds	r3, #36	; 0x24
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f001 f9b3 	bl	8003ab4 <RCCEx_PLL3_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002752:	e007      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
      break;
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4949      	ldr	r1, [pc, #292]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	650b      	str	r3, [r1, #80]	; 0x50
 800277c:	e001      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278a:	2b00      	cmp	r3, #0
 800278c:	d04f      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002796:	d036      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002798:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800279c:	d830      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800279e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a2:	d032      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80027a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a8:	d82a      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027ae:	d02e      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x252>
 80027b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027b4:	d824      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d018      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x232>
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c0:	d81e      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x212>
 80027c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ca:	d007      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x220>
 80027cc:	e018      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a32      	ldr	r2, [pc, #200]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027da:	e019      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f8b4 	bl	8003950 <RCCEx_PLL2_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027ec:	e010      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3324      	adds	r3, #36	; 0x24
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f95d 	bl	8003ab4 <RCCEx_PLL3_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027fe:	e007      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
      break;
 8002804:	e004      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800280e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	491e      	ldr	r1, [pc, #120]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	650b      	str	r3, [r1, #80]	; 0x50
 8002828:	e001      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d034      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d01c      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002842:	2b30      	cmp	r3, #48	; 0x30
 8002844:	d817      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002846:	2b20      	cmp	r3, #32
 8002848:	d00c      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800284a:	2b20      	cmp	r3, #32
 800284c:	d813      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002852:	2b10      	cmp	r3, #16
 8002854:	d10f      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002862:	e00e      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f001 f870 	bl	8003950 <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002874:	e005      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	75fb      	strb	r3, [r7, #23]
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	4901      	ldr	r1, [pc, #4]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	64cb      	str	r3, [r1, #76]	; 0x4c
 800289a:	e003      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800289c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d047      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b8:	d030      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028be:	d82a      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028c4:	d02c      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80028c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028ca:	d824      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d0:	d018      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d81e      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d007      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80028e2:	e018      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	4aaf      	ldr	r2, [pc, #700]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028f0:	e017      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f829 	bl	8003950 <RCCEx_PLL2_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002902:	e00e      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3324      	adds	r3, #36	; 0x24
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f001 f8d2 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002914:	e005      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
      break;
 800291a:	e002      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002928:	4b9f      	ldr	r3, [pc, #636]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	499c      	ldr	r1, [pc, #624]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	650b      	str	r3, [r1, #80]	; 0x50
 800293a:	e001      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d049      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d02e      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295a:	d828      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800295c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002960:	d02a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002966:	d822      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800296c:	d026      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 800296e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002972:	d81c      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002978:	d010      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800297a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800297e:	d816      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01d      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d111      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f000 ffdd 	bl	8003950 <RCCEx_PLL2_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800299a:	e012      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3324      	adds	r3, #36	; 0x24
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f886 	bl	8003ab4 <RCCEx_PLL3_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029ac:	e009      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
      break;
 80029b2:	e006      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029b4:	bf00      	nop
 80029b6:	e004      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029b8:	bf00      	nop
 80029ba:	e002      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80029c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029c8:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d4:	4974      	ldr	r1, [pc, #464]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	650b      	str	r3, [r1, #80]	; 0x50
 80029da:	e001      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d053      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029f2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029f6:	d034      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029f8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029fc:	d82e      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a02:	d030      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a08:	d828      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d02c      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d822      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a1a:	d028      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002a1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a20:	d81c      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a26:	d010      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a2c:	d816      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01f      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a36:	d111      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 ff86 	bl	8003950 <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a48:	e014      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3324      	adds	r3, #36	; 0x24
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 f82f 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a60:	e008      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e006      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e004      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a88:	4947      	ldr	r1, [pc, #284]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a8e:	e001      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d02f      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aae:	d814      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 ff3e 	bl	8003950 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	492c      	ldr	r1, [pc, #176]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	650b      	str	r3, [r1, #80]	; 0x50
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d81b      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b53 	.word	0x08002b53
 8002b20:	08002b2d 	.word	0x08002b2d
 8002b24:	08002b3b 	.word	0x08002b3b
 8002b28:	08002b53 	.word	0x08002b53
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b38:	e00c      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 ff05 	bl	8003950 <RCCEx_PLL2_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b4a:	e003      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4910      	ldr	r1, [pc, #64]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b6c:	e001      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 808a 	beq.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fa34 	bl	8000ff8 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b92:	e00d      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b94:	f7fe fa30 	bl	8000ff8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d906      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	75fb      	strb	r3, [r7, #23]
        break;
 8002ba6:	e009      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb0:	4bba      	ldr	r3, [pc, #744]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0eb      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d166      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bc2:	4bb7      	ldr	r3, [pc, #732]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bcc:	4053      	eors	r3, r2
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d013      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd6:	4bb2      	ldr	r3, [pc, #712]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002be0:	4baf      	ldr	r3, [pc, #700]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4aae      	ldr	r2, [pc, #696]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bec:	4bac      	ldr	r3, [pc, #688]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4aab      	ldr	r2, [pc, #684]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bf8:	4aa9      	ldr	r2, [pc, #676]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	d115      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f9f5 	bl	8000ff8 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c10:	e00b      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe f9f1 	bl	8000ff8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d902      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	75fb      	strb	r3, [r7, #23]
            break;
 8002c28:	e005      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2a:	4b9d      	ldr	r3, [pc, #628]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ed      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d126      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002c4c:	4b94      	ldr	r3, [pc, #592]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c5a:	0919      	lsrs	r1, r3, #4
 8002c5c:	4b91      	ldr	r3, [pc, #580]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	498f      	ldr	r1, [pc, #572]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	610b      	str	r3, [r1, #16]
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002c68:	4b8d      	ldr	r3, [pc, #564]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4a8c      	ldr	r2, [pc, #560]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c72:	6113      	str	r3, [r2, #16]
 8002c74:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c82:	4987      	ldr	r1, [pc, #540]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	670b      	str	r3, [r1, #112]	; 0x70
 8002c88:	e004      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	75bb      	strb	r3, [r7, #22]
 8002c8e:	e001      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca6:	2b28      	cmp	r3, #40	; 0x28
 8002ca8:	d866      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002d7f 	.word	0x08002d7f
 8002cb4:	08002d79 	.word	0x08002d79
 8002cb8:	08002d79 	.word	0x08002d79
 8002cbc:	08002d79 	.word	0x08002d79
 8002cc0:	08002d79 	.word	0x08002d79
 8002cc4:	08002d79 	.word	0x08002d79
 8002cc8:	08002d79 	.word	0x08002d79
 8002ccc:	08002d79 	.word	0x08002d79
 8002cd0:	08002d55 	.word	0x08002d55
 8002cd4:	08002d79 	.word	0x08002d79
 8002cd8:	08002d79 	.word	0x08002d79
 8002cdc:	08002d79 	.word	0x08002d79
 8002ce0:	08002d79 	.word	0x08002d79
 8002ce4:	08002d79 	.word	0x08002d79
 8002ce8:	08002d79 	.word	0x08002d79
 8002cec:	08002d79 	.word	0x08002d79
 8002cf0:	08002d67 	.word	0x08002d67
 8002cf4:	08002d79 	.word	0x08002d79
 8002cf8:	08002d79 	.word	0x08002d79
 8002cfc:	08002d79 	.word	0x08002d79
 8002d00:	08002d79 	.word	0x08002d79
 8002d04:	08002d79 	.word	0x08002d79
 8002d08:	08002d79 	.word	0x08002d79
 8002d0c:	08002d79 	.word	0x08002d79
 8002d10:	08002d7f 	.word	0x08002d7f
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002d79 	.word	0x08002d79
 8002d1c:	08002d79 	.word	0x08002d79
 8002d20:	08002d79 	.word	0x08002d79
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d79 	.word	0x08002d79
 8002d30:	08002d7f 	.word	0x08002d7f
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d79 	.word	0x08002d79
 8002d3c:	08002d79 	.word	0x08002d79
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d79 	.word	0x08002d79
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08002d7f 	.word	0x08002d7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fdf8 	bl	8003950 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d64:	e00c      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3324      	adds	r3, #36	; 0x24
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fea1 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d76:	e003      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d94:	4942      	ldr	r1, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	654b      	str	r3, [r1, #84]	; 0x54
 8002d9a:	e001      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d038      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d821      	bhi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dff 	.word	0x08002dff
 8002dc0:	08002dd5 	.word	0x08002dd5
 8002dc4:	08002de7 	.word	0x08002de7
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002dff 	.word	0x08002dff
 8002dd0:	08002dff 	.word	0x08002dff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fdb8 	bl	8003950 <RCCEx_PLL2_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3324      	adds	r3, #36	; 0x24
 8002dea:	2101      	movs	r1, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe61 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e12:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	654b      	str	r3, [r1, #84]	; 0x54
 8002e18:	e001      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d040      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d821      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e7f 	.word	0x08002e7f
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e67 	.word	0x08002e67
 8002e48:	08002e7f 	.word	0x08002e7f
 8002e4c:	08002e7f 	.word	0x08002e7f
 8002e50:	08002e7f 	.word	0x08002e7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd78 	bl	8003950 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e64:	e00c      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	; 0x24
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fe21 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e76:	e003      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d110      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e94:	4902      	ldr	r1, [pc, #8]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	658b      	str	r3, [r1, #88]	; 0x58
 8002e9a:	e007      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e9c:	58024800 	.word	0x58024800
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d04b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec2:	d02e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec8:	d828      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d02a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d822      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ed6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eda:	d026      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002edc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee0:	d81c      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d816      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01d      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef6:	d111      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fd26 	bl	8003950 <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f08:	e012      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3324      	adds	r3, #36	; 0x24
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fdcf 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002f1a:	e009      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f20:	e006      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f22:	bf00      	nop
 8002f24:	e004      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4bb3      	ldr	r3, [pc, #716]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f44:	49af      	ldr	r1, [pc, #700]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	654b      	str	r3, [r1, #84]	; 0x54
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d04b      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f66:	d02e      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002f68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f6c:	d828      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d02a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d822      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7e:	d026      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f84:	d81c      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8a:	d010      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f90:	d816      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01d      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	d111      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fcd4 	bl	8003950 <RCCEx_PLL2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fac:	e012      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3324      	adds	r3, #36	; 0x24
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd7d 	bl	8003ab4 <RCCEx_PLL3_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002fbe:	e009      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc4:	e006      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e004      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fda:	4b8a      	ldr	r3, [pc, #552]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fe8:	4986      	ldr	r1, [pc, #536]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	658b      	str	r3, [r1, #88]	; 0x58
 8002fee:	e001      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d04b      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003006:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800300a:	d02e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800300c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003010:	d828      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003016:	d02a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d822      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800301e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003022:	d026      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003024:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003028:	d81c      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800302a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302e:	d010      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003034:	d816      	bhi.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01d      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	d111      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc82 	bl	8003950 <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003050:	e012      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3324      	adds	r3, #36	; 0x24
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fd2b 	bl	8003ab4 <RCCEx_PLL3_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003062:	e009      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
      break;
 8003068:	e006      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800306a:	bf00      	nop
 800306c:	e004      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800307e:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800308c:	495d      	ldr	r1, [pc, #372]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800308e:	4313      	orrs	r3, r2
 8003090:	658b      	str	r3, [r1, #88]	; 0x58
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d10a      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	2102      	movs	r1, #2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fcfc 	bl	8003ab4 <RCCEx_PLL3_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030c6:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	494b      	ldr	r1, [pc, #300]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d10a      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fcdb 	bl	8003ab4 <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003116:	493b      	ldr	r1, [pc, #236]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003118:	4313      	orrs	r3, r2
 800311a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d034      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800312e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003132:	d01d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003138:	d817      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d009      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003144:	e011      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fbff 	bl	8003950 <RCCEx_PLL2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fca8 	bl	8003ab4 <RCCEx_PLL3_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
      break;
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003186:	491f      	ldr	r1, [pc, #124]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003188:	4313      	orrs	r3, r2
 800318a:	658b      	str	r3, [r1, #88]	; 0x58
 800318c:	e001      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031a8:	d01c      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80031aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ae:	d816      	bhi.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80031b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b4:	d003      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80031b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ba:	d007      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80031bc:	e00f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031ca:	e00c      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3324      	adds	r3, #36	; 0x24
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fc6e 	bl	8003ab4 <RCCEx_PLL3_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031dc:	e003      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
      break;
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80031e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fa:	4902      	ldr	r1, [pc, #8]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003200:	e004      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003202:	bf00      	nop
 8003204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d029      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003226:	e00f      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003234:	e00b      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb87 	bl	8003950 <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003246:	e002      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
      break;
 800324c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003254:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	495b      	ldr	r1, [pc, #364]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003262:	4313      	orrs	r3, r2
 8003264:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3324      	adds	r3, #36	; 0x24
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fc18 	bl	8003ab4 <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d032      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a4:	d017      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80032a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032aa:	d811      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d013      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80032b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b6:	d80b      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d106      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032ce:	e007      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
      break;
 80032d4:	e004      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f4:	4936      	ldr	r1, [pc, #216]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	654b      	str	r3, [r1, #84]	; 0x54
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003318:	492d      	ldr	r1, [pc, #180]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800331a:	4313      	orrs	r3, r2
 800331c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	4926      	ldr	r1, [pc, #152]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003338:	4313      	orrs	r3, r2
 800333a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	491e      	ldr	r1, [pc, #120]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003356:	4313      	orrs	r3, r2
 8003358:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800336c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003370:	6113      	str	r3, [r2, #16]
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800337c:	4914      	ldr	r1, [pc, #80]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	da08      	bge.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003398:	4313      	orrs	r3, r2
 800339a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4906      	ldr	r1, [pc, #24]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80033bc:	7dbb      	ldrb	r3, [r7, #22]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	58024400 	.word	0x58024400

080033d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80033d8:	f7ff f894 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	58024400 	.word	0x58024400
 80033fc:	080051dc 	.word	0x080051dc

08003400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003408:	4ba1      	ldr	r3, [pc, #644]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003412:	4b9f      	ldr	r3, [pc, #636]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	0b1b      	lsrs	r3, r3, #12
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800341e:	4b9c      	ldr	r3, [pc, #624]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800342a:	4b99      	ldr	r3, [pc, #612]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8111 	beq.w	8003670 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	f000 8083 	beq.w	800355c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b02      	cmp	r3, #2
 800345a:	f200 80a1 	bhi.w	80035a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d056      	beq.n	8003518 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800346a:	e099      	b.n	80035a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800346c:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02d      	beq.n	80034d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003478:	4b85      	ldr	r3, [pc, #532]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	4a84      	ldr	r2, [pc, #528]	; (8003694 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a2:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034d2:	e087      	b.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800369c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80034e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e6:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003516:	e065      	b.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80036a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352a:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353a:	ed97 6a03 	vldr	s12, [r7, #12]
 800353e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800355a:	e043      	b.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003566:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b48      	ldr	r3, [pc, #288]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003582:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800359e:	e021      	b.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80036a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	0a5b      	lsrs	r3, r3, #9
 80035ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360a:	ee17 2a90 	vmov	r2, s15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800362c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 2a90 	vmov	r2, s15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800365a:	edd7 6a07 	vldr	s13, [r7, #28]
 800365e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003666:	ee17 2a90 	vmov	r2, s15
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
}
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	58024400 	.word	0x58024400
 8003694:	03d09000 	.word	0x03d09000
 8003698:	46000000 	.word	0x46000000
 800369c:	4c742400 	.word	0x4c742400
 80036a0:	4a742400 	.word	0x4a742400
 80036a4:	4af42400 	.word	0x4af42400

080036a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036b0:	4ba1      	ldr	r3, [pc, #644]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036ba:	4b9f      	ldr	r3, [pc, #636]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	0d1b      	lsrs	r3, r3, #20
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036c6:	4b9c      	ldr	r3, [pc, #624]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036d2:	4b99      	ldr	r3, [pc, #612]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8111 	beq.w	8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f000 8083 	beq.w	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b02      	cmp	r3, #2
 8003702:	f200 80a1 	bhi.w	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d056      	beq.n	80037c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003712:	e099      	b.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003714:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02d      	beq.n	800377c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003720:	4b85      	ldr	r3, [pc, #532]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	4a84      	ldr	r2, [pc, #528]	; (800393c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b7b      	ldr	r3, [pc, #492]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a03 	vldr	s12, [r7, #12]
 800375e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800377a:	e087      	b.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003944 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037be:	e065      	b.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003802:	e043      	b.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800394c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b48      	ldr	r3, [pc, #288]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003846:	e021      	b.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003948 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	0a5b      	lsrs	r3, r3, #9
 8003892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b2:	ee17 2a90 	vmov	r2, s15
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	0c1b      	lsrs	r3, r3, #16
 80038c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e0:	ee17 2a90 	vmov	r2, s15
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	0e1b      	lsrs	r3, r3, #24
 80038ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003902:	edd7 6a07 	vldr	s13, [r7, #28]
 8003906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390e:	ee17 2a90 	vmov	r2, s15
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003916:	e008      	b.n	800392a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
}
 800392a:	bf00      	nop
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	58024400 	.word	0x58024400
 800393c:	03d09000 	.word	0x03d09000
 8003940:	46000000 	.word	0x46000000
 8003944:	4c742400 	.word	0x4c742400
 8003948:	4a742400 	.word	0x4a742400
 800394c:	4af42400 	.word	0x4af42400

08003950 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800395e:	4b53      	ldr	r3, [pc, #332]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d101      	bne.n	800396e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e099      	b.n	8003aa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800396e:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4e      	ldr	r2, [pc, #312]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003974:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397a:	f7fd fb3d 	bl	8000ff8 <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003980:	e008      	b.n	8003994 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003982:	f7fd fb39 	bl	8000ff8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e086      	b.n	8003aa2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003994:	4b45      	ldr	r3, [pc, #276]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039a0:	4b42      	ldr	r3, [pc, #264]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	493f      	ldr	r1, [pc, #252]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	628b      	str	r3, [r1, #40]	; 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	025b      	lsls	r3, r3, #9
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	3b01      	subs	r3, #1
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039e4:	4931      	ldr	r1, [pc, #196]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	492d      	ldr	r1, [pc, #180]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039fc:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	f023 0220 	bic.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4928      	ldr	r1, [pc, #160]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a0e:	4b27      	ldr	r3, [pc, #156]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	4a26      	ldr	r2, [pc, #152]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <RCCEx_PLL2_Config+0x160>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	69d2      	ldr	r2, [r2, #28]
 8003a26:	00d2      	lsls	r2, r2, #3
 8003a28:	4920      	ldr	r1, [pc, #128]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a34:	f043 0310 	orr.w	r3, r3, #16
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a4c:	e00f      	b.n	8003a6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a14      	ldr	r2, [pc, #80]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a60:	e005      	b.n	8003a6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a11      	ldr	r2, [pc, #68]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7a:	f7fd fabd 	bl	8000ff8 <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a82:	f7fd fab9 	bl	8000ff8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e006      	b.n	8003aa2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <RCCEx_PLL2_Config+0x15c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	ffff0007 	.word	0xffff0007

08003ab4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ac2:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d101      	bne.n	8003ad2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e099      	b.n	8003c06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ad2:	4b4f      	ldr	r3, [pc, #316]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ade:	f7fd fa8b 	bl	8000ff8 <HAL_GetTick>
 8003ae2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ae6:	f7fd fa87 	bl	8000ff8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e086      	b.n	8003c06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003af8:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b04:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	051b      	lsls	r3, r3, #20
 8003b12:	493f      	ldr	r1, [pc, #252]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	628b      	str	r3, [r1, #40]	; 0x28
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	025b      	lsls	r3, r3, #9
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b48:	4931      	ldr	r1, [pc, #196]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b4e:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	492d      	ldr	r1, [pc, #180]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4928      	ldr	r1, [pc, #160]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <RCCEx_PLL3_Config+0x160>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	69d2      	ldr	r2, [r2, #28]
 8003b8a:	00d2      	lsls	r2, r2, #3
 8003b8c:	4920      	ldr	r1, [pc, #128]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bb0:	e00f      	b.n	8003bd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bc4:	e005      	b.n	8003bd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd fa0b 	bl	8000ff8 <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003be6:	f7fd fa07 	bl	8000ff8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e006      	b.n	8003c06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <RCCEx_PLL3_Config+0x15c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	58024400 	.word	0x58024400
 8003c14:	ffff0007 	.word	0xffff0007

08003c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e042      	b.n	8003cb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fd f823 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2224      	movs	r2, #36	; 0x24
 8003c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f82c 	bl	8003cb8 <UART_SetConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fe7e 	bl	8004974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 ff05 	bl	8004ab8 <UART_CheckIdleState>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b5b0      	push	{r4, r5, r7, lr}
 8003cba:	b08e      	sub	sp, #56	; 0x38
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4bbf      	ldr	r3, [pc, #764]	; (8003fe4 <UART_SetConfig+0x32c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4ab5      	ldr	r2, [pc, #724]	; (8003fe8 <UART_SetConfig+0x330>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	4bb0      	ldr	r3, [pc, #704]	; (8003fec <UART_SetConfig+0x334>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f023 010f 	bic.w	r1, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4aa7      	ldr	r2, [pc, #668]	; (8003ff0 <UART_SetConfig+0x338>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d176      	bne.n	8003e44 <UART_SetConfig+0x18c>
 8003d56:	4ba7      	ldr	r3, [pc, #668]	; (8003ff4 <UART_SetConfig+0x33c>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	d86c      	bhi.n	8003e3c <UART_SetConfig+0x184>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0xb0>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003e0d 	.word	0x08003e0d
 8003d6c:	08003e3d 	.word	0x08003e3d
 8003d70:	08003e3d 	.word	0x08003e3d
 8003d74:	08003e3d 	.word	0x08003e3d
 8003d78:	08003e3d 	.word	0x08003e3d
 8003d7c:	08003e3d 	.word	0x08003e3d
 8003d80:	08003e3d 	.word	0x08003e3d
 8003d84:	08003e3d 	.word	0x08003e3d
 8003d88:	08003e15 	.word	0x08003e15
 8003d8c:	08003e3d 	.word	0x08003e3d
 8003d90:	08003e3d 	.word	0x08003e3d
 8003d94:	08003e3d 	.word	0x08003e3d
 8003d98:	08003e3d 	.word	0x08003e3d
 8003d9c:	08003e3d 	.word	0x08003e3d
 8003da0:	08003e3d 	.word	0x08003e3d
 8003da4:	08003e3d 	.word	0x08003e3d
 8003da8:	08003e1d 	.word	0x08003e1d
 8003dac:	08003e3d 	.word	0x08003e3d
 8003db0:	08003e3d 	.word	0x08003e3d
 8003db4:	08003e3d 	.word	0x08003e3d
 8003db8:	08003e3d 	.word	0x08003e3d
 8003dbc:	08003e3d 	.word	0x08003e3d
 8003dc0:	08003e3d 	.word	0x08003e3d
 8003dc4:	08003e3d 	.word	0x08003e3d
 8003dc8:	08003e25 	.word	0x08003e25
 8003dcc:	08003e3d 	.word	0x08003e3d
 8003dd0:	08003e3d 	.word	0x08003e3d
 8003dd4:	08003e3d 	.word	0x08003e3d
 8003dd8:	08003e3d 	.word	0x08003e3d
 8003ddc:	08003e3d 	.word	0x08003e3d
 8003de0:	08003e3d 	.word	0x08003e3d
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e2d 	.word	0x08003e2d
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e3d 	.word	0x08003e3d
 8003df8:	08003e3d 	.word	0x08003e3d
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e3d 	.word	0x08003e3d
 8003e04:	08003e3d 	.word	0x08003e3d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e12:	e326      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e14:	2304      	movs	r3, #4
 8003e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1a:	e322      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e22:	e31e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e2a:	e31a      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e32:	e316      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e3a:	e312      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e42:	e30e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6b      	ldr	r2, [pc, #428]	; (8003ff8 <UART_SetConfig+0x340>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d130      	bne.n	8003eb0 <UART_SetConfig+0x1f8>
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <UART_SetConfig+0x33c>)
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d826      	bhi.n	8003ea8 <UART_SetConfig+0x1f0>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x1a8>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e79 	.word	0x08003e79
 8003e64:	08003e81 	.word	0x08003e81
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7e:	e2f0      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e86:	e2ec      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e8e:	e2e8      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e96:	e2e4      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003e98:	2320      	movs	r3, #32
 8003e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e9e:	e2e0      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ea6:	e2dc      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eae:	e2d8      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a51      	ldr	r2, [pc, #324]	; (8003ffc <UART_SetConfig+0x344>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d130      	bne.n	8003f1c <UART_SetConfig+0x264>
 8003eba:	4b4e      	ldr	r3, [pc, #312]	; (8003ff4 <UART_SetConfig+0x33c>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d826      	bhi.n	8003f14 <UART_SetConfig+0x25c>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x214>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003ee5 	.word	0x08003ee5
 8003ed0:	08003eed 	.word	0x08003eed
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eea:	e2ba      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003eec:	2304      	movs	r3, #4
 8003eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef2:	e2b6      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efa:	e2b2      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003efc:	2310      	movs	r3, #16
 8003efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f02:	e2ae      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f04:	2320      	movs	r3, #32
 8003f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f0a:	e2aa      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f0c:	2340      	movs	r3, #64	; 0x40
 8003f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f12:	e2a6      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f1a:	e2a2      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a37      	ldr	r2, [pc, #220]	; (8004000 <UART_SetConfig+0x348>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d130      	bne.n	8003f88 <UART_SetConfig+0x2d0>
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <UART_SetConfig+0x33c>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d826      	bhi.n	8003f80 <UART_SetConfig+0x2c8>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x280>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f51 	.word	0x08003f51
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	08003f61 	.word	0x08003f61
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f56:	e284      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5e:	e280      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f60:	2308      	movs	r3, #8
 8003f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f66:	e27c      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6e:	e278      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f70:	2320      	movs	r3, #32
 8003f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f76:	e274      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f78:	2340      	movs	r3, #64	; 0x40
 8003f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7e:	e270      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f86:	e26c      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <UART_SetConfig+0x34c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d142      	bne.n	8004018 <UART_SetConfig+0x360>
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <UART_SetConfig+0x33c>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d838      	bhi.n	8004010 <UART_SetConfig+0x358>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x2ec>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fbd 	.word	0x08003fbd
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	08003fcd 	.word	0x08003fcd
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fc2:	e24e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fca:	e24a      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd2:	e246      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fda:	e242      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003fdc:	2320      	movs	r3, #32
 8003fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe2:	e23e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8003fe4:	cfff69f3 	.word	0xcfff69f3
 8003fe8:	58000c00 	.word	0x58000c00
 8003fec:	11fff4ff 	.word	0x11fff4ff
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	40004400 	.word	0x40004400
 8003ffc:	40004800 	.word	0x40004800
 8004000:	40004c00 	.word	0x40004c00
 8004004:	40005000 	.word	0x40005000
 8004008:	2340      	movs	r3, #64	; 0x40
 800400a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800400e:	e228      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004016:	e224      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4ab1      	ldr	r2, [pc, #708]	; (80042e4 <UART_SetConfig+0x62c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d176      	bne.n	8004110 <UART_SetConfig+0x458>
 8004022:	4bb1      	ldr	r3, [pc, #708]	; (80042e8 <UART_SetConfig+0x630>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402a:	2b28      	cmp	r3, #40	; 0x28
 800402c:	d86c      	bhi.n	8004108 <UART_SetConfig+0x450>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x37c>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	080040d9 	.word	0x080040d9
 8004038:	08004109 	.word	0x08004109
 800403c:	08004109 	.word	0x08004109
 8004040:	08004109 	.word	0x08004109
 8004044:	08004109 	.word	0x08004109
 8004048:	08004109 	.word	0x08004109
 800404c:	08004109 	.word	0x08004109
 8004050:	08004109 	.word	0x08004109
 8004054:	080040e1 	.word	0x080040e1
 8004058:	08004109 	.word	0x08004109
 800405c:	08004109 	.word	0x08004109
 8004060:	08004109 	.word	0x08004109
 8004064:	08004109 	.word	0x08004109
 8004068:	08004109 	.word	0x08004109
 800406c:	08004109 	.word	0x08004109
 8004070:	08004109 	.word	0x08004109
 8004074:	080040e9 	.word	0x080040e9
 8004078:	08004109 	.word	0x08004109
 800407c:	08004109 	.word	0x08004109
 8004080:	08004109 	.word	0x08004109
 8004084:	08004109 	.word	0x08004109
 8004088:	08004109 	.word	0x08004109
 800408c:	08004109 	.word	0x08004109
 8004090:	08004109 	.word	0x08004109
 8004094:	080040f1 	.word	0x080040f1
 8004098:	08004109 	.word	0x08004109
 800409c:	08004109 	.word	0x08004109
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004109 	.word	0x08004109
 80040a8:	08004109 	.word	0x08004109
 80040ac:	08004109 	.word	0x08004109
 80040b0:	08004109 	.word	0x08004109
 80040b4:	080040f9 	.word	0x080040f9
 80040b8:	08004109 	.word	0x08004109
 80040bc:	08004109 	.word	0x08004109
 80040c0:	08004109 	.word	0x08004109
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004109 	.word	0x08004109
 80040cc:	08004109 	.word	0x08004109
 80040d0:	08004109 	.word	0x08004109
 80040d4:	08004101 	.word	0x08004101
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040de:	e1c0      	b.n	8004462 <UART_SetConfig+0x7aa>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e6:	e1bc      	b.n	8004462 <UART_SetConfig+0x7aa>
 80040e8:	2308      	movs	r3, #8
 80040ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ee:	e1b8      	b.n	8004462 <UART_SetConfig+0x7aa>
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f6:	e1b4      	b.n	8004462 <UART_SetConfig+0x7aa>
 80040f8:	2320      	movs	r3, #32
 80040fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fe:	e1b0      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004100:	2340      	movs	r3, #64	; 0x40
 8004102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004106:	e1ac      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410e:	e1a8      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a75      	ldr	r2, [pc, #468]	; (80042ec <UART_SetConfig+0x634>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d130      	bne.n	800417c <UART_SetConfig+0x4c4>
 800411a:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <UART_SetConfig+0x630>)
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	2b05      	cmp	r3, #5
 8004124:	d826      	bhi.n	8004174 <UART_SetConfig+0x4bc>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x474>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004145 	.word	0x08004145
 8004130:	0800414d 	.word	0x0800414d
 8004134:	08004155 	.word	0x08004155
 8004138:	0800415d 	.word	0x0800415d
 800413c:	08004165 	.word	0x08004165
 8004140:	0800416d 	.word	0x0800416d
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414a:	e18a      	b.n	8004462 <UART_SetConfig+0x7aa>
 800414c:	2304      	movs	r3, #4
 800414e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004152:	e186      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004154:	2308      	movs	r3, #8
 8004156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415a:	e182      	b.n	8004462 <UART_SetConfig+0x7aa>
 800415c:	2310      	movs	r3, #16
 800415e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004162:	e17e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004164:	2320      	movs	r3, #32
 8004166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416a:	e17a      	b.n	8004462 <UART_SetConfig+0x7aa>
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004172:	e176      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417a:	e172      	b.n	8004462 <UART_SetConfig+0x7aa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a5b      	ldr	r2, [pc, #364]	; (80042f0 <UART_SetConfig+0x638>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d130      	bne.n	80041e8 <UART_SetConfig+0x530>
 8004186:	4b58      	ldr	r3, [pc, #352]	; (80042e8 <UART_SetConfig+0x630>)
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b05      	cmp	r3, #5
 8004190:	d826      	bhi.n	80041e0 <UART_SetConfig+0x528>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x4e0>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041b1 	.word	0x080041b1
 800419c:	080041b9 	.word	0x080041b9
 80041a0:	080041c1 	.word	0x080041c1
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b6:	e154      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041b8:	2304      	movs	r3, #4
 80041ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041be:	e150      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041c0:	2308      	movs	r3, #8
 80041c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c6:	e14c      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ce:	e148      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041d0:	2320      	movs	r3, #32
 80041d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d6:	e144      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041de:	e140      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e6:	e13c      	b.n	8004462 <UART_SetConfig+0x7aa>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a41      	ldr	r2, [pc, #260]	; (80042f4 <UART_SetConfig+0x63c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f040 8082 	bne.w	80042f8 <UART_SetConfig+0x640>
 80041f4:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <UART_SetConfig+0x630>)
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fc:	2b28      	cmp	r3, #40	; 0x28
 80041fe:	d86d      	bhi.n	80042dc <UART_SetConfig+0x624>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x550>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	080042ad 	.word	0x080042ad
 800420c:	080042dd 	.word	0x080042dd
 8004210:	080042dd 	.word	0x080042dd
 8004214:	080042dd 	.word	0x080042dd
 8004218:	080042dd 	.word	0x080042dd
 800421c:	080042dd 	.word	0x080042dd
 8004220:	080042dd 	.word	0x080042dd
 8004224:	080042dd 	.word	0x080042dd
 8004228:	080042b5 	.word	0x080042b5
 800422c:	080042dd 	.word	0x080042dd
 8004230:	080042dd 	.word	0x080042dd
 8004234:	080042dd 	.word	0x080042dd
 8004238:	080042dd 	.word	0x080042dd
 800423c:	080042dd 	.word	0x080042dd
 8004240:	080042dd 	.word	0x080042dd
 8004244:	080042dd 	.word	0x080042dd
 8004248:	080042bd 	.word	0x080042bd
 800424c:	080042dd 	.word	0x080042dd
 8004250:	080042dd 	.word	0x080042dd
 8004254:	080042dd 	.word	0x080042dd
 8004258:	080042dd 	.word	0x080042dd
 800425c:	080042dd 	.word	0x080042dd
 8004260:	080042dd 	.word	0x080042dd
 8004264:	080042dd 	.word	0x080042dd
 8004268:	080042c5 	.word	0x080042c5
 800426c:	080042dd 	.word	0x080042dd
 8004270:	080042dd 	.word	0x080042dd
 8004274:	080042dd 	.word	0x080042dd
 8004278:	080042dd 	.word	0x080042dd
 800427c:	080042dd 	.word	0x080042dd
 8004280:	080042dd 	.word	0x080042dd
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042cd 	.word	0x080042cd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042dd 	.word	0x080042dd
 800429c:	080042dd 	.word	0x080042dd
 80042a0:	080042dd 	.word	0x080042dd
 80042a4:	080042dd 	.word	0x080042dd
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e0d6      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ba:	e0d2      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c2:	e0ce      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ca:	e0ca      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042cc:	2320      	movs	r3, #32
 80042ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d2:	e0c6      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042da:	e0c2      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042e2:	e0be      	b.n	8004462 <UART_SetConfig+0x7aa>
 80042e4:	40011400 	.word	0x40011400
 80042e8:	58024400 	.word	0x58024400
 80042ec:	40007800 	.word	0x40007800
 80042f0:	40007c00 	.word	0x40007c00
 80042f4:	40011800 	.word	0x40011800
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4aad      	ldr	r2, [pc, #692]	; (80045b4 <UART_SetConfig+0x8fc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d176      	bne.n	80043f0 <UART_SetConfig+0x738>
 8004302:	4bad      	ldr	r3, [pc, #692]	; (80045b8 <UART_SetConfig+0x900>)
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430a:	2b28      	cmp	r3, #40	; 0x28
 800430c:	d86c      	bhi.n	80043e8 <UART_SetConfig+0x730>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0x65c>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	080043b9 	.word	0x080043b9
 8004318:	080043e9 	.word	0x080043e9
 800431c:	080043e9 	.word	0x080043e9
 8004320:	080043e9 	.word	0x080043e9
 8004324:	080043e9 	.word	0x080043e9
 8004328:	080043e9 	.word	0x080043e9
 800432c:	080043e9 	.word	0x080043e9
 8004330:	080043e9 	.word	0x080043e9
 8004334:	080043c1 	.word	0x080043c1
 8004338:	080043e9 	.word	0x080043e9
 800433c:	080043e9 	.word	0x080043e9
 8004340:	080043e9 	.word	0x080043e9
 8004344:	080043e9 	.word	0x080043e9
 8004348:	080043e9 	.word	0x080043e9
 800434c:	080043e9 	.word	0x080043e9
 8004350:	080043e9 	.word	0x080043e9
 8004354:	080043c9 	.word	0x080043c9
 8004358:	080043e9 	.word	0x080043e9
 800435c:	080043e9 	.word	0x080043e9
 8004360:	080043e9 	.word	0x080043e9
 8004364:	080043e9 	.word	0x080043e9
 8004368:	080043e9 	.word	0x080043e9
 800436c:	080043e9 	.word	0x080043e9
 8004370:	080043e9 	.word	0x080043e9
 8004374:	080043d1 	.word	0x080043d1
 8004378:	080043e9 	.word	0x080043e9
 800437c:	080043e9 	.word	0x080043e9
 8004380:	080043e9 	.word	0x080043e9
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080043e9 	.word	0x080043e9
 800438c:	080043e9 	.word	0x080043e9
 8004390:	080043e9 	.word	0x080043e9
 8004394:	080043d9 	.word	0x080043d9
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043e9 	.word	0x080043e9
 80043a0:	080043e9 	.word	0x080043e9
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	080043e9 	.word	0x080043e9
 80043ac:	080043e9 	.word	0x080043e9
 80043b0:	080043e9 	.word	0x080043e9
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e050      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e04c      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e048      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e044      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043d8:	2320      	movs	r3, #32
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e040      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043e0:	2340      	movs	r3, #64	; 0x40
 80043e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e6:	e03c      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ee:	e038      	b.n	8004462 <UART_SetConfig+0x7aa>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a71      	ldr	r2, [pc, #452]	; (80045bc <UART_SetConfig+0x904>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d130      	bne.n	800445c <UART_SetConfig+0x7a4>
 80043fa:	4b6f      	ldr	r3, [pc, #444]	; (80045b8 <UART_SetConfig+0x900>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b05      	cmp	r3, #5
 8004404:	d826      	bhi.n	8004454 <UART_SetConfig+0x79c>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x754>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004425 	.word	0x08004425
 8004410:	0800442d 	.word	0x0800442d
 8004414:	08004435 	.word	0x08004435
 8004418:	0800443d 	.word	0x0800443d
 800441c:	08004445 	.word	0x08004445
 8004420:	0800444d 	.word	0x0800444d
 8004424:	2302      	movs	r3, #2
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e01a      	b.n	8004462 <UART_SetConfig+0x7aa>
 800442c:	2304      	movs	r3, #4
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e016      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004434:	2308      	movs	r3, #8
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e012      	b.n	8004462 <UART_SetConfig+0x7aa>
 800443c:	2310      	movs	r3, #16
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e00e      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004444:	2320      	movs	r3, #32
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e00a      	b.n	8004462 <UART_SetConfig+0x7aa>
 800444c:	2340      	movs	r3, #64	; 0x40
 800444e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004452:	e006      	b.n	8004462 <UART_SetConfig+0x7aa>
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445a:	e002      	b.n	8004462 <UART_SetConfig+0x7aa>
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a55      	ldr	r2, [pc, #340]	; (80045bc <UART_SetConfig+0x904>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f040 80f0 	bne.w	800464e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004472:	2b20      	cmp	r3, #32
 8004474:	dc46      	bgt.n	8004504 <UART_SetConfig+0x84c>
 8004476:	2b02      	cmp	r3, #2
 8004478:	db75      	blt.n	8004566 <UART_SetConfig+0x8ae>
 800447a:	3b02      	subs	r3, #2
 800447c:	2b1e      	cmp	r3, #30
 800447e:	d872      	bhi.n	8004566 <UART_SetConfig+0x8ae>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x7d0>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	0800450b 	.word	0x0800450b
 800448c:	08004567 	.word	0x08004567
 8004490:	08004513 	.word	0x08004513
 8004494:	08004567 	.word	0x08004567
 8004498:	08004567 	.word	0x08004567
 800449c:	08004567 	.word	0x08004567
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004567 	.word	0x08004567
 80044a8:	08004567 	.word	0x08004567
 80044ac:	08004567 	.word	0x08004567
 80044b0:	08004567 	.word	0x08004567
 80044b4:	08004567 	.word	0x08004567
 80044b8:	08004567 	.word	0x08004567
 80044bc:	08004567 	.word	0x08004567
 80044c0:	08004533 	.word	0x08004533
 80044c4:	08004567 	.word	0x08004567
 80044c8:	08004567 	.word	0x08004567
 80044cc:	08004567 	.word	0x08004567
 80044d0:	08004567 	.word	0x08004567
 80044d4:	08004567 	.word	0x08004567
 80044d8:	08004567 	.word	0x08004567
 80044dc:	08004567 	.word	0x08004567
 80044e0:	08004567 	.word	0x08004567
 80044e4:	08004567 	.word	0x08004567
 80044e8:	08004567 	.word	0x08004567
 80044ec:	08004567 	.word	0x08004567
 80044f0:	08004567 	.word	0x08004567
 80044f4:	08004567 	.word	0x08004567
 80044f8:	08004567 	.word	0x08004567
 80044fc:	08004567 	.word	0x08004567
 8004500:	08004559 	.word	0x08004559
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d02a      	beq.n	800455e <UART_SetConfig+0x8a6>
 8004508:	e02d      	b.n	8004566 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800450a:	f7fe ff63 	bl	80033d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800450e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004510:	e02f      	b.n	8004572 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe ff72 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004520:	e027      	b.n	8004572 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f8be 	bl	80036a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004530:	e01f      	b.n	8004572 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <UART_SetConfig+0x900>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <UART_SetConfig+0x900>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	08db      	lsrs	r3, r3, #3
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <UART_SetConfig+0x908>)
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004550:	e00f      	b.n	8004572 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <UART_SetConfig+0x908>)
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004556:	e00c      	b.n	8004572 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <UART_SetConfig+0x90c>)
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800455c:	e009      	b.n	8004572 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004564:	e005      	b.n	8004572 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 81e6 	beq.w	8004946 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <UART_SetConfig+0x910>)
 8004580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004584:	461a      	mov	r2, r3
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	fbb3 f3f2 	udiv	r3, r3, r2
 800458c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	429a      	cmp	r2, r3
 800459c:	d305      	bcc.n	80045aa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045b0:	e1c9      	b.n	8004946 <UART_SetConfig+0xc8e>
 80045b2:	bf00      	nop
 80045b4:	40011c00 	.word	0x40011c00
 80045b8:	58024400 	.word	0x58024400
 80045bc:	58000c00 	.word	0x58000c00
 80045c0:	03d09000 	.word	0x03d09000
 80045c4:	003d0900 	.word	0x003d0900
 80045c8:	080051ec 	.word	0x080051ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	4618      	mov	r0, r3
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	4ac1      	ldr	r2, [pc, #772]	; (80048e0 <UART_SetConfig+0xc28>)
 80045da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f7fb fe82 	bl	80002ec <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	020b      	lsls	r3, r1, #8
 80045fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045fe:	0202      	lsls	r2, r0, #8
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	6849      	ldr	r1, [r1, #4]
 8004604:	0849      	lsrs	r1, r1, #1
 8004606:	4608      	mov	r0, r1
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	1814      	adds	r4, r2, r0
 800460e:	eb43 0501 	adc.w	r5, r3, r1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb fe64 	bl	80002ec <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d308      	bcc.n	8004646 <UART_SetConfig+0x98e>
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463a:	d204      	bcs.n	8004646 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e17f      	b.n	8004946 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800464c:	e17b      	b.n	8004946 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	f040 80bd 	bne.w	80047d4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800465a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800465e:	2b20      	cmp	r3, #32
 8004660:	dc48      	bgt.n	80046f4 <UART_SetConfig+0xa3c>
 8004662:	2b00      	cmp	r3, #0
 8004664:	db7b      	blt.n	800475e <UART_SetConfig+0xaa6>
 8004666:	2b20      	cmp	r3, #32
 8004668:	d879      	bhi.n	800475e <UART_SetConfig+0xaa6>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x9b8>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046fb 	.word	0x080046fb
 8004674:	08004703 	.word	0x08004703
 8004678:	0800475f 	.word	0x0800475f
 800467c:	0800475f 	.word	0x0800475f
 8004680:	0800470b 	.word	0x0800470b
 8004684:	0800475f 	.word	0x0800475f
 8004688:	0800475f 	.word	0x0800475f
 800468c:	0800475f 	.word	0x0800475f
 8004690:	0800471b 	.word	0x0800471b
 8004694:	0800475f 	.word	0x0800475f
 8004698:	0800475f 	.word	0x0800475f
 800469c:	0800475f 	.word	0x0800475f
 80046a0:	0800475f 	.word	0x0800475f
 80046a4:	0800475f 	.word	0x0800475f
 80046a8:	0800475f 	.word	0x0800475f
 80046ac:	0800475f 	.word	0x0800475f
 80046b0:	0800472b 	.word	0x0800472b
 80046b4:	0800475f 	.word	0x0800475f
 80046b8:	0800475f 	.word	0x0800475f
 80046bc:	0800475f 	.word	0x0800475f
 80046c0:	0800475f 	.word	0x0800475f
 80046c4:	0800475f 	.word	0x0800475f
 80046c8:	0800475f 	.word	0x0800475f
 80046cc:	0800475f 	.word	0x0800475f
 80046d0:	0800475f 	.word	0x0800475f
 80046d4:	0800475f 	.word	0x0800475f
 80046d8:	0800475f 	.word	0x0800475f
 80046dc:	0800475f 	.word	0x0800475f
 80046e0:	0800475f 	.word	0x0800475f
 80046e4:	0800475f 	.word	0x0800475f
 80046e8:	0800475f 	.word	0x0800475f
 80046ec:	0800475f 	.word	0x0800475f
 80046f0:	08004751 	.word	0x08004751
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d02e      	beq.n	8004756 <UART_SetConfig+0xa9e>
 80046f8:	e031      	b.n	800475e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fa:	f7fd ff33 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 80046fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004700:	e033      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004702:	f7fd ff45 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8004706:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004708:	e02f      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fe76 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004718:	e027      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe ffc2 	bl	80036a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004728:	e01f      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800472a:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <UART_SetConfig+0xc2c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004736:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <UART_SetConfig+0xc2c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	08db      	lsrs	r3, r3, #3
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <UART_SetConfig+0xc30>)
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004748:	e00f      	b.n	800476a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800474a:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <UART_SetConfig+0xc30>)
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800474e:	e00c      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004750:	4b66      	ldr	r3, [pc, #408]	; (80048ec <UART_SetConfig+0xc34>)
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004754:	e009      	b.n	800476a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800475c:	e005      	b.n	800476a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80ea 	beq.w	8004946 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	4a5a      	ldr	r2, [pc, #360]	; (80048e0 <UART_SetConfig+0xc28>)
 8004778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800477c:	461a      	mov	r2, r3
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	fbb3 f3f2 	udiv	r3, r3, r2
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d916      	bls.n	80047cc <UART_SetConfig+0xb14>
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d212      	bcs.n	80047cc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047be:	4313      	orrs	r3, r2
 80047c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e0bc      	b.n	8004946 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80047d2:	e0b8      	b.n	8004946 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047d8:	2b20      	cmp	r3, #32
 80047da:	dc4b      	bgt.n	8004874 <UART_SetConfig+0xbbc>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f2c0 8087 	blt.w	80048f0 <UART_SetConfig+0xc38>
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	f200 8084 	bhi.w	80048f0 <UART_SetConfig+0xc38>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0xb38>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	0800487b 	.word	0x0800487b
 80047f4:	08004883 	.word	0x08004883
 80047f8:	080048f1 	.word	0x080048f1
 80047fc:	080048f1 	.word	0x080048f1
 8004800:	0800488b 	.word	0x0800488b
 8004804:	080048f1 	.word	0x080048f1
 8004808:	080048f1 	.word	0x080048f1
 800480c:	080048f1 	.word	0x080048f1
 8004810:	0800489b 	.word	0x0800489b
 8004814:	080048f1 	.word	0x080048f1
 8004818:	080048f1 	.word	0x080048f1
 800481c:	080048f1 	.word	0x080048f1
 8004820:	080048f1 	.word	0x080048f1
 8004824:	080048f1 	.word	0x080048f1
 8004828:	080048f1 	.word	0x080048f1
 800482c:	080048f1 	.word	0x080048f1
 8004830:	080048ab 	.word	0x080048ab
 8004834:	080048f1 	.word	0x080048f1
 8004838:	080048f1 	.word	0x080048f1
 800483c:	080048f1 	.word	0x080048f1
 8004840:	080048f1 	.word	0x080048f1
 8004844:	080048f1 	.word	0x080048f1
 8004848:	080048f1 	.word	0x080048f1
 800484c:	080048f1 	.word	0x080048f1
 8004850:	080048f1 	.word	0x080048f1
 8004854:	080048f1 	.word	0x080048f1
 8004858:	080048f1 	.word	0x080048f1
 800485c:	080048f1 	.word	0x080048f1
 8004860:	080048f1 	.word	0x080048f1
 8004864:	080048f1 	.word	0x080048f1
 8004868:	080048f1 	.word	0x080048f1
 800486c:	080048f1 	.word	0x080048f1
 8004870:	080048d1 	.word	0x080048d1
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d02e      	beq.n	80048d6 <UART_SetConfig+0xc1e>
 8004878:	e03a      	b.n	80048f0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7fd fe73 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 800487e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004880:	e03c      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004882:	f7fd fe85 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8004886:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004888:	e038      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fdb6 	bl	8003400 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004898:	e030      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe ff02 	bl	80036a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048a8:	e028      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <UART_SetConfig+0xc2c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <UART_SetConfig+0xc2c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <UART_SetConfig+0xc30>)
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048c8:	e018      	b.n	80048fc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <UART_SetConfig+0xc30>)
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ce:	e015      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <UART_SetConfig+0xc34>)
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048d4:	e012      	b.n	80048fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048dc:	e00e      	b.n	80048fc <UART_SetConfig+0xc44>
 80048de:	bf00      	nop
 80048e0:	080051ec 	.word	0x080051ec
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80048fa:	bf00      	nop
    }

    if (pclk != 0U)
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d021      	beq.n	8004946 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <UART_SetConfig+0xcb8>)
 8004908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490c:	461a      	mov	r2, r3
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	fbb3 f2f2 	udiv	r2, r3, r2
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	2b0f      	cmp	r3, #15
 800492a:	d909      	bls.n	8004940 <UART_SetConfig+0xc88>
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004932:	d205      	bcs.n	8004940 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e002      	b.n	8004946 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004962:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004966:	4618      	mov	r0, r3
 8004968:	3738      	adds	r7, #56	; 0x38
 800496a:	46bd      	mov	sp, r7
 800496c:	bdb0      	pop	{r4, r5, r7, pc}
 800496e:	bf00      	nop
 8004970:	080051ec 	.word	0x080051ec

08004974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01a      	beq.n	8004a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d10a      	bne.n	8004a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]
  }
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac8:	f7fc fa96 	bl	8000ff8 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d10e      	bne.n	8004afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f82f 	bl	8004b4e <UART_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e025      	b.n	8004b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d10e      	bne.n	8004b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f819 	bl	8004b4e <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00f      	b.n	8004b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b09c      	sub	sp, #112	; 0x70
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5e:	e0a9      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	f000 80a5 	beq.w	8004cb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fc fa45 	bl	8000ff8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d140      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b94:	667b      	str	r3, [r7, #100]	; 0x64
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e6      	bne.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e5      	bne.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e069      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d051      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1e:	d149      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c7c:	623a      	str	r2, [r7, #32]
 8004c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	69f9      	ldr	r1, [r7, #28]
 8004c82:	6a3a      	ldr	r2, [r7, #32]
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e5      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e010      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	f43f af46 	beq.w	8004b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3770      	adds	r7, #112	; 0x70
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e027      	b.n	8004d44 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	; 0x24
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e02d      	b.n	8004dc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f84f 	bl	8004e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e02d      	b.n	8004e40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f811 	bl	8004e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d108      	bne.n	8004e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e68:	e031      	b.n	8004ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e6e:	2310      	movs	r3, #16
 8004e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	0e5b      	lsrs	r3, r3, #25
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	0f5b      	lsrs	r3, r3, #29
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e92:	7bbb      	ldrb	r3, [r7, #14]
 8004e94:	7b3a      	ldrb	r2, [r7, #12]
 8004e96:	4911      	ldr	r1, [pc, #68]	; (8004edc <UARTEx_SetNbDataToProcess+0x94>)
 8004e98:	5c8a      	ldrb	r2, [r1, r2]
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e9e:	7b3a      	ldrb	r2, [r7, #12]
 8004ea0:	490f      	ldr	r1, [pc, #60]	; (8004ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	7b7a      	ldrb	r2, [r7, #13]
 8004eb4:	4909      	ldr	r1, [pc, #36]	; (8004edc <UARTEx_SetNbDataToProcess+0x94>)
 8004eb6:	5c8a      	ldrb	r2, [r1, r2]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ebc:	7b7a      	ldrb	r2, [r7, #13]
 8004ebe:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	08005204 	.word	0x08005204
 8004ee0:	0800520c 	.word	0x0800520c

08004ee4 <arm_mat_mult_f32>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	8844      	ldrh	r4, [r0, #2]
 8004eec:	880b      	ldrh	r3, [r1, #0]
 8004eee:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8004ef2:	8800      	ldrh	r0, [r0, #0]
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004efa:	4605      	mov	r5, r0
 8004efc:	9003      	str	r0, [sp, #12]
 8004efe:	6850      	ldr	r0, [r2, #4]
 8004f00:	9004      	str	r0, [sp, #16]
 8004f02:	f040 8091 	bne.w	8005028 <arm_mat_mult_f32+0x144>
 8004f06:	8810      	ldrh	r0, [r2, #0]
 8004f08:	42a8      	cmp	r0, r5
 8004f0a:	f040 808d 	bne.w	8005028 <arm_mat_mult_f32+0x144>
 8004f0e:	8852      	ldrh	r2, [r2, #2]
 8004f10:	454a      	cmp	r2, r9
 8004f12:	f040 8089 	bne.w	8005028 <arm_mat_mult_f32+0x144>
 8004f16:	f003 0003 	and.w	r0, r3, #3
 8004f1a:	089a      	lsrs	r2, r3, #2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	684d      	ldr	r5, [r1, #4]
 8004f20:	4607      	mov	r7, r0
 8004f22:	1e54      	subs	r4, r2, #1
 8004f24:	4616      	mov	r6, r2
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	1e7a      	subs	r2, r7, #1
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9000      	str	r0, [sp, #0]
 8004f2e:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	b292      	uxth	r2, r2
 8004f36:	b2a3      	uxth	r3, r4
 8004f38:	3201      	adds	r2, #1
 8004f3a:	ea4f 0489 	mov.w	r4, r9, lsl #2
 8004f3e:	3301      	adds	r3, #1
 8004f40:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8004f44:	fb00 fb03 	mul.w	fp, r0, r3
 8004f48:	eb0c 1803 	add.w	r8, ip, r3, lsl #4
 8004f4c:	f8cd a004 	str.w	sl, [sp, #4]
 8004f50:	46da      	mov	sl, fp
 8004f52:	468b      	mov	fp, r1
 8004f54:	4631      	mov	r1, r6
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	2700      	movs	r7, #0
 8004f5a:	9a02      	ldr	r2, [sp, #8]
 8004f5c:	f108 0610 	add.w	r6, r8, #16
 8004f60:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d05b      	beq.n	8005020 <arm_mat_mult_f32+0x13c>
 8004f68:	f10c 0010 	add.w	r0, ip, #16
 8004f6c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005034 <arm_mat_mult_f32+0x150>
 8004f70:	462a      	mov	r2, r5
 8004f72:	ed50 6a04 	vldr	s13, [r0, #-16]
 8004f76:	1913      	adds	r3, r2, r4
 8004f78:	ed92 7a00 	vldr	s14, [r2]
 8004f7c:	3010      	adds	r0, #16
 8004f7e:	edd3 5a00 	vldr	s11, [r3]
 8004f82:	4423      	add	r3, r4
 8004f84:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004f88:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
 8004f8c:	ed93 6a00 	vldr	s12, [r3]
 8004f90:	4423      	add	r3, r4
 8004f92:	ee26 5aa5 	vmul.f32	s10, s13, s11
 8004f96:	ed50 5a06 	vldr	s11, [r0, #-24]	; 0xffffffe8
 8004f9a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004f9e:	ed93 7a00 	vldr	s14, [r3]
 8004fa2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004fa6:	ed50 5a05 	vldr	s11, [r0, #-20]	; 0xffffffec
 8004faa:	42b0      	cmp	r0, r6
 8004fac:	eb03 0204 	add.w	r2, r3, r4
 8004fb0:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004fb4:	ee25 7a87 	vmul.f32	s14, s11, s14
 8004fb8:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc0:	d1d7      	bne.n	8004f72 <arm_mat_mult_f32+0x8e>
 8004fc2:	4455      	add	r5, sl
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	9a00      	ldr	r2, [sp, #0]
 8004fc8:	b162      	cbz	r2, 8004fe4 <arm_mat_mult_f32+0x100>
 8004fca:	9a01      	ldr	r2, [sp, #4]
 8004fcc:	189a      	adds	r2, r3, r2
 8004fce:	ecf3 6a01 	vldmia	r3!, {s13}
 8004fd2:	ed95 7a00 	vldr	s14, [r5]
 8004fd6:	4425      	add	r5, r4
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fe2:	d1f4      	bne.n	8004fce <arm_mat_mult_f32+0xea>
 8004fe4:	3701      	adds	r7, #1
 8004fe6:	ecee 7a01 	vstmia	lr!, {s15}
 8004fea:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004fee:	b2bf      	uxth	r7, r7
 8004ff0:	454f      	cmp	r7, r9
 8004ff2:	eb03 0587 	add.w	r5, r3, r7, lsl #2
 8004ff6:	d1b5      	bne.n	8004f64 <arm_mat_mult_f32+0x80>
 8004ff8:	9802      	ldr	r0, [sp, #8]
 8004ffa:	9a03      	ldr	r2, [sp, #12]
 8004ffc:	4438      	add	r0, r7
 8004ffe:	9d05      	ldr	r5, [sp, #20]
 8005000:	3a01      	subs	r2, #1
 8005002:	4607      	mov	r7, r0
 8005004:	44ac      	add	ip, r5
 8005006:	44a8      	add	r8, r5
 8005008:	b292      	uxth	r2, r2
 800500a:	461d      	mov	r5, r3
 800500c:	b2bb      	uxth	r3, r7
 800500e:	9203      	str	r2, [sp, #12]
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	2a00      	cmp	r2, #0
 8005014:	d19f      	bne.n	8004f56 <arm_mat_mult_f32+0x72>
 8005016:	4610      	mov	r0, r2
 8005018:	b240      	sxtb	r0, r0
 800501a:	b007      	add	sp, #28
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	4663      	mov	r3, ip
 8005022:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005034 <arm_mat_mult_f32+0x150>
 8005026:	e7ce      	b.n	8004fc6 <arm_mat_mult_f32+0xe2>
 8005028:	20fd      	movs	r0, #253	; 0xfd
 800502a:	b240      	sxtb	r0, r0
 800502c:	b007      	add	sp, #28
 800502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	00000000 	.word	0x00000000

08005038 <arm_mat_init_f32>:
 8005038:	8001      	strh	r1, [r0, #0]
 800503a:	8042      	strh	r2, [r0, #2]
 800503c:	6043      	str	r3, [r0, #4]
 800503e:	4770      	bx	lr

08005040 <__libc_init_array>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4d0d      	ldr	r5, [pc, #52]	; (8005078 <__libc_init_array+0x38>)
 8005044:	4c0d      	ldr	r4, [pc, #52]	; (800507c <__libc_init_array+0x3c>)
 8005046:	1b64      	subs	r4, r4, r5
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	2600      	movs	r6, #0
 800504c:	42a6      	cmp	r6, r4
 800504e:	d109      	bne.n	8005064 <__libc_init_array+0x24>
 8005050:	4d0b      	ldr	r5, [pc, #44]	; (8005080 <__libc_init_array+0x40>)
 8005052:	4c0c      	ldr	r4, [pc, #48]	; (8005084 <__libc_init_array+0x44>)
 8005054:	f000 f886 	bl	8005164 <_init>
 8005058:	1b64      	subs	r4, r4, r5
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	2600      	movs	r6, #0
 800505e:	42a6      	cmp	r6, r4
 8005060:	d105      	bne.n	800506e <__libc_init_array+0x2e>
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	f855 3b04 	ldr.w	r3, [r5], #4
 8005068:	4798      	blx	r3
 800506a:	3601      	adds	r6, #1
 800506c:	e7ee      	b.n	800504c <__libc_init_array+0xc>
 800506e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005072:	4798      	blx	r3
 8005074:	3601      	adds	r6, #1
 8005076:	e7f2      	b.n	800505e <__libc_init_array+0x1e>
 8005078:	0800521c 	.word	0x0800521c
 800507c:	0800521c 	.word	0x0800521c
 8005080:	0800521c 	.word	0x0800521c
 8005084:	08005220 	.word	0x08005220

08005088 <free>:
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <free+0xc>)
 800508a:	4601      	mov	r1, r0
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f000 b80b 	b.w	80050a8 <_free_r>
 8005092:	bf00      	nop
 8005094:	24000010 	.word	0x24000010

08005098 <memset>:
 8005098:	4402      	add	r2, r0
 800509a:	4603      	mov	r3, r0
 800509c:	4293      	cmp	r3, r2
 800509e:	d100      	bne.n	80050a2 <memset+0xa>
 80050a0:	4770      	bx	lr
 80050a2:	f803 1b01 	strb.w	r1, [r3], #1
 80050a6:	e7f9      	b.n	800509c <memset+0x4>

080050a8 <_free_r>:
 80050a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050aa:	2900      	cmp	r1, #0
 80050ac:	d048      	beq.n	8005140 <_free_r+0x98>
 80050ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b2:	9001      	str	r0, [sp, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f1a1 0404 	sub.w	r4, r1, #4
 80050ba:	bfb8      	it	lt
 80050bc:	18e4      	addlt	r4, r4, r3
 80050be:	f000 f843 	bl	8005148 <__malloc_lock>
 80050c2:	4a20      	ldr	r2, [pc, #128]	; (8005144 <_free_r+0x9c>)
 80050c4:	9801      	ldr	r0, [sp, #4]
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	4615      	mov	r5, r2
 80050ca:	b933      	cbnz	r3, 80050da <_free_r+0x32>
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	6014      	str	r4, [r2, #0]
 80050d0:	b003      	add	sp, #12
 80050d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050d6:	f000 b83d 	b.w	8005154 <__malloc_unlock>
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d90b      	bls.n	80050f6 <_free_r+0x4e>
 80050de:	6821      	ldr	r1, [r4, #0]
 80050e0:	1862      	adds	r2, r4, r1
 80050e2:	4293      	cmp	r3, r2
 80050e4:	bf04      	itt	eq
 80050e6:	681a      	ldreq	r2, [r3, #0]
 80050e8:	685b      	ldreq	r3, [r3, #4]
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	bf04      	itt	eq
 80050ee:	1852      	addeq	r2, r2, r1
 80050f0:	6022      	streq	r2, [r4, #0]
 80050f2:	602c      	str	r4, [r5, #0]
 80050f4:	e7ec      	b.n	80050d0 <_free_r+0x28>
 80050f6:	461a      	mov	r2, r3
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b10b      	cbz	r3, 8005100 <_free_r+0x58>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d9fa      	bls.n	80050f6 <_free_r+0x4e>
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	1855      	adds	r5, r2, r1
 8005104:	42a5      	cmp	r5, r4
 8005106:	d10b      	bne.n	8005120 <_free_r+0x78>
 8005108:	6824      	ldr	r4, [r4, #0]
 800510a:	4421      	add	r1, r4
 800510c:	1854      	adds	r4, r2, r1
 800510e:	42a3      	cmp	r3, r4
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	d1dd      	bne.n	80050d0 <_free_r+0x28>
 8005114:	681c      	ldr	r4, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	6053      	str	r3, [r2, #4]
 800511a:	4421      	add	r1, r4
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	e7d7      	b.n	80050d0 <_free_r+0x28>
 8005120:	d902      	bls.n	8005128 <_free_r+0x80>
 8005122:	230c      	movs	r3, #12
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	e7d3      	b.n	80050d0 <_free_r+0x28>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1961      	adds	r1, r4, r5
 800512c:	428b      	cmp	r3, r1
 800512e:	bf04      	itt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	bf04      	itt	eq
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	6054      	str	r4, [r2, #4]
 800513e:	e7c7      	b.n	80050d0 <_free_r+0x28>
 8005140:	b003      	add	sp, #12
 8005142:	bd30      	pop	{r4, r5, pc}
 8005144:	24000090 	.word	0x24000090

08005148 <__malloc_lock>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__malloc_lock+0x8>)
 800514a:	f000 b809 	b.w	8005160 <__retarget_lock_acquire_recursive>
 800514e:	bf00      	nop
 8005150:	2400012c 	.word	0x2400012c

08005154 <__malloc_unlock>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__malloc_unlock+0x8>)
 8005156:	f000 b804 	b.w	8005162 <__retarget_lock_release_recursive>
 800515a:	bf00      	nop
 800515c:	2400012c 	.word	0x2400012c

08005160 <__retarget_lock_acquire_recursive>:
 8005160:	4770      	bx	lr

08005162 <__retarget_lock_release_recursive>:
 8005162:	4770      	bx	lr

08005164 <_init>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr

08005170 <_fini>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr
