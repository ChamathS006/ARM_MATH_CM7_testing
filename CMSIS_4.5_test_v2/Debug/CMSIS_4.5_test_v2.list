
CMSIS_4.5_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800573c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  24000010  0800574c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c0  0800574c  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017d4b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000295d  00000000  00000000  00037d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b28  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a30  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f064  00000000  00000000  0003bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e403  00000000  00000000  0006aca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013447a  00000000  00000000  000790a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c3  00000000  00000000  001ad521  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c10  00000000  00000000  001ad5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00000d31  00000000  00000000  001b01f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005558 	.word	0x08005558

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005558 	.word	0x08005558

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <mat_f32_check_equal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

arm_status mat_f32_check_equal(arm_matrix_instance_f32 matrixA, arm_matrix_instance_f32 matrixB) {
 80005e4:	b490      	push	{r4, r7}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	f107 0408 	add.w	r4, r7, #8
 80005ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80005f2:	4639      	mov	r1, r7
 80005f4:	e881 000c 	stmia.w	r1, {r2, r3}
	 * Returns ARM_MATH_TEST_FAILURE if matrices aren't equal
	 *
	 * */

	// Check if the rows and cols match up in number
	int test_nRows = (matrixA.numRows == matrixB.numRows);
 80005f8:	893a      	ldrh	r2, [r7, #8]
 80005fa:	883b      	ldrh	r3, [r7, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	61bb      	str	r3, [r7, #24]
	int test_nCols = (matrixA.numCols == matrixB.numCols);
 8000608:	897a      	ldrh	r2, [r7, #10]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	429a      	cmp	r2, r3
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	617b      	str	r3, [r7, #20]

	// If there's a mismatch, then return ARM_MATH_SIZE_MISMATCH immediately
	if (test_nRows * test_nCols == 0) {
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <mat_f32_check_equal+0x46>
		return ARM_MATH_SIZE_MISMATCH;
 8000624:	f06f 0302 	mvn.w	r3, #2
 8000628:	e021      	b.n	800066e <mat_f32_check_equal+0x8a>
	}

	// Since rows and cols match, we need to check every entry
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e016      	b.n	800065e <mat_f32_check_equal+0x7a>
		if (matrixA.pData[i] != matrixB.pData[i]) {
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	ed93 7a00 	vldr	s14, [r3]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eeb4 7a67 	vcmp.f32	s14, s15
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	d002      	beq.n	8000658 <mat_f32_check_equal+0x74>
			return ARM_MATH_TEST_FAILURE;
 8000652:	f06f 0305 	mvn.w	r3, #5
 8000656:	e00a      	b.n	800066e <mat_f32_check_equal+0x8a>
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	3301      	adds	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	893b      	ldrh	r3, [r7, #8]
 8000660:	897a      	ldrh	r2, [r7, #10]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbe1      	blt.n	8000630 <mat_f32_check_equal+0x4c>
		}
	}

	// If it's fine, then return ARM_MATH_SUCCESS
	return ARM_MATH_SUCCESS;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bc90      	pop	{r4, r7}
 8000676:	4770      	bx	lr

08000678 <vec_f32_demean>:
	status = mat_f32_check_equal(matrixAT, matrixTrue);

	return status;
}

void vec_f32_demean(float32_t dataVector[WINDOW_SIZE], float32_t demeanedVector[WINDOW_SIZE]) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
/*
 *
 * */
	// Initialise variables
	float32_t meanValue = 0; // Stores mean of the dataVector input
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]

	// first, get the mean of this 1 x WINDOW_SIZE vector and store in meanValue
	arm_mean_f32(dataVector, (uint32_t) WINDOW_SIZE, &meanValue);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	461a      	mov	r2, r3
 800068e:	2104      	movs	r1, #4
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fd59 	bl	8005148 <arm_mean_f32>

	// Now offset the input vector by the mean value
	arm_offset_f32(dataVector, -meanValue, demeanedVector, (uint32_t) WINDOW_SIZE);
 8000696:	edd7 7a03 	vldr	s15, [r7, #12]
 800069a:	eef1 7a67 	vneg.f32	s15, s15
 800069e:	2204      	movs	r2, #4
 80006a0:	6839      	ldr	r1, [r7, #0]
 80006a2:	eeb0 0a67 	vmov.f32	s0, s15
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f004 fee6 	bl	8005478 <arm_offset_f32>

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <create_data_matrix_f32>:

arm_status create_data_matrix_f32(arm_matrix_instance_f32* uninitialised_matrix, int numOfArrays, ...) {
 80006b4:	b40e      	push	{r1, r2, r3}
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b093      	sub	sp, #76	; 0x4c
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	 * 		(eg: n = 4 matches column 3: Column 3 has the 4th data entry for XAccel, YAccel, ZAccel, Altitude, Pressure, Temp)
	 *
	 * Eg: create_data_matrix_f32(dummy_matrix, 3, XAccelVector[WINDOW_SIZE], YAccelVector[WINDOW_SIZE], ZAccelVector[WINDOW_SIZE]);
	 * */
	// if numOfArrays != NUM_OF_VARIABLES, then return size mismatch immediately
	if (numOfArrays != NUM_OF_VARIABLES) {
 80006be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d002      	beq.n	80006ca <create_data_matrix_f32+0x16>
		return ARM_MATH_SIZE_MISMATCH;
 80006c4:	f06f 0302 	mvn.w	r3, #2
 80006c8:	e034      	b.n	8000734 <create_data_matrix_f32+0x80>
	va_list valist;
//	int outputVector_size = WINDOW_SIZE * numOfArrays;
	float32_t outputVector[TOTAL_SIZE];

	// Start accessing the arguments
	va_start(valist, numOfArrays);
 80006ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38

	// Since all arguments from here should be float32_t arrays, declare a dummy array to store it
	float32_t* argument = NULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (int i = 0; i < numOfArrays; i++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
 80006d8:	e01f      	b.n	800071a <create_data_matrix_f32+0x66>
		// Get next argument
		argument = va_arg(valist, float32_t*);
 80006da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006dc:	1d1a      	adds	r2, r3, #4
 80006de:	63ba      	str	r2, [r7, #56]	; 0x38
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
//		if ((sizeof(argument))/(sizeof(float32_t)) != WINDOW_SIZE) {
//			return ARM_MATH_SIZE_MISMATCH;
//		}

		// Add it to the output array
		for (int j = 0; j < WINDOW_SIZE; j++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
 80006e8:	e011      	b.n	800070e <create_data_matrix_f32+0x5a>
			outputVector[i * WINDOW_SIZE + j] = argument[j];
 80006ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006f0:	441a      	add	r2, r3
 80006f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f4:	0099      	lsls	r1, r3, #2
 80006f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f8:	440b      	add	r3, r1
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000702:	440b      	add	r3, r1
 8000704:	3b40      	subs	r3, #64	; 0x40
 8000706:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < WINDOW_SIZE; j++) {
 8000708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070a:	3301      	adds	r3, #1
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
 800070e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000710:	2b03      	cmp	r3, #3
 8000712:	ddea      	ble.n	80006ea <create_data_matrix_f32+0x36>
	for (int i = 0; i < numOfArrays; i++) {
 8000714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000716:	3301      	adds	r3, #1
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
 800071a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800071c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800071e:	429a      	cmp	r2, r3
 8000720:	dbdb      	blt.n	80006da <create_data_matrix_f32+0x26>
	// Stop accessing arguments
	va_end(valist);

	// Output vector now has everything we need
	// Properly initialise the matrix so that it has everything it needs
	arm_mat_init_f32(uninitialised_matrix, numOfArrays, (uint16_t) WINDOW_SIZE, outputVector);
 8000722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000724:	b299      	uxth	r1, r3
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2204      	movs	r2, #4
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f004 fe9f 	bl	8005470 <arm_mat_init_f32>

	// Seems like the function works; return ARM_MATH_SUCCESS
	return ARM_MATH_SUCCESS;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	374c      	adds	r7, #76	; 0x4c
 8000738:	46bd      	mov	sp, r7
 800073a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073e:	b003      	add	sp, #12
 8000740:	4770      	bx	lr

08000742 <create_covariance_matrix_f32>:

arm_status create_covariance_matrix_f32(arm_matrix_instance_f32 dataMatrix, int N, arm_matrix_instance_f32* covarianceMatrix) {
 8000742:	b590      	push	{r4, r7, lr}
 8000744:	b0a9      	sub	sp, #164	; 0xa4
 8000746:	af00      	add	r7, sp, #0
 8000748:	f107 0408 	add.w	r4, r7, #8
 800074c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	603b      	str	r3, [r7, #0]

	// Initialise a new matrix to store the transpose of dataMatrix
	arm_matrix_instance_f32 dataMatrixT;
//	uint16_t dataMatrixT_size = (dataMatrix.numRows) * (dataMatrix.numCols);
	float32_t pData_dataMatrixT[TOTAL_SIZE];
	arm_mat_init_f32(&dataMatrixT, dataMatrix.numCols, dataMatrix.numRows, pData_dataMatrixT);
 8000754:	8979      	ldrh	r1, [r7, #10]
 8000756:	893a      	ldrh	r2, [r7, #8]
 8000758:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800075c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000760:	f004 fe86 	bl	8005470 <arm_mat_init_f32>

	// Initialise a new matrix to store the result of dataMatrix * dataMatrixT
	arm_matrix_instance_f32 tempMatrix;
//	uint16_t tempMatrix_size = (dataMatrix.numRows) * (dataMatrix.numRows); // Due to the order of multiplication
	float32_t pData_tempMatrix[SQUARE_SIZE];
	arm_mat_init_f32(&tempMatrix, (dataMatrix.numRows), (dataMatrix.numRows), pData_tempMatrix);
 8000764:	8939      	ldrh	r1, [r7, #8]
 8000766:	893a      	ldrh	r2, [r7, #8]
 8000768:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800076c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000770:	f004 fe7e 	bl	8005470 <arm_mat_init_f32>

	// Properly initialise the covariance matrix
//	uint16_t covarianceMatrix_size = (dataMatrix.numRows) * (dataMatrix.numRows);
	float32_t pData_covarianceMatrix[SQUARE_SIZE];
	arm_mat_init_f32(covarianceMatrix, dataMatrix.numRows, dataMatrix.numRows, pData_covarianceMatrix);
 8000774:	8939      	ldrh	r1, [r7, #8]
 8000776:	893a      	ldrh	r2, [r7, #8]
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	6838      	ldr	r0, [r7, #0]
 800077e:	f004 fe77 	bl	8005470 <arm_mat_init_f32>

	// Transpose dataMatrix and store in dataMatrixT
	status = arm_mat_trans_f32(&dataMatrix, &dataMatrixT);
 8000782:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f004 fd11 	bl	80051b4 <arm_mat_trans_f32>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	if (status != ARM_MATH_SUCCESS) {
 8000798:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <create_covariance_matrix_f32+0x64>
		return status;
 80007a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80007a4:	e032      	b.n	800080c <create_covariance_matrix_f32+0xca>
	}

	// Now do dataMatrix * dataMatrixT and store into tempMatrix
	status = arm_mat_mult_f32(&dataMatrix, &dataMatrixT, &tempMatrix);
 80007a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fdb2 	bl	800531c <arm_mat_mult_f32>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	if (status != ARM_MATH_SUCCESS) {
 80007be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <create_covariance_matrix_f32+0x8a>
		return status;
 80007c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80007ca:	e01f      	b.n	800080c <create_covariance_matrix_f32+0xca>
	}

	// Finally, scale each result by 1/(N-1) = 1/((uint16_t) WINDOW_SIZE - 1) (Bessel's correction
	float32_t scaleFactor = ((float32_t) 1)/(N-1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	status = arm_mat_scale_f32(&tempMatrix, scaleFactor, covarianceMatrix);
 80007e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007e8:	6839      	ldr	r1, [r7, #0]
 80007ea:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 fd4e 	bl	8005290 <arm_mat_scale_f32>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (status != ARM_MATH_SUCCESS) {
 80007fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <create_covariance_matrix_f32+0xc6>
		return status;
 8000802:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8000806:	e001      	b.n	800080c <create_covariance_matrix_f32+0xca>
	}

	return status;
 8000808:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800080c:	4618      	mov	r0, r3
 800080e:	37a4      	adds	r7, #164	; 0xa4
 8000810:	46bd      	mov	sp, r7
 8000812:	bd90      	pop	{r4, r7, pc}

08000814 <create_covariance_matrix_f32_test_3_arrays>:

	return status;

}

arm_status create_covariance_matrix_f32_test_3_arrays(float32_t array1[WINDOW_SIZE], float32_t array2[WINDOW_SIZE], float32_t array3[WINDOW_SIZE], float32_t arrayTrue[9]) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b09d      	sub	sp, #116	; 0x74
 8000818:	af02      	add	r7, sp, #8
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
	 *	Return ARM_MATH_TEST_FAILURE if the test fails
	 *
	 * */

	// Initialise general variables
	uint16_t numOfRows = 3;
 8000822:	2303      	movs	r3, #3
 8000824:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t numOfCols = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	float32_t demeanedArray3[WINDOW_SIZE];

	// Initialise variables for data_matrix creation step
	arm_matrix_instance_f32 dataMatrix;

	int size_arm_mat_instance_f32 = sizeof(dataMatrix);
 800082e:	2308      	movs	r3, #8
 8000830:	663b      	str	r3, [r7, #96]	; 0x60

	// Initialise variables for covariance creation step
	arm_matrix_instance_f32 covarianceMatrix;

	// Demean the data and store in appropriate vectors
	vec_f32_demean(array1, demeanedArray1);
 8000832:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000836:	4619      	mov	r1, r3
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff ff1d 	bl	8000678 <vec_f32_demean>
	vec_f32_demean(array2, demeanedArray2);
 800083e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000842:	4619      	mov	r1, r3
 8000844:	68b8      	ldr	r0, [r7, #8]
 8000846:	f7ff ff17 	bl	8000678 <vec_f32_demean>
	vec_f32_demean(array3, demeanedArray3);
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff11 	bl	8000678 <vec_f32_demean>

	// Use demeanedArrays to make a data_matrix
	status = create_data_matrix_f32(&dataMatrix, numOfRows, demeanedArray1, demeanedArray2, demeanedArray3);
 8000856:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 800085a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800085e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4623      	mov	r3, r4
 800086e:	f7ff ff21 	bl	80006b4 <create_data_matrix_f32>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	size_arm_mat_instance_f32 = sizeof(dataMatrix);
 8000878:	2308      	movs	r3, #8
 800087a:	663b      	str	r3, [r7, #96]	; 0x60

	if (status != ARM_MATH_SUCCESS) {
 800087c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <create_covariance_matrix_f32_test_3_arrays+0x76>
		return status;
 8000884:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8000888:	e028      	b.n	80008dc <create_covariance_matrix_f32_test_3_arrays+0xc8>
	}

	// Use dataMatrix to make covariance matrix
	status = create_covariance_matrix_f32(dataMatrix, numOfCols, &covarianceMatrix);
 800088a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000896:	c903      	ldmia	r1, {r0, r1}
 8000898:	f7ff ff53 	bl	8000742 <create_covariance_matrix_f32>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	if (status != ARM_MATH_SUCCESS) {
 80008a2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <create_covariance_matrix_f32_test_3_arrays+0x9c>
		return status;
 80008aa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80008ae:	e015      	b.n	80008dc <create_covariance_matrix_f32_test_3_arrays+0xc8>
	}

	// Create the true covariance matrix (size of arrayTrue should be numOfRows^2)
	arm_matrix_instance_f32 covarianceMatrixTrue;
	arm_mat_init_f32(&covarianceMatrixTrue, numOfRows, numOfRows, arrayTrue);
 80008b0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80008b4:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 80008b8:	f107 0014 	add.w	r0, r7, #20
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	f004 fdd7 	bl	8005470 <arm_mat_init_f32>

	// Check that this covarianceMatrix matches the true matrix
	status = mat_f32_check_equal(covarianceMatrix, covarianceMatrixTrue);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	cb0c      	ldmia	r3, {r2, r3}
 80008c8:	f107 011c 	add.w	r1, r7, #28
 80008cc:	c903      	ldmia	r1, {r0, r1}
 80008ce:	f7ff fe89 	bl	80005e4 <mat_f32_check_equal>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	return status;
 80008d8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80008dc:	4618      	mov	r0, r3
 80008de:	376c      	adds	r7, #108	; 0x6c
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b0ee      	sub	sp, #440	; 0x1b8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fc31 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f8ed 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 f9ad 	bl	8000c50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008f6:	f000 f957 	bl	8000ba8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80008fa:	f000 f9a1 	bl	8000c40 <MX_USB_OTG_HS_USB_Init>
  arm_matrix_instance_f32 matrixB; //B

  arm_matrix_instance_f32 matrixTrue_mat_mult_f32; // True result to compare against
  arm_matrix_instance_f32 matrixTrue_mat_trans_f32;

  uint16_t nRowsA = 3;
 80008fe:	2303      	movs	r3, #3
 8000900:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
  uint16_t nColsA = 3;
 8000904:	2303      	movs	r3, #3
 8000906:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
  float32_t pDataA[] = {1,2,3,4,5,6,7,8,9};
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <main+0x1bc>)
 800090c:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 8000910:	461d      	mov	r5, r3
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	6023      	str	r3, [r4, #0]

  uint16_t nRowsB = 3;
 800091e:	2303      	movs	r3, #3
 8000920:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
  uint16_t nColsB = 3;
 8000924:	2303      	movs	r3, #3
 8000926:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
  float32_t pDataB[] = {8,1,3,5,2,4,8,1,5};
 800092a:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <main+0x1c0>)
 800092c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8000930:	461d      	mov	r5, r3
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	6023      	str	r3, [r4, #0]

  float32_t pDataC[] = {9,8,7,6,5,4,3,2,1};
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <main+0x1c4>)
 8000940:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	6023      	str	r3, [r4, #0]
  float32_t pDataTrue_create_data_matrix_f32_test_3_arrays[] = {1,2,3,4,5,6,7,8,9,8,1,3,5,2,4,8,1,5,9,8,7,6,5,4,3,2,1};
 8000952:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000956:	4a55      	ldr	r2, [pc, #340]	; (8000aac <main+0x1c8>)
 8000958:	4618      	mov	r0, r3
 800095a:	4611      	mov	r1, r2
 800095c:	236c      	movs	r3, #108	; 0x6c
 800095e:	461a      	mov	r2, r3
 8000960:	f004 fde4 	bl	800552c <memcpy>

  float32_t pDataX[] = {1,2,3,4};
 8000964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <main+0x1cc>)
 800096a:	461c      	mov	r4, r3
 800096c:	4613      	mov	r3, r2
 800096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float32_t pDataY[] = {4,9,6,1};
 8000974:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000978:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <main+0x1d0>)
 800097a:	461c      	mov	r4, r3
 800097c:	4613      	mov	r3, r2
 800097e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float32_t pDataZ[] = {9,2,4,6};
 8000984:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000988:	4a4b      	ldr	r2, [pc, #300]	; (8000ab8 <main+0x1d4>)
 800098a:	461c      	mov	r4, r3
 800098c:	4613      	mov	r3, r2
 800098e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint16_t nRowsTrue_mat_mult_f32 = nRowsA;
 8000994:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8000998:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
  uint16_t nColsTrue_mat_mult_f32 = nColsB;
 800099c:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80009a0:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
  float32_t pDataTrue_mat_mult_f32[] = {18,5,11,44,11,25,70,17,39};
 80009a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009a8:	4a44      	ldr	r2, [pc, #272]	; (8000abc <main+0x1d8>)
 80009aa:	461c      	mov	r4, r3
 80009ac:	4615      	mov	r5, r2
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b6:	682b      	ldr	r3, [r5, #0]
 80009b8:	6023      	str	r3, [r4, #0]
//  float32_t pDataTrue_covariance_f32[] = {
//		  19,8,	6,4,-3,-5,-5,-16,-16,8,14.3333333333333,8.66666666666667,3,4,-1.66666666666667,-10,-3.66666666666667,-12,6,8.66666666666667,5.33333333333333,2,2,-1.33333333333333,-6,-3.33333333333333,-8,4,3,2,1,0,-1,-2,-3,-4,-3,4,2,0,3,1,-3,4.00000000000000,0,-5,-1.66666666666667,-1.33333333333333,-1,1,1.33333333333333,1,4.33333333333333,4,-5,-10,-6,-2,-3,1,7,2.00000000000000,8,-16,-3.66666666666667,-3.33333333333333,-3,4.00000000000000,4.33333333333333,2.00000000000000,14.3333333333333,12,-16,-12,-8,-4,0,4,8,12,16
//  };
  float32_t pDataTrue_covariance_f32[] = {16.3333,-2.3333,1.1667,5.333,-2.3333,16.3333,5.8333,-9.3333,1.1667,5.8333,2.3333,-2.8333,5.3333,-9.3333,-2.8333,6.3333};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <main+0x1dc>)
 80009c0:	461c      	mov	r4, r3
 80009c2:	4615      	mov	r5, r2
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint16_t nRowsTrue_mat_trans_f32 = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
  uint16_t nColsTrue_mat_trans_f32 = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
  float32_t pDataTrue_mat_trans_f32[] = {8,5,1,2,3,4};
 80009e4:	463b      	mov	r3, r7
 80009e6:	4a37      	ldr	r2, [pc, #220]	; (8000ac4 <main+0x1e0>)
 80009e8:	461c      	mov	r4, r3
 80009ea:	4615      	mov	r5, r2
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f4:	e884 0003 	stmia.w	r4, {r0, r1}

  arm_mat_init_f32(&matrixA, nRowsA, nColsA, pDataA);
 80009f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80009fc:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	; 0x1b4
 8000a00:	f8b7 11b6 	ldrh.w	r1, [r7, #438]	; 0x1b6
 8000a04:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8000a08:	f004 fd32 	bl	8005470 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixB, nRowsB, nColsB, pDataB);
 8000a0c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000a10:	f8b7 21b0 	ldrh.w	r2, [r7, #432]	; 0x1b0
 8000a14:	f8b7 11b2 	ldrh.w	r1, [r7, #434]	; 0x1b2
 8000a18:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 8000a1c:	f004 fd28 	bl	8005470 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue_mat_mult_f32, nRowsTrue_mat_mult_f32, nColsTrue_mat_mult_f32, pDataTrue_mat_mult_f32);
 8000a20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a24:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8000a28:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8000a2c:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8000a30:	f004 fd1e 	bl	8005470 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue_mat_trans_f32, nRowsTrue_mat_trans_f32, nColsTrue_mat_trans_f32, pDataTrue_mat_trans_f32);
 8000a34:	463b      	mov	r3, r7
 8000a36:	f8b7 21a8 	ldrh.w	r2, [r7, #424]	; 0x1a8
 8000a3a:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8000a3e:	f507 70c2 	add.w	r0, r7, #388	; 0x184
 8000a42:	f004 fd15 	bl	8005470 <arm_mat_init_f32>

  // Call the relevant test
//  arm_status test_result = mat_mult_f32_test(matrixA, matrixB, matrixTrue_mat_mult_f32);
//  arm_status test_result = mat_trans_f32_test(matrixB, matrixTrue_mat_trans_f32);
//  arm_status test_result = create_data_matrix_f32_test_3_arrays(pDataA, pDataB, pDataC, pDataTrue_create_data_matrix_f32_test_3_arrays);
  arm_status test_result = create_covariance_matrix_f32_test_3_arrays(pDataX, pDataY, pDataZ, pDataTrue_covariance_f32);
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000a4e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000a52:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000a56:	f7ff fedd 	bl	8000814 <create_covariance_matrix_f32_test_3_arrays>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
  // Depending on the test result, blink LED's appropriately
  if (test_result == ARM_MATH_SIZE_MISMATCH) {
 8000a60:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8000a64:	f113 0f03 	cmn.w	r3, #3
 8000a68:	d101      	bne.n	8000a6e <main+0x18a>
	  Error_Handler();
 8000a6a:	f000 fa0b 	bl	8000e84 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_result == ARM_MATH_SUCCESS) {
 8000a6e:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <main+0x19c>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8000a76:	2101      	movs	r1, #1
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <main+0x1e4>)
 8000a7a:	f000 fecc 	bl	8001816 <HAL_GPIO_TogglePin>
 8000a7e:	e009      	b.n	8000a94 <main+0x1b0>
	  }
	  else if (test_result == ARM_MATH_TEST_FAILURE) {
 8000a80:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8000a84:	f113 0f06 	cmn.w	r3, #6
 8000a88:	d104      	bne.n	8000a94 <main+0x1b0>
		  HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <main+0x1e4>)
 8000a90:	f000 fec1 	bl	8001816 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a98:	f000 fbec 	bl	8001274 <HAL_Delay>
	  if (test_result == ARM_MATH_SUCCESS) {
 8000a9c:	e7e7      	b.n	8000a6e <main+0x18a>
 8000a9e:	bf00      	nop
 8000aa0:	08005570 	.word	0x08005570
 8000aa4:	08005594 	.word	0x08005594
 8000aa8:	080055b8 	.word	0x080055b8
 8000aac:	080055dc 	.word	0x080055dc
 8000ab0:	08005648 	.word	0x08005648
 8000ab4:	08005658 	.word	0x08005658
 8000ab8:	08005668 	.word	0x08005668
 8000abc:	08005678 	.word	0x08005678
 8000ac0:	0800569c 	.word	0x0800569c
 8000ac4:	080056dc 	.word	0x080056dc
 8000ac8:	58020400 	.word	0x58020400

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	; 0x70
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	224c      	movs	r2, #76	; 0x4c
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fd34 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 fd2e 	bl	8005548 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aec:	2004      	movs	r0, #4
 8000aee:	f000 fead 	bl	800184c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <SystemClock_Config+0xd8>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <SystemClock_Config+0xd8>)
 8000afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <SystemClock_Config+0xd8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0e:	bf00      	nop
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <SystemClock_Config+0xd8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1c:	d1f8      	bne.n	8000b10 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b1e:	2321      	movs	r3, #33	; 0x21
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b22:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b38:	2318      	movs	r3, #24
 8000b3a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fed1 	bl	8001900 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b64:	f000 f98e 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	233f      	movs	r3, #63	; 0x3f
 8000b6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fabb 	bl	8002108 <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b98:	f000 f974 	bl	8000e84 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3770      	adds	r7, #112	; 0x70
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_USART3_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f003 f943 	bl	8003e7c <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f942 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c04:	f004 f9d6 	bl	8004fb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f000 f939 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c16:	f004 fa0b 	bl	8005030 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 f930 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c26:	f004 f98c 	bl	8004f42 <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f928 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2400002c 	.word	0x2400002c
 8000c3c:	40004800 	.word	0x40004800

08000c40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6c:	4a7e      	ldr	r2, [pc, #504]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c76:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c84:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8a:	4a77      	ldr	r2, [pc, #476]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c94:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	61fb      	str	r3, [r7, #28]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b71      	ldr	r3, [pc, #452]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca8:	4a6f      	ldr	r2, [pc, #444]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b69      	ldr	r3, [pc, #420]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc6:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce4:	4a60      	ldr	r2, [pc, #384]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cee:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d02:	4a59      	ldr	r2, [pc, #356]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d0c:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d20:	4a51      	ldr	r2, [pc, #324]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3e:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d48:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <MX_GPIO_Init+0x218>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	4843      	ldr	r0, [pc, #268]	; (8000e6c <MX_GPIO_Init+0x21c>)
 8000d5e:	f000 fd41 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d68:	4841      	ldr	r0, [pc, #260]	; (8000e70 <MX_GPIO_Init+0x220>)
 8000d6a:	f000 fd3b 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4840      	ldr	r0, [pc, #256]	; (8000e74 <MX_GPIO_Init+0x224>)
 8000d74:	f000 fd36 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	483a      	ldr	r0, [pc, #232]	; (8000e78 <MX_GPIO_Init+0x228>)
 8000d8e:	f000 fb79 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4830      	ldr	r0, [pc, #192]	; (8000e6c <MX_GPIO_Init+0x21c>)
 8000dac:	f000 fb6a 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8000db0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4829      	ldr	r0, [pc, #164]	; (8000e70 <MX_GPIO_Init+0x220>)
 8000dca:	f000 fb5b 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4826      	ldr	r0, [pc, #152]	; (8000e7c <MX_GPIO_Init+0x22c>)
 8000de4:	f000 fb4e 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_GPIO_Init+0x230>)
 8000dfe:	f000 fb41 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e14:	230a      	movs	r3, #10
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <MX_GPIO_Init+0x230>)
 8000e20:	f000 fb30 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <MX_GPIO_Init+0x230>)
 8000e3e:	f000 fb21 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8000e42:	2302      	movs	r3, #2
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_GPIO_Init+0x224>)
 8000e5a:	f000 fb13 	bl	8001484 <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58021400 	.word	0x58021400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58021000 	.word	0x58021000
 8000e78:	58020800 	.word	0x58020800
 8000e7c:	58021800 	.word	0x58021800
 8000e80:	58020000 	.word	0x58020000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <Error_Handler+0x2c>)
 8000e94:	f000 fca6 	bl	80017e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <Error_Handler+0x2c>)
 8000e9e:	f000 fca1 	bl	80017e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <Error_Handler+0x30>)
 8000ea8:	f000 fc9c 	bl	80017e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000eac:	e7ee      	b.n	8000e8c <Error_Handler+0x8>
 8000eae:	bf00      	nop
 8000eb0:	58020400 	.word	0x58020400
 8000eb4:	58021000 	.word	0x58021000

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58024400 	.word	0x58024400

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b8      	sub	sp, #224	; 0xe0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	22b8      	movs	r2, #184	; 0xb8
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fb1b 	bl	8005548 <memset>
  if(huart->Instance==USART3)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <HAL_UART_MspInit+0xc0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d142      	bne.n	8000fa2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fc78 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f36:	f7ff ffa5 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f46:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0xc4>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f90:	2307      	movs	r3, #7
 8000f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UART_MspInit+0xc8>)
 8000f9e:	f000 fa71 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	37e0      	adds	r7, #224	; 0xe0
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004800 	.word	0x40004800
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020c00 	.word	0x58020c00

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f916 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001010:	4b32      	ldr	r3, [pc, #200]	; (80010dc <SystemInit+0xd0>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <SystemInit+0xd0>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <SystemInit+0xd4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	2b02      	cmp	r3, #2
 800102a:	d807      	bhi.n	800103c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <SystemInit+0xd4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 030f 	bic.w	r3, r3, #15
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <SystemInit+0xd4>)
 8001036:	f043 0303 	orr.w	r3, r3, #3
 800103a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <SystemInit+0xd8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a28      	ldr	r2, [pc, #160]	; (80010e4 <SystemInit+0xd8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <SystemInit+0xd8>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <SystemInit+0xd8>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4924      	ldr	r1, [pc, #144]	; (80010e4 <SystemInit+0xd8>)
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <SystemInit+0xdc>)
 8001056:	4013      	ands	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <SystemInit+0xd4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <SystemInit+0xd4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 030f 	bic.w	r3, r3, #15
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <SystemInit+0xd4>)
 8001070:	f043 0303 	orr.w	r3, r3, #3
 8001074:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <SystemInit+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <SystemInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <SystemInit+0xd8>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <SystemInit+0xd8>)
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <SystemInit+0xe0>)
 800108c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <SystemInit+0xd8>)
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <SystemInit+0xe4>)
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <SystemInit+0xd8>)
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <SystemInit+0xe8>)
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <SystemInit+0xd8>)
 800109c:	2200      	movs	r2, #0
 800109e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <SystemInit+0xd8>)
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <SystemInit+0xe8>)
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <SystemInit+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <SystemInit+0xd8>)
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <SystemInit+0xe8>)
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <SystemInit+0xd8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <SystemInit+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <SystemInit+0xd8>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <SystemInit+0xd8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <SystemInit+0xec>)
 80010cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010d0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	52002000 	.word	0x52002000
 80010e4:	58024400 	.word	0x58024400
 80010e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010ec:	02020200 	.word	0x02020200
 80010f0:	01ff0000 	.word	0x01ff0000
 80010f4:	01010280 	.word	0x01010280
 80010f8:	52004000 	.word	0x52004000

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001100:	f7ff ff84 	bl	800100c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800112a:	f004 f9db 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fbd9 	bl	80008e4 <main>
  bx  lr
 8001132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001138:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800113c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001140:	0800573c 	.word	0x0800573c
  ldr r2, =_sbss
 8001144:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001148:	240000c0 	.word	0x240000c0

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	2003      	movs	r0, #3
 8001158:	f000 f962 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800115c:	f001 f98a 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8001160:	4602      	mov	r2, r0
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_Init+0x68>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	4913      	ldr	r1, [pc, #76]	; (80011bc <HAL_Init+0x6c>)
 800116e:	5ccb      	ldrb	r3, [r1, r3]
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_Init+0x68>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_Init+0x6c>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_Init+0x70>)
 8001192:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_Init+0x74>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f814 	bl	80011c8 <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e002      	b.n	80011b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fe85 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58024400 	.word	0x58024400
 80011bc:	080056f4 	.word	0x080056f4
 80011c0:	24000004 	.word	0x24000004
 80011c4:	24000000 	.word	0x24000000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_InitTick+0x60>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e021      	b.n	8001220 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_InitTick+0x64>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_InitTick+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f939 	bl	800146a <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f911 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x68>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2400000c 	.word	0x2400000c
 800122c:	24000000 	.word	0x24000000
 8001230:	24000008 	.word	0x24000008

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2400000c 	.word	0x2400000c
 8001258:	240000bc 	.word	0x240000bc

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	240000bc 	.word	0x240000bc

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2400000c 	.word	0x2400000c

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	05fa0000 	.word	0x05fa0000

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb2 	bl	80013dc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_GPIO_Init+0x234>)
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001496:	e194      	b.n	80017c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8186 	beq.w	80017bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x44>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	69b9      	ldr	r1, [r7, #24]
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0203 	and.w	r2, r3, #3
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80e0 	beq.w	80017bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x238>)
 80015fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <HAL_GPIO_Init+0x238>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_GPIO_Init+0x238>)
 800160e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_GPIO_Init+0x23c>)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <HAL_GPIO_Init+0x240>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d052      	beq.n	80016ec <HAL_GPIO_Init+0x268>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_GPIO_Init+0x244>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d031      	beq.n	80016b2 <HAL_GPIO_Init+0x22e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_GPIO_Init+0x248>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x22a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_GPIO_Init+0x24c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x226>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <HAL_GPIO_Init+0x250>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x222>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_GPIO_Init+0x254>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x21e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_GPIO_Init+0x258>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x21a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_GPIO_Init+0x25c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x216>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_GPIO_Init+0x260>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x212>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_GPIO_Init+0x264>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x20e>
 800168e:	2309      	movs	r3, #9
 8001690:	e02d      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 8001692:	230a      	movs	r3, #10
 8001694:	e02b      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 8001696:	2308      	movs	r3, #8
 8001698:	e029      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 800169a:	2307      	movs	r3, #7
 800169c:	e027      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 800169e:	2306      	movs	r3, #6
 80016a0:	e025      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e023      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e021      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e01f      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e01d      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e01b      	b.n	80016ee <HAL_GPIO_Init+0x26a>
 80016b6:	bf00      	nop
 80016b8:	58000080 	.word	0x58000080
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58000400 	.word	0x58000400
 80016c4:	58020000 	.word	0x58020000
 80016c8:	58020400 	.word	0x58020400
 80016cc:	58020800 	.word	0x58020800
 80016d0:	58020c00 	.word	0x58020c00
 80016d4:	58021000 	.word	0x58021000
 80016d8:	58021400 	.word	0x58021400
 80016dc:	58021800 	.word	0x58021800
 80016e0:	58021c00 	.word	0x58021c00
 80016e4:	58022000 	.word	0x58022000
 80016e8:	58022400 	.word	0x58022400
 80016ec:	2300      	movs	r3, #0
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	f002 0203 	and.w	r2, r2, #3
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	4093      	lsls	r3, r2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fe:	4938      	ldr	r1, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x35c>)
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3301      	adds	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f ae63 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3724      	adds	r7, #36	; 0x24
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	58000400 	.word	0x58000400

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43d9      	mvns	r1, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	400b      	ands	r3, r1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b06      	cmp	r3, #6
 800185e:	d00a      	beq.n	8001876 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e040      	b.n	80018f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e03e      	b.n	80018f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800187e:	491f      	ldr	r1, [pc, #124]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001886:	f7ff fce9 	bl	800125c <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800188c:	e009      	b.n	80018a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800188e:	f7ff fce5 	bl	800125c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189c:	d901      	bls.n	80018a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e028      	b.n	80018f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ae:	d1ee      	bne.n	800188e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b1e      	cmp	r3, #30
 80018b4:	d008      	beq.n	80018c8 <HAL_PWREx_ConfigSupply+0x7c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b2e      	cmp	r3, #46	; 0x2e
 80018ba:	d005      	beq.n	80018c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b1d      	cmp	r3, #29
 80018c0:	d002      	beq.n	80018c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b2d      	cmp	r3, #45	; 0x2d
 80018c6:	d114      	bne.n	80018f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018c8:	f7ff fcc8 	bl	800125c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ce:	e009      	b.n	80018e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018d0:	f7ff fcc4 	bl	800125c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018de:	d901      	bls.n	80018e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e007      	b.n	80018f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_PWREx_ConfigSupply+0xb0>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d1ee      	bne.n	80018d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	58024800 	.word	0x58024800

08001900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3f3      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80b3 	beq.w	8001a86 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001920:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800192a:	4b9c      	ldr	r3, [pc, #624]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	2b10      	cmp	r3, #16
 8001934:	d007      	beq.n	8001946 <HAL_RCC_OscConfig+0x46>
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	2b18      	cmp	r3, #24
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x62>
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d10d      	bne.n	8001962 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8098 	beq.w	8001a84 <HAL_RCC_OscConfig+0x184>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 8093 	bne.w	8001a84 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e3cb      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x7a>
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a8a      	ldr	r2, [pc, #552]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e058      	b.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0xa8>
 8001982:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a85      	ldr	r2, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b83      	ldr	r3, [pc, #524]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a82      	ldr	r2, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001994:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e041      	b.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0xd8>
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a79      	ldr	r2, [pc, #484]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a76      	ldr	r2, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a73      	ldr	r2, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e029      	b.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_OscConfig+0x108>
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6d      	ldr	r2, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e011      	b.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 8001a08:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a60      	ldr	r2, [pc, #384]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc12 	bl	800125c <HAL_GetTick>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fc0e 	bl	800125c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e355      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x13c>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbfe 	bl	800125c <HAL_GetTick>
 8001a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fbfa 	bl	800125c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e341      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x164>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 808c 	beq.w	8001bac <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_RCC_OscConfig+0x1ba>
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	2b18      	cmp	r3, #24
 8001aae:	d137      	bne.n	8001b20 <HAL_RCC_OscConfig+0x220>
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d132      	bne.n	8001b20 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e313      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ad2:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0219 	bic.w	r2, r3, #25
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	492f      	ldr	r1, [pc, #188]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae4:	f7ff fbba 	bl	800125c <HAL_GetTick>
 8001ae8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fbb6 	bl	800125c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e2fd      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	061b      	lsls	r3, r3, #24
 8001b18:	4920      	ldr	r1, [pc, #128]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1e:	e045      	b.n	8001bac <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d026      	beq.n	8001b76 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0219 	bic.w	r2, r3, #25
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4919      	ldr	r1, [pc, #100]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb8f 	bl	800125c <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fb8b 	bl	800125c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e2d2      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	490b      	ldr	r1, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e01a      	b.n	8001bac <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <HAL_RCC_OscConfig+0x29c>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb6b 	bl	800125c <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fb67 	bl	800125c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d903      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2ae      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
 8001b9c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba0:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d06a      	beq.n	8001c8e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb8:	4b93      	ldr	r3, [pc, #588]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d007      	beq.n	8001bde <HAL_RCC_OscConfig+0x2de>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b18      	cmp	r3, #24
 8001bd2:	d11b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x30c>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bde:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b80      	cmp	r3, #128	; 0x80
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e281      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf6:	4b84      	ldr	r3, [pc, #528]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4980      	ldr	r1, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c0a:	e040      	b.n	8001c8e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d023      	beq.n	8001c5c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7b      	ldr	r2, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb1c 	bl	800125c <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c28:	f7ff fb18 	bl	800125c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e25f      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	496c      	ldr	r1, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
 8001c5a:	e018      	b.n	8001c8e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff faf8 	bl	800125c <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c70:	f7ff faf4 	bl	800125c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e23b      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c82:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d036      	beq.n	8001d08 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d019      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca6:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fad5 	bl	800125c <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fad1 	bl	800125c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e218      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3b6>
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cda:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fabb 	bl	800125c <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff fab7 	bl	800125c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1fe      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d036      	beq.n	8001d82 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d019      	beq.n	8001d50 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d1c:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d28:	f7ff fa98 	bl	800125c <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d30:	f7ff fa94 	bl	800125c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1db      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x430>
 8001d4e:	e018      	b.n	8001d82 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa7e 	bl	800125c <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff fa7a 	bl	800125c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1c1      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80af 	beq.w	8001eee <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x50c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x50c>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff fa5e 	bl	800125c <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff fa5a 	bl	800125c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1a1      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x50c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4d8>
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e05b      	b.n	8001e90 <HAL_RCC_OscConfig+0x590>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d117      	bne.n	8001e10 <HAL_RCC_OscConfig+0x510>
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a02      	ldr	r2, [pc, #8]	; (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e044      	b.n	8001e90 <HAL_RCC_OscConfig+0x590>
 8001e06:	bf00      	nop
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	58024800 	.word	0x58024800
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d112      	bne.n	8001e3e <HAL_RCC_OscConfig+0x53e>
 8001e18:	4b95      	ldr	r3, [pc, #596]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a94      	ldr	r2, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a91      	ldr	r2, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	4b8f      	ldr	r3, [pc, #572]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4a8e      	ldr	r2, [pc, #568]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3c:	e028      	b.n	8001e90 <HAL_RCC_OscConfig+0x590>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b85      	cmp	r3, #133	; 0x85
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x56c>
 8001e46:	4b8a      	ldr	r3, [pc, #552]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	4a89      	ldr	r2, [pc, #548]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6713      	str	r3, [r2, #112]	; 0x70
 8001e52:	4b87      	ldr	r3, [pc, #540]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a86      	ldr	r2, [pc, #536]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	4b84      	ldr	r3, [pc, #528]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a83      	ldr	r2, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6a:	e011      	b.n	8001e90 <HAL_RCC_OscConfig+0x590>
 8001e6c:	4b80      	ldr	r3, [pc, #512]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a7f      	ldr	r2, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	4b7d      	ldr	r3, [pc, #500]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a7c      	ldr	r2, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e88:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f9e0 	bl	800125c <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f9dc 	bl	800125c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e121      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x5a0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9ca 	bl	800125c <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9c6 	bl	800125c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e10b      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8100 	beq.w	80020f8 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ef8:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f00:	2b18      	cmp	r3, #24
 8001f02:	f000 80bb 	beq.w	800207c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f040 8095 	bne.w	800203a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a56      	ldr	r2, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f99e 	bl	800125c <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f99a 	bl	800125c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0e1      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <HAL_RCC_OscConfig+0x774>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	4946      	ldr	r1, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	3b01      	subs	r3, #1
 8001f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	3b01      	subs	r3, #1
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f8c:	4938      	ldr	r1, [pc, #224]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	4a36      	ldr	r2, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCC_OscConfig+0x778>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001faa:	00d2      	lsls	r2, r2, #3
 8001fac:	4930      	ldr	r1, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f023 020c 	bic.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	492c      	ldr	r1, [pc, #176]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	f023 0202 	bic.w	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	4927      	ldr	r1, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	4a22      	ldr	r2, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 800200c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f923 	bl	800125c <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff f91f 	bl	800125c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e066      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x71a>
 8002038:	e05e      	b.n	80020f8 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8002040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f909 	bl	800125c <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f905 	bl	800125c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e04c      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_OscConfig+0x770>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x74e>
 800206c:	e044      	b.n	80020f8 <HAL_RCC_OscConfig+0x7f8>
 800206e:	bf00      	nop
 8002070:	58024400 	.word	0x58024400
 8002074:	fffffc0c 	.word	0xfffffc0c
 8002078:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x804>)
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_OscConfig+0x804>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d031      	beq.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0203 	and.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d12a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d122      	bne.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d11a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	0a5b      	lsrs	r3, r3, #9
 80020c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d111      	bne.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0e1b      	lsrs	r3, r3, #24
 80020e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3730      	adds	r7, #48	; 0x30
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58024400 	.word	0x58024400

08002108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e19c      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b87      	ldr	r3, [pc, #540]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 020f 	bic.w	r2, r3, #15
 8002132:	4985      	ldr	r1, [pc, #532]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b83      	ldr	r3, [pc, #524]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e184      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	4b7b      	ldr	r3, [pc, #492]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002168:	4b78      	ldr	r3, [pc, #480]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4975      	ldr	r1, [pc, #468]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	4b70      	ldr	r3, [pc, #448]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002192:	429a      	cmp	r2, r3
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002196:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	496a      	ldr	r1, [pc, #424]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	495e      	ldr	r1, [pc, #376]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4953      	ldr	r1, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	429a      	cmp	r2, r3
 800221e:	d908      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f023 020f 	bic.w	r2, r3, #15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4947      	ldr	r1, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d055      	beq.n	80022ea <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4940      	ldr	r1, [pc, #256]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800224c:	4313      	orrs	r3, r2
 800224e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d107      	bne.n	8002268 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002258:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0f6      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0ea      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0de      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0d6      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f023 0207 	bic.w	r2, r3, #7
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4925      	ldr	r1, [pc, #148]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe ffcf 	bl	800125c <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c2:	f7fe ffcb 	bl	800125c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0be      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d1eb      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	429a      	cmp	r2, r3
 8002304:	d208      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f023 020f 	bic.w	r2, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x244>)
 8002314:	4313      	orrs	r3, r2
 8002316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d214      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4906      	ldr	r1, [pc, #24]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_ClockConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e086      	b.n	8002456 <HAL_RCC_ClockConfig+0x34e>
 8002348:	52002000 	.word	0x52002000
 800234c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002368:	429a      	cmp	r2, r3
 800236a:	d208      	bcs.n	800237e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800236c:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4939      	ldr	r1, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 800237a:	4313      	orrs	r3, r2
 800237c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002396:	429a      	cmp	r2, r3
 8002398:	d208      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	492e      	ldr	r1, [pc, #184]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4922      	ldr	r1, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d208      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4917      	ldr	r1, [pc, #92]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002404:	4313      	orrs	r3, r2
 8002406:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002408:	f000 f834 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	4912      	ldr	r1, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x35c>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x358>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <HAL_RCC_ClockConfig+0x35c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x360>)
 800243e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x364>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x368>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe febc 	bl	80011c8 <HAL_InitTick>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
 8002464:	080056f4 	.word	0x080056f4
 8002468:	24000004 	.word	0x24000004
 800246c:	24000000 	.word	0x24000000
 8002470:	24000008 	.word	0x24000008

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247a:	4bb3      	ldr	r3, [pc, #716]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002482:	2b18      	cmp	r3, #24
 8002484:	f200 8155 	bhi.w	8002732 <HAL_RCC_GetSysClockFreq+0x2be>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024f5 	.word	0x080024f5
 8002494:	08002733 	.word	0x08002733
 8002498:	08002733 	.word	0x08002733
 800249c:	08002733 	.word	0x08002733
 80024a0:	08002733 	.word	0x08002733
 80024a4:	08002733 	.word	0x08002733
 80024a8:	08002733 	.word	0x08002733
 80024ac:	08002733 	.word	0x08002733
 80024b0:	0800251b 	.word	0x0800251b
 80024b4:	08002733 	.word	0x08002733
 80024b8:	08002733 	.word	0x08002733
 80024bc:	08002733 	.word	0x08002733
 80024c0:	08002733 	.word	0x08002733
 80024c4:	08002733 	.word	0x08002733
 80024c8:	08002733 	.word	0x08002733
 80024cc:	08002733 	.word	0x08002733
 80024d0:	08002521 	.word	0x08002521
 80024d4:	08002733 	.word	0x08002733
 80024d8:	08002733 	.word	0x08002733
 80024dc:	08002733 	.word	0x08002733
 80024e0:	08002733 	.word	0x08002733
 80024e4:	08002733 	.word	0x08002733
 80024e8:	08002733 	.word	0x08002733
 80024ec:	08002733 	.word	0x08002733
 80024f0:	08002527 	.word	0x08002527
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f4:	4b94      	ldr	r3, [pc, #592]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002500:	4b91      	ldr	r3, [pc, #580]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	4a90      	ldr	r2, [pc, #576]	; (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002512:	e111      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002514:	4b8d      	ldr	r3, [pc, #564]	; (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002516:	61bb      	str	r3, [r7, #24]
    break;
 8002518:	e10e      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800251a:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800251c:	61bb      	str	r3, [r7, #24]
    break;
 800251e:	e10b      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002522:	61bb      	str	r3, [r7, #24]
    break;
 8002524:	e108      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002526:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002530:	4b85      	ldr	r3, [pc, #532]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800253c:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002546:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80e1 	beq.w	800272c <HAL_RCC_GetSysClockFreq+0x2b8>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b02      	cmp	r3, #2
 800256e:	f000 8083 	beq.w	8002678 <HAL_RCC_GetSysClockFreq+0x204>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f200 80a1 	bhi.w	80026bc <HAL_RCC_GetSysClockFreq+0x248>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x114>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d056      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002586:	e099      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002588:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025be:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80025ee:	e087      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800275c <HAL_RCC_GetSysClockFreq+0x2e8>
 80025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002612:	ed97 6a02 	vldr	s12, [r7, #8]
 8002616:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002632:	e065      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002656:	ed97 6a02 	vldr	s12, [r7, #8]
 800265a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002676:	e043      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800269a:	ed97 6a02 	vldr	s12, [r7, #8]
 800269e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026ba:	e021      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026de:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270a:	3301      	adds	r3, #1
 800270c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002718:	edd7 6a07 	vldr	s13, [r7, #28]
 800271c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    break;
 8002730:	e002      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002734:	61bb      	str	r3, [r7, #24]
    break;
 8002736:	bf00      	nop
  }

  return sysclockfreq;
 8002738:	69bb      	ldr	r3, [r7, #24]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400
 800274c:	03d09000 	.word	0x03d09000
 8002750:	003d0900 	.word	0x003d0900
 8002754:	007a1200 	.word	0x007a1200
 8002758:	46000000 	.word	0x46000000
 800275c:	4c742400 	.word	0x4c742400
 8002760:	4a742400 	.word	0x4a742400
 8002764:	4af42400 	.word	0x4af42400

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800276e:	f7ff fe81 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490f      	ldr	r1, [pc, #60]	; (80027bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	58024400 	.word	0x58024400
 80027bc:	080056f4 	.word	0x080056f4
 80027c0:	24000004 	.word	0x24000004
 80027c4:	24000000 	.word	0x24000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80027cc:	f7ff ffcc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	58024400 	.word	0x58024400
 80027f0:	080056f4 	.word	0x080056f4

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80027f8:	f7ff ffb6 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCC_GetPCLK2Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	58024400 	.word	0x58024400
 800281c:	080056f4 	.word	0x080056f4

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800282c:	2300      	movs	r3, #0
 800282e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d03f      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800284a:	d824      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800284c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002850:	d018      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002856:	d81e      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800285c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002860:	d007      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002864:	4ba6      	ldr	r3, [pc, #664]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	4aa5      	ldr	r2, [pc, #660]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002870:	e015      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 f99b 	bl	8003bb4 <RCCEx_PLL2_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002882:	e00c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fa44 	bl	8003d18 <RCCEx_PLL3_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
      break;
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028a4:	4b96      	ldr	r3, [pc, #600]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b0:	4993      	ldr	r1, [pc, #588]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	650b      	str	r3, [r1, #80]	; 0x50
 80028b6:	e001      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d826      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028ed 	.word	0x080028ed
 80028dc:	080028fb 	.word	0x080028fb
 80028e0:	0800290d 	.word	0x0800290d
 80028e4:	08002925 	.word	0x08002925
 80028e8:	08002925 	.word	0x08002925
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ec:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f8:	e015      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 f957 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800290a:	e00c      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f001 fa00 	bl	8003d18 <RCCEx_PLL3_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800291c:	e003      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
      break;
 8002922:	e000      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292c:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	f023 0207 	bic.w	r2, r3, #7
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	4971      	ldr	r1, [pc, #452]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	650b      	str	r3, [r1, #80]	; 0x50
 800293e:	e001      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	2b00      	cmp	r3, #0
 800294e:	d04a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002958:	d031      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800295a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800295e:	d82b      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002964:	d02d      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d825      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800296c:	2bc0      	cmp	r3, #192	; 0xc0
 800296e:	d02a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002970:	2bc0      	cmp	r3, #192	; 0xc0
 8002972:	d821      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d016      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d81d      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d007      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002984:	e018      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002986:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800298c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002992:	e019      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f90a 	bl	8003bb4 <RCCEx_PLL2_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80029a4:	e010      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3324      	adds	r3, #36	; 0x24
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 f9b3 	bl	8003d18 <RCCEx_PLL3_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80029b6:	e007      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
      break;
 80029bc:	e004      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80029c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4949      	ldr	r1, [pc, #292]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	650b      	str	r3, [r1, #80]	; 0x50
 80029e0:	e001      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04f      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80029fa:	d036      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80029fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002a00:	d830      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a06:	d032      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	d82a      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002a0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a12:	d02e      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002a14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a18:	d824      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d018      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a24:	d81e      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2e:	d007      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002a30:	e018      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002a3e:	e019      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f8b4 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002a50:	e010      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f95d 	bl	8003d18 <RCCEx_PLL3_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002a62:	e007      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
      break;
 8002a68:	e004      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	491e      	ldr	r1, [pc, #120]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	650b      	str	r3, [r1, #80]	; 0x50
 8002a8c:	e001      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d034      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	2b30      	cmp	r3, #48	; 0x30
 8002aa4:	d01c      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002aa6:	2b30      	cmp	r3, #48	; 0x30
 8002aa8:	d817      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d813      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002ac6:	e00e      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2102      	movs	r1, #2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f870 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af8:	4901      	ldr	r1, [pc, #4]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002afe:	e003      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d047      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1c:	d030      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b22:	d82a      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b28:	d02c      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b2e:	d824      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d018      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	d81e      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b44:	d007      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002b46:	e018      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4bb0      	ldr	r3, [pc, #704]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4aaf      	ldr	r2, [pc, #700]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b54:	e017      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f829 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b66:	e00e      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f8d2 	bl	8003d18 <RCCEx_PLL3_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b78:	e005      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	499c      	ldr	r1, [pc, #624]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d049      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d02e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bbe:	d828      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc4:	d02a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bca:	d822      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd0:	d026      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd6:	d81c      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be2:	d816      	bhi.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01d      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d111      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 ffdd 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bfe:	e012      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f886 	bl	8003d18 <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c10:	e009      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
      break;
 8002c16:	e006      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002c1c:	bf00      	nop
 8002c1e:	e002      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c2c:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c38:	4974      	ldr	r1, [pc, #464]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d053      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c56:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002c5a:	d034      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002c60:	d82e      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c66:	d030      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6c:	d828      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d02c      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d822      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c7e:	d028      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c84:	d81c      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8a:	d010      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c90:	d816      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01f      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 ff86 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cac:	e014      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3324      	adds	r3, #36	; 0x24
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f82f 	bl	8003d18 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e006      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cec:	4947      	ldr	r1, [pc, #284]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0c:	d00e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d12:	d814      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1c:	d10f      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 ff3e 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	492c      	ldr	r1, [pc, #176]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d5e:	e001      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d032      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d81b      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002d91 	.word	0x08002d91
 8002d88:	08002d9f 	.word	0x08002d9f
 8002d8c:	08002db7 	.word	0x08002db7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d9c:	e00c      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 ff05 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dae:	e003      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
      break;
 8002db4:	e000      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4910      	ldr	r1, [pc, #64]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dd0:	e001      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 808a 	beq.w	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fa34 	bl	800125c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	e00d      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe fa30 	bl	800125c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d906      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	75fb      	strb	r3, [r7, #23]
        break;
 8002e0a:	e009      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e14:	4bba      	ldr	r3, [pc, #744]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0eb      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d166      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e26:	4bb7      	ldr	r3, [pc, #732]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e30:	4053      	eors	r3, r2
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e3a:	4bb2      	ldr	r3, [pc, #712]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e44:	4baf      	ldr	r3, [pc, #700]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4aae      	ldr	r2, [pc, #696]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e50:	4bac      	ldr	r3, [pc, #688]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4aab      	ldr	r2, [pc, #684]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e5c:	4aa9      	ldr	r2, [pc, #676]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d115      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f9f5 	bl	800125c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e74:	e00b      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f9f1 	bl	800125c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d902      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8002e8c:	e005      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8e:	4b9d      	ldr	r3, [pc, #628]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ed      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d126      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002eb0:	4b94      	ldr	r3, [pc, #592]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ebe:	0919      	lsrs	r1, r3, #4
 8002ec0:	4b91      	ldr	r3, [pc, #580]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	498f      	ldr	r1, [pc, #572]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	610b      	str	r3, [r1, #16]
 8002eca:	e005      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002ecc:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4a8c      	ldr	r2, [pc, #560]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ed2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ed6:	6113      	str	r3, [r2, #16]
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	4987      	ldr	r1, [pc, #540]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	670b      	str	r3, [r1, #112]	; 0x70
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	75bb      	strb	r3, [r7, #22]
 8002ef2:	e001      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d07f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0a:	2b28      	cmp	r3, #40	; 0x28
 8002f0c:	d866      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002fe3 	.word	0x08002fe3
 8002f18:	08002fdd 	.word	0x08002fdd
 8002f1c:	08002fdd 	.word	0x08002fdd
 8002f20:	08002fdd 	.word	0x08002fdd
 8002f24:	08002fdd 	.word	0x08002fdd
 8002f28:	08002fdd 	.word	0x08002fdd
 8002f2c:	08002fdd 	.word	0x08002fdd
 8002f30:	08002fdd 	.word	0x08002fdd
 8002f34:	08002fb9 	.word	0x08002fb9
 8002f38:	08002fdd 	.word	0x08002fdd
 8002f3c:	08002fdd 	.word	0x08002fdd
 8002f40:	08002fdd 	.word	0x08002fdd
 8002f44:	08002fdd 	.word	0x08002fdd
 8002f48:	08002fdd 	.word	0x08002fdd
 8002f4c:	08002fdd 	.word	0x08002fdd
 8002f50:	08002fdd 	.word	0x08002fdd
 8002f54:	08002fcb 	.word	0x08002fcb
 8002f58:	08002fdd 	.word	0x08002fdd
 8002f5c:	08002fdd 	.word	0x08002fdd
 8002f60:	08002fdd 	.word	0x08002fdd
 8002f64:	08002fdd 	.word	0x08002fdd
 8002f68:	08002fdd 	.word	0x08002fdd
 8002f6c:	08002fdd 	.word	0x08002fdd
 8002f70:	08002fdd 	.word	0x08002fdd
 8002f74:	08002fe3 	.word	0x08002fe3
 8002f78:	08002fdd 	.word	0x08002fdd
 8002f7c:	08002fdd 	.word	0x08002fdd
 8002f80:	08002fdd 	.word	0x08002fdd
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002fdd 	.word	0x08002fdd
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fdd 	.word	0x08002fdd
 8002f94:	08002fe3 	.word	0x08002fe3
 8002f98:	08002fdd 	.word	0x08002fdd
 8002f9c:	08002fdd 	.word	0x08002fdd
 8002fa0:	08002fdd 	.word	0x08002fdd
 8002fa4:	08002fdd 	.word	0x08002fdd
 8002fa8:	08002fdd 	.word	0x08002fdd
 8002fac:	08002fdd 	.word	0x08002fdd
 8002fb0:	08002fdd 	.word	0x08002fdd
 8002fb4:	08002fe3 	.word	0x08002fe3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fdf8 	bl	8003bb4 <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fc8:	e00c      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fea1 	bl	8003d18 <RCCEx_PLL3_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fda:	e003      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fea:	4b46      	ldr	r3, [pc, #280]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff8:	4942      	ldr	r1, [pc, #264]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	654b      	str	r3, [r1, #84]	; 0x54
 8002ffe:	e001      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d038      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003014:	2b05      	cmp	r3, #5
 8003016:	d821      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003018:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003063 	.word	0x08003063
 8003024:	08003039 	.word	0x08003039
 8003028:	0800304b 	.word	0x0800304b
 800302c:	08003063 	.word	0x08003063
 8003030:	08003063 	.word	0x08003063
 8003034:	08003063 	.word	0x08003063
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fdb8 	bl	8003bb4 <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003048:	e00c      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3324      	adds	r3, #36	; 0x24
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fe61 	bl	8003d18 <RCCEx_PLL3_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
      break;
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f023 0207 	bic.w	r2, r3, #7
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003076:	4923      	ldr	r1, [pc, #140]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	654b      	str	r3, [r1, #84]	; 0x54
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d040      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003094:	2b05      	cmp	r3, #5
 8003096:	d821      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030e3 	.word	0x080030e3
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030cb 	.word	0x080030cb
 80030ac:	080030e3 	.word	0x080030e3
 80030b0:	080030e3 	.word	0x080030e3
 80030b4:	080030e3 	.word	0x080030e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd78 	bl	8003bb4 <RCCEx_PLL2_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030c8:	e00c      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fe21 	bl	8003d18 <RCCEx_PLL3_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030da:	e003      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
      break;
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80030e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d110      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f8:	4902      	ldr	r1, [pc, #8]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	658b      	str	r3, [r1, #88]	; 0x58
 80030fe:	e007      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003100:	58024800 	.word	0x58024800
 8003104:	58024400 	.word	0x58024400
 8003108:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d04b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003126:	d02e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312c:	d828      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d02a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d822      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800313a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800313e:	d026      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003144:	d81c      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314a:	d010      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003150:	d816      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01d      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315a:	d111      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd26 	bl	8003bb4 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800316c:	e012      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fdcf 	bl	8003d18 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319a:	4bb3      	ldr	r3, [pc, #716]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	49af      	ldr	r1, [pc, #700]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	654b      	str	r3, [r1, #84]	; 0x54
 80031ae:	e001      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ca:	d02e      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80031cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031d0:	d828      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d02a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d822      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80031de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e2:	d026      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80031e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e8:	d81c      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80031ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ee:	d010      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d816      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01d      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d111      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fcd4 	bl	8003bb4 <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003210:	e012      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fd7d 	bl	8003d18 <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800323e:	4b8a      	ldr	r3, [pc, #552]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800324c:	4986      	ldr	r1, [pc, #536]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800324e:	4313      	orrs	r3, r2
 8003250:	658b      	str	r3, [r1, #88]	; 0x58
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d04b      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800326a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800326e:	d02e      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003274:	d828      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	d02a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d822      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003282:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003286:	d026      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800328c:	d81c      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800328e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003292:	d010      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d816      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01d      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a2:	d111      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fc82 	bl	8003bb4 <RCCEx_PLL2_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032b4:	e012      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3324      	adds	r3, #36	; 0x24
 80032ba:	2102      	movs	r1, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fd2b 	bl	8003d18 <RCCEx_PLL3_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032c6:	e009      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
      break;
 80032cc:	e006      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80032ce:	bf00      	nop
 80032d0:	e004      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80032da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032e2:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032f0:	495d      	ldr	r1, [pc, #372]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	658b      	str	r3, [r1, #88]	; 0x58
 80032f6:	e001      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	d10a      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3324      	adds	r3, #36	; 0x24
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fcfc 	bl	8003d18 <RCCEx_PLL3_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800332a:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	494b      	ldr	r1, [pc, #300]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800333a:	4313      	orrs	r3, r2
 800333c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003354:	d10a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3324      	adds	r3, #36	; 0x24
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fcdb 	bl	8003d18 <RCCEx_PLL3_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800336c:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800337a:	493b      	ldr	r1, [pc, #236]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800337c:	4313      	orrs	r3, r2
 800337e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d034      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003396:	d01d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339c:	d817      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d009      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80033a8:	e011      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fbff 	bl	8003bb4 <RCCEx_PLL2_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033ba:	e00c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	2102      	movs	r1, #2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fca8 	bl	8003d18 <RCCEx_PLL3_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
      break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80033d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ea:	491f      	ldr	r1, [pc, #124]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	658b      	str	r3, [r1, #88]	; 0x58
 80033f0:	e001      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d036      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800340c:	d01c      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800340e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003412:	d816      	bhi.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800341a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341e:	d007      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003420:	e00f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800342e:	e00c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3324      	adds	r3, #36	; 0x24
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fc6e 	bl	8003d18 <RCCEx_PLL3_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
      break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345e:	4902      	ldr	r1, [pc, #8]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003460:	4313      	orrs	r3, r2
 8003462:	654b      	str	r3, [r1, #84]	; 0x54
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003466:	bf00      	nop
 8003468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d029      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d007      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800348a:	e00f      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003498:	e00b      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fb87 	bl	8003bb4 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
      break;
 80034b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034b8:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c4:	495b      	ldr	r1, [pc, #364]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034ca:	e001      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3324      	adds	r3, #36	; 0x24
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fc18 	bl	8003d18 <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d032      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003508:	d017      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d811      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d013      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	d80b      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d106      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a42      	ldr	r2, [pc, #264]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003532:	e007      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
      break;
 8003538:	e004      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	4936      	ldr	r1, [pc, #216]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800355a:	4313      	orrs	r3, r2
 800355c:	654b      	str	r3, [r1, #84]	; 0x54
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357c:	492d      	ldr	r1, [pc, #180]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800357e:	4313      	orrs	r3, r2
 8003580:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800359c:	4313      	orrs	r3, r2
 800359e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	491e      	ldr	r1, [pc, #120]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035d4:	6113      	str	r3, [r2, #16]
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035e0:	4914      	ldr	r1, [pc, #80]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da08      	bge.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	490e      	ldr	r1, [pc, #56]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	4906      	ldr	r1, [pc, #24]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800361c:	4313      	orrs	r3, r2
 800361e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003620:	7dbb      	ldrb	r3, [r7, #22]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024400 	.word	0x58024400

08003638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800363c:	f7ff f894 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4904      	ldr	r1, [pc, #16]	; (8003660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	080056f4 	.word	0x080056f4

08003664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800366c:	4ba1      	ldr	r3, [pc, #644]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003676:	4b9f      	ldr	r3, [pc, #636]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	0b1b      	lsrs	r3, r3, #12
 800367c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003682:	4b9c      	ldr	r3, [pc, #624]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800368e:	4b99      	ldr	r3, [pc, #612]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8111 	beq.w	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f000 8083 	beq.w	80037c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f200 80a1 	bhi.w	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d056      	beq.n	800377c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036ce:	e099      	b.n	8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d0:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02d      	beq.n	8003738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036dc:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003736:	e087      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a03 	vldr	s12, [r7, #12]
 800375e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377a:	e065      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037be:	e043      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003802:	e021      	b.n	8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	0a5b      	lsrs	r3, r3, #9
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003862:	edd7 6a07 	vldr	s13, [r7, #28]
 8003866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 2a90 	vmov	r2, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003890:	edd7 6a07 	vldr	s13, [r7, #28]
 8003894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389c:	ee17 2a90 	vmov	r2, s15
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038be:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ca:	ee17 2a90 	vmov	r2, s15
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	bf00      	nop
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
 80038f8:	03d09000 	.word	0x03d09000
 80038fc:	46000000 	.word	0x46000000
 8003900:	4c742400 	.word	0x4c742400
 8003904:	4a742400 	.word	0x4a742400
 8003908:	4af42400 	.word	0x4af42400

0800390c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003914:	4ba1      	ldr	r3, [pc, #644]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800391e:	4b9f      	ldr	r3, [pc, #636]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	0d1b      	lsrs	r3, r3, #20
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800392a:	4b9c      	ldr	r3, [pc, #624]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003936:	4b99      	ldr	r3, [pc, #612]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8111 	beq.w	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b02      	cmp	r3, #2
 800395e:	f000 8083 	beq.w	8003a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b02      	cmp	r3, #2
 8003966:	f200 80a1 	bhi.w	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d056      	beq.n	8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003976:	e099      	b.n	8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003978:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02d      	beq.n	80039e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003984:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	4a84      	ldr	r2, [pc, #528]	; (8003ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039de:	e087      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a22:	e065      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a66:	e043      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aaa:	e021      	b.n	8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	0a5b      	lsrs	r3, r3, #9
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b16:	ee17 2a90 	vmov	r2, s15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b44:	ee17 2a90 	vmov	r2, s15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b4c:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	0e1b      	lsrs	r3, r3, #24
 8003b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b7a:	e008      	b.n	8003b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	03d09000 	.word	0x03d09000
 8003ba4:	46000000 	.word	0x46000000
 8003ba8:	4c742400 	.word	0x4c742400
 8003bac:	4a742400 	.word	0x4a742400
 8003bb0:	4af42400 	.word	0x4af42400

08003bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d101      	bne.n	8003bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e099      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a4e      	ldr	r2, [pc, #312]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd fb3d 	bl	800125c <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003be6:	f7fd fb39 	bl	800125c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e086      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	493f      	ldr	r1, [pc, #252]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	628b      	str	r3, [r1, #40]	; 0x28
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	025b      	lsls	r3, r3, #9
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c48:	4931      	ldr	r1, [pc, #196]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f023 0220 	bic.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	4928      	ldr	r1, [pc, #160]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <RCCEx_PLL2_Config+0x160>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	69d2      	ldr	r2, [r2, #28]
 8003c8a:	00d2      	lsls	r2, r2, #3
 8003c8c:	4920      	ldr	r1, [pc, #128]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f043 0310 	orr.w	r3, r3, #16
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cb0:	e00f      	b.n	8003cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cc4:	e005      	b.n	8003cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cde:	f7fd fabd 	bl	800125c <HAL_GetTick>
 8003ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ce6:	f7fd fab9 	bl	800125c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <RCCEx_PLL2_Config+0x15c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	ffff0007 	.word	0xffff0007

08003d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d26:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d101      	bne.n	8003d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e099      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d36:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4e      	ldr	r2, [pc, #312]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d42:	f7fd fa8b 	bl	800125c <HAL_GetTick>
 8003d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d4a:	f7fd fa87 	bl	800125c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e086      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d5c:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d68:	4b42      	ldr	r3, [pc, #264]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	493f      	ldr	r1, [pc, #252]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	025b      	lsls	r3, r3, #9
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dac:	4931      	ldr	r1, [pc, #196]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003db2:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4928      	ldr	r1, [pc, #160]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <RCCEx_PLL3_Config+0x160>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	69d2      	ldr	r2, [r2, #28]
 8003dee:	00d2      	lsls	r2, r2, #3
 8003df0:	4920      	ldr	r1, [pc, #128]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003df6:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e14:	e00f      	b.n	8003e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e28:	e005      	b.n	8003e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fd fa0b 	bl	800125c <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e4a:	f7fd fa07 	bl	800125c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e006      	b.n	8003e6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <RCCEx_PLL3_Config+0x15c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	ffff0007 	.word	0xffff0007

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd f823 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f82c 	bl	8003f1c <UART_SetConfig>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fe7e 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 ff05 	bl	8004d1c <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b08e      	sub	sp, #56	; 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4bbf      	ldr	r3, [pc, #764]	; (8004248 <UART_SetConfig+0x32c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4ab5      	ldr	r2, [pc, #724]	; (800424c <UART_SetConfig+0x330>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	4313      	orrs	r3, r2
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4bb0      	ldr	r3, [pc, #704]	; (8004250 <UART_SetConfig+0x334>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f023 010f 	bic.w	r1, r3, #15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4aa7      	ldr	r2, [pc, #668]	; (8004254 <UART_SetConfig+0x338>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d176      	bne.n	80040a8 <UART_SetConfig+0x18c>
 8003fba:	4ba7      	ldr	r3, [pc, #668]	; (8004258 <UART_SetConfig+0x33c>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc2:	2b28      	cmp	r3, #40	; 0x28
 8003fc4:	d86c      	bhi.n	80040a0 <UART_SetConfig+0x184>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0xb0>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004071 	.word	0x08004071
 8003fd0:	080040a1 	.word	0x080040a1
 8003fd4:	080040a1 	.word	0x080040a1
 8003fd8:	080040a1 	.word	0x080040a1
 8003fdc:	080040a1 	.word	0x080040a1
 8003fe0:	080040a1 	.word	0x080040a1
 8003fe4:	080040a1 	.word	0x080040a1
 8003fe8:	080040a1 	.word	0x080040a1
 8003fec:	08004079 	.word	0x08004079
 8003ff0:	080040a1 	.word	0x080040a1
 8003ff4:	080040a1 	.word	0x080040a1
 8003ff8:	080040a1 	.word	0x080040a1
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	080040a1 	.word	0x080040a1
 800400c:	08004081 	.word	0x08004081
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	080040a1 	.word	0x080040a1
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	080040a1 	.word	0x080040a1
 800402c:	08004089 	.word	0x08004089
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	080040a1 	.word	0x080040a1
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040a1 	.word	0x080040a1
 800404c:	08004091 	.word	0x08004091
 8004050:	080040a1 	.word	0x080040a1
 8004054:	080040a1 	.word	0x080040a1
 8004058:	080040a1 	.word	0x080040a1
 800405c:	080040a1 	.word	0x080040a1
 8004060:	080040a1 	.word	0x080040a1
 8004064:	080040a1 	.word	0x080040a1
 8004068:	080040a1 	.word	0x080040a1
 800406c:	08004099 	.word	0x08004099
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004076:	e326      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004078:	2304      	movs	r3, #4
 800407a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800407e:	e322      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004080:	2308      	movs	r3, #8
 8004082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004086:	e31e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408e:	e31a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004090:	2320      	movs	r3, #32
 8004092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004096:	e316      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004098:	2340      	movs	r3, #64	; 0x40
 800409a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409e:	e312      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a6:	e30e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <UART_SetConfig+0x340>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d130      	bne.n	8004114 <UART_SetConfig+0x1f8>
 80040b2:	4b69      	ldr	r3, [pc, #420]	; (8004258 <UART_SetConfig+0x33c>)
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d826      	bhi.n	800410c <UART_SetConfig+0x1f0>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x1a8>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040dd 	.word	0x080040dd
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e2f0      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e2ec      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e2e8      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e2e4      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80040fc:	2320      	movs	r3, #32
 80040fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004102:	e2e0      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410a:	e2dc      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004112:	e2d8      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a51      	ldr	r2, [pc, #324]	; (8004260 <UART_SetConfig+0x344>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d130      	bne.n	8004180 <UART_SetConfig+0x264>
 800411e:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <UART_SetConfig+0x33c>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	2b05      	cmp	r3, #5
 8004128:	d826      	bhi.n	8004178 <UART_SetConfig+0x25c>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x214>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004149 	.word	0x08004149
 8004134:	08004151 	.word	0x08004151
 8004138:	08004159 	.word	0x08004159
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e2ba      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e2b6      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415e:	e2b2      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004166:	e2ae      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004168:	2320      	movs	r3, #32
 800416a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416e:	e2aa      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004176:	e2a6      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417e:	e2a2      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a37      	ldr	r2, [pc, #220]	; (8004264 <UART_SetConfig+0x348>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d130      	bne.n	80041ec <UART_SetConfig+0x2d0>
 800418a:	4b33      	ldr	r3, [pc, #204]	; (8004258 <UART_SetConfig+0x33c>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b05      	cmp	r3, #5
 8004194:	d826      	bhi.n	80041e4 <UART_SetConfig+0x2c8>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0x280>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e284      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e280      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e27c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e278      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041d4:	2320      	movs	r3, #32
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	e274      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e2:	e270      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ea:	e26c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <UART_SetConfig+0x34c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d142      	bne.n	800427c <UART_SetConfig+0x360>
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <UART_SetConfig+0x33c>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d838      	bhi.n	8004274 <UART_SetConfig+0x358>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x2ec>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004221 	.word	0x08004221
 800420c:	08004229 	.word	0x08004229
 8004210:	08004231 	.word	0x08004231
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	0800426d 	.word	0x0800426d
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004226:	e24e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422e:	e24a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e246      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e242      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004240:	2320      	movs	r3, #32
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e23e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004248:	cfff69f3 	.word	0xcfff69f3
 800424c:	58000c00 	.word	0x58000c00
 8004250:	11fff4ff 	.word	0x11fff4ff
 8004254:	40011000 	.word	0x40011000
 8004258:	58024400 	.word	0x58024400
 800425c:	40004400 	.word	0x40004400
 8004260:	40004800 	.word	0x40004800
 8004264:	40004c00 	.word	0x40004c00
 8004268:	40005000 	.word	0x40005000
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004272:	e228      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800427a:	e224      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4ab1      	ldr	r2, [pc, #708]	; (8004548 <UART_SetConfig+0x62c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d176      	bne.n	8004374 <UART_SetConfig+0x458>
 8004286:	4bb1      	ldr	r3, [pc, #708]	; (800454c <UART_SetConfig+0x630>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d86c      	bhi.n	800436c <UART_SetConfig+0x450>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x37c>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800436d 	.word	0x0800436d
 80042a0:	0800436d 	.word	0x0800436d
 80042a4:	0800436d 	.word	0x0800436d
 80042a8:	0800436d 	.word	0x0800436d
 80042ac:	0800436d 	.word	0x0800436d
 80042b0:	0800436d 	.word	0x0800436d
 80042b4:	0800436d 	.word	0x0800436d
 80042b8:	08004345 	.word	0x08004345
 80042bc:	0800436d 	.word	0x0800436d
 80042c0:	0800436d 	.word	0x0800436d
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	0800436d 	.word	0x0800436d
 80042d0:	0800436d 	.word	0x0800436d
 80042d4:	0800436d 	.word	0x0800436d
 80042d8:	0800434d 	.word	0x0800434d
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	0800436d 	.word	0x0800436d
 80042e4:	0800436d 	.word	0x0800436d
 80042e8:	0800436d 	.word	0x0800436d
 80042ec:	0800436d 	.word	0x0800436d
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	08004355 	.word	0x08004355
 80042fc:	0800436d 	.word	0x0800436d
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800436d 	.word	0x0800436d
 8004308:	0800436d 	.word	0x0800436d
 800430c:	0800436d 	.word	0x0800436d
 8004310:	0800436d 	.word	0x0800436d
 8004314:	0800436d 	.word	0x0800436d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800436d 	.word	0x0800436d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004365 	.word	0x08004365
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e1c0      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	e1bc      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004352:	e1b8      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800435a:	e1b4      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800435c:	2320      	movs	r3, #32
 800435e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004362:	e1b0      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436a:	e1ac      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004372:	e1a8      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a75      	ldr	r2, [pc, #468]	; (8004550 <UART_SetConfig+0x634>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d130      	bne.n	80043e0 <UART_SetConfig+0x4c4>
 800437e:	4b73      	ldr	r3, [pc, #460]	; (800454c <UART_SetConfig+0x630>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b05      	cmp	r3, #5
 8004388:	d826      	bhi.n	80043d8 <UART_SetConfig+0x4bc>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x474>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043b9 	.word	0x080043b9
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e18a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b6:	e186      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043be:	e182      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c6:	e17e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043c8:	2320      	movs	r3, #32
 80043ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ce:	e17a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d6:	e176      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043de:	e172      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a5b      	ldr	r2, [pc, #364]	; (8004554 <UART_SetConfig+0x638>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d130      	bne.n	800444c <UART_SetConfig+0x530>
 80043ea:	4b58      	ldr	r3, [pc, #352]	; (800454c <UART_SetConfig+0x630>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d826      	bhi.n	8004444 <UART_SetConfig+0x528>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x4e0>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004425 	.word	0x08004425
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e154      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e150      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	e14c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e148      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e144      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e140      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e13c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a41      	ldr	r2, [pc, #260]	; (8004558 <UART_SetConfig+0x63c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	f040 8082 	bne.w	800455c <UART_SetConfig+0x640>
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <UART_SetConfig+0x630>)
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004460:	2b28      	cmp	r3, #40	; 0x28
 8004462:	d86d      	bhi.n	8004540 <UART_SetConfig+0x624>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x550>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004511 	.word	0x08004511
 8004470:	08004541 	.word	0x08004541
 8004474:	08004541 	.word	0x08004541
 8004478:	08004541 	.word	0x08004541
 800447c:	08004541 	.word	0x08004541
 8004480:	08004541 	.word	0x08004541
 8004484:	08004541 	.word	0x08004541
 8004488:	08004541 	.word	0x08004541
 800448c:	08004519 	.word	0x08004519
 8004490:	08004541 	.word	0x08004541
 8004494:	08004541 	.word	0x08004541
 8004498:	08004541 	.word	0x08004541
 800449c:	08004541 	.word	0x08004541
 80044a0:	08004541 	.word	0x08004541
 80044a4:	08004541 	.word	0x08004541
 80044a8:	08004541 	.word	0x08004541
 80044ac:	08004521 	.word	0x08004521
 80044b0:	08004541 	.word	0x08004541
 80044b4:	08004541 	.word	0x08004541
 80044b8:	08004541 	.word	0x08004541
 80044bc:	08004541 	.word	0x08004541
 80044c0:	08004541 	.word	0x08004541
 80044c4:	08004541 	.word	0x08004541
 80044c8:	08004541 	.word	0x08004541
 80044cc:	08004529 	.word	0x08004529
 80044d0:	08004541 	.word	0x08004541
 80044d4:	08004541 	.word	0x08004541
 80044d8:	08004541 	.word	0x08004541
 80044dc:	08004541 	.word	0x08004541
 80044e0:	08004541 	.word	0x08004541
 80044e4:	08004541 	.word	0x08004541
 80044e8:	08004541 	.word	0x08004541
 80044ec:	08004531 	.word	0x08004531
 80044f0:	08004541 	.word	0x08004541
 80044f4:	08004541 	.word	0x08004541
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004541 	.word	0x08004541
 8004500:	08004541 	.word	0x08004541
 8004504:	08004541 	.word	0x08004541
 8004508:	08004541 	.word	0x08004541
 800450c:	08004539 	.word	0x08004539
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004516:	e0d6      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451e:	e0d2      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004526:	e0ce      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452e:	e0ca      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004530:	2320      	movs	r3, #32
 8004532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004536:	e0c6      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453e:	e0c2      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004546:	e0be      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004548:	40011400 	.word	0x40011400
 800454c:	58024400 	.word	0x58024400
 8004550:	40007800 	.word	0x40007800
 8004554:	40007c00 	.word	0x40007c00
 8004558:	40011800 	.word	0x40011800
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4aad      	ldr	r2, [pc, #692]	; (8004818 <UART_SetConfig+0x8fc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d176      	bne.n	8004654 <UART_SetConfig+0x738>
 8004566:	4bad      	ldr	r3, [pc, #692]	; (800481c <UART_SetConfig+0x900>)
 8004568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456e:	2b28      	cmp	r3, #40	; 0x28
 8004570:	d86c      	bhi.n	800464c <UART_SetConfig+0x730>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x65c>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	0800461d 	.word	0x0800461d
 800457c:	0800464d 	.word	0x0800464d
 8004580:	0800464d 	.word	0x0800464d
 8004584:	0800464d 	.word	0x0800464d
 8004588:	0800464d 	.word	0x0800464d
 800458c:	0800464d 	.word	0x0800464d
 8004590:	0800464d 	.word	0x0800464d
 8004594:	0800464d 	.word	0x0800464d
 8004598:	08004625 	.word	0x08004625
 800459c:	0800464d 	.word	0x0800464d
 80045a0:	0800464d 	.word	0x0800464d
 80045a4:	0800464d 	.word	0x0800464d
 80045a8:	0800464d 	.word	0x0800464d
 80045ac:	0800464d 	.word	0x0800464d
 80045b0:	0800464d 	.word	0x0800464d
 80045b4:	0800464d 	.word	0x0800464d
 80045b8:	0800462d 	.word	0x0800462d
 80045bc:	0800464d 	.word	0x0800464d
 80045c0:	0800464d 	.word	0x0800464d
 80045c4:	0800464d 	.word	0x0800464d
 80045c8:	0800464d 	.word	0x0800464d
 80045cc:	0800464d 	.word	0x0800464d
 80045d0:	0800464d 	.word	0x0800464d
 80045d4:	0800464d 	.word	0x0800464d
 80045d8:	08004635 	.word	0x08004635
 80045dc:	0800464d 	.word	0x0800464d
 80045e0:	0800464d 	.word	0x0800464d
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	0800464d 	.word	0x0800464d
 80045ec:	0800464d 	.word	0x0800464d
 80045f0:	0800464d 	.word	0x0800464d
 80045f4:	0800464d 	.word	0x0800464d
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800464d 	.word	0x0800464d
 8004600:	0800464d 	.word	0x0800464d
 8004604:	0800464d 	.word	0x0800464d
 8004608:	0800464d 	.word	0x0800464d
 800460c:	0800464d 	.word	0x0800464d
 8004610:	0800464d 	.word	0x0800464d
 8004614:	0800464d 	.word	0x0800464d
 8004618:	08004645 	.word	0x08004645
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004622:	e050      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462a:	e04c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004632:	e048      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800463a:	e044      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800463c:	2320      	movs	r3, #32
 800463e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004642:	e040      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800464a:	e03c      	b.n	80046c6 <UART_SetConfig+0x7aa>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004652:	e038      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a71      	ldr	r2, [pc, #452]	; (8004820 <UART_SetConfig+0x904>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d130      	bne.n	80046c0 <UART_SetConfig+0x7a4>
 800465e:	4b6f      	ldr	r3, [pc, #444]	; (800481c <UART_SetConfig+0x900>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b05      	cmp	r3, #5
 8004668:	d826      	bhi.n	80046b8 <UART_SetConfig+0x79c>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x754>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	2302      	movs	r3, #2
 800468a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468e:	e01a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004696:	e016      	b.n	80046c6 <UART_SetConfig+0x7aa>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469e:	e012      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a6:	e00e      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80046a8:	2320      	movs	r3, #32
 80046aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ae:	e00a      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b6:	e006      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046be:	e002      	b.n	80046c6 <UART_SetConfig+0x7aa>
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a55      	ldr	r2, [pc, #340]	; (8004820 <UART_SetConfig+0x904>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	f040 80f0 	bne.w	80048b2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	dc46      	bgt.n	8004768 <UART_SetConfig+0x84c>
 80046da:	2b02      	cmp	r3, #2
 80046dc:	db75      	blt.n	80047ca <UART_SetConfig+0x8ae>
 80046de:	3b02      	subs	r3, #2
 80046e0:	2b1e      	cmp	r3, #30
 80046e2:	d872      	bhi.n	80047ca <UART_SetConfig+0x8ae>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x7d0>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	0800476f 	.word	0x0800476f
 80046f0:	080047cb 	.word	0x080047cb
 80046f4:	08004777 	.word	0x08004777
 80046f8:	080047cb 	.word	0x080047cb
 80046fc:	080047cb 	.word	0x080047cb
 8004700:	080047cb 	.word	0x080047cb
 8004704:	08004787 	.word	0x08004787
 8004708:	080047cb 	.word	0x080047cb
 800470c:	080047cb 	.word	0x080047cb
 8004710:	080047cb 	.word	0x080047cb
 8004714:	080047cb 	.word	0x080047cb
 8004718:	080047cb 	.word	0x080047cb
 800471c:	080047cb 	.word	0x080047cb
 8004720:	080047cb 	.word	0x080047cb
 8004724:	08004797 	.word	0x08004797
 8004728:	080047cb 	.word	0x080047cb
 800472c:	080047cb 	.word	0x080047cb
 8004730:	080047cb 	.word	0x080047cb
 8004734:	080047cb 	.word	0x080047cb
 8004738:	080047cb 	.word	0x080047cb
 800473c:	080047cb 	.word	0x080047cb
 8004740:	080047cb 	.word	0x080047cb
 8004744:	080047cb 	.word	0x080047cb
 8004748:	080047cb 	.word	0x080047cb
 800474c:	080047cb 	.word	0x080047cb
 8004750:	080047cb 	.word	0x080047cb
 8004754:	080047cb 	.word	0x080047cb
 8004758:	080047cb 	.word	0x080047cb
 800475c:	080047cb 	.word	0x080047cb
 8004760:	080047cb 	.word	0x080047cb
 8004764:	080047bd 	.word	0x080047bd
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d02a      	beq.n	80047c2 <UART_SetConfig+0x8a6>
 800476c:	e02d      	b.n	80047ca <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800476e:	f7fe ff63 	bl	8003638 <HAL_RCCEx_GetD3PCLK1Freq>
 8004772:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004774:	e02f      	b.n	80047d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe ff72 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004784:	e027      	b.n	80047d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff f8be 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004794:	e01f      	b.n	80047d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004796:	4b21      	ldr	r3, [pc, #132]	; (800481c <UART_SetConfig+0x900>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <UART_SetConfig+0x900>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <UART_SetConfig+0x908>)
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047b4:	e00f      	b.n	80047d6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <UART_SetConfig+0x908>)
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ba:	e00c      	b.n	80047d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <UART_SetConfig+0x90c>)
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047c0:	e009      	b.n	80047d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047c8:	e005      	b.n	80047d6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 81e6 	beq.w	8004baa <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <UART_SetConfig+0x910>)
 80047e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d305      	bcc.n	800480e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	429a      	cmp	r2, r3
 800480c:	d910      	bls.n	8004830 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004814:	e1c9      	b.n	8004baa <UART_SetConfig+0xc8e>
 8004816:	bf00      	nop
 8004818:	40011c00 	.word	0x40011c00
 800481c:	58024400 	.word	0x58024400
 8004820:	58000c00 	.word	0x58000c00
 8004824:	03d09000 	.word	0x03d09000
 8004828:	003d0900 	.word	0x003d0900
 800482c:	08005704 	.word	0x08005704
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	4618      	mov	r0, r3
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	4ac1      	ldr	r2, [pc, #772]	; (8004b44 <UART_SetConfig+0xc28>)
 800483e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004842:	b29a      	uxth	r2, r3
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f7fb fd50 	bl	80002ec <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	020b      	lsls	r3, r1, #8
 800485e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004862:	0202      	lsls	r2, r0, #8
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6849      	ldr	r1, [r1, #4]
 8004868:	0849      	lsrs	r1, r1, #1
 800486a:	4608      	mov	r0, r1
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	1814      	adds	r4, r2, r0
 8004872:	eb43 0501 	adc.w	r5, r3, r1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fd32 	bl	80002ec <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d308      	bcc.n	80048aa <UART_SetConfig+0x98e>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d204      	bcs.n	80048aa <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e17f      	b.n	8004baa <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048b0:	e17b      	b.n	8004baa <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ba:	f040 80bd 	bne.w	8004a38 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80048be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	dc48      	bgt.n	8004958 <UART_SetConfig+0xa3c>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db7b      	blt.n	80049c2 <UART_SetConfig+0xaa6>
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d879      	bhi.n	80049c2 <UART_SetConfig+0xaa6>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x9b8>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	0800495f 	.word	0x0800495f
 80048d8:	08004967 	.word	0x08004967
 80048dc:	080049c3 	.word	0x080049c3
 80048e0:	080049c3 	.word	0x080049c3
 80048e4:	0800496f 	.word	0x0800496f
 80048e8:	080049c3 	.word	0x080049c3
 80048ec:	080049c3 	.word	0x080049c3
 80048f0:	080049c3 	.word	0x080049c3
 80048f4:	0800497f 	.word	0x0800497f
 80048f8:	080049c3 	.word	0x080049c3
 80048fc:	080049c3 	.word	0x080049c3
 8004900:	080049c3 	.word	0x080049c3
 8004904:	080049c3 	.word	0x080049c3
 8004908:	080049c3 	.word	0x080049c3
 800490c:	080049c3 	.word	0x080049c3
 8004910:	080049c3 	.word	0x080049c3
 8004914:	0800498f 	.word	0x0800498f
 8004918:	080049c3 	.word	0x080049c3
 800491c:	080049c3 	.word	0x080049c3
 8004920:	080049c3 	.word	0x080049c3
 8004924:	080049c3 	.word	0x080049c3
 8004928:	080049c3 	.word	0x080049c3
 800492c:	080049c3 	.word	0x080049c3
 8004930:	080049c3 	.word	0x080049c3
 8004934:	080049c3 	.word	0x080049c3
 8004938:	080049c3 	.word	0x080049c3
 800493c:	080049c3 	.word	0x080049c3
 8004940:	080049c3 	.word	0x080049c3
 8004944:	080049c3 	.word	0x080049c3
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049c3 	.word	0x080049c3
 8004950:	080049c3 	.word	0x080049c3
 8004954:	080049b5 	.word	0x080049b5
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d02e      	beq.n	80049ba <UART_SetConfig+0xa9e>
 800495c:	e031      	b.n	80049c2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fd ff33 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8004962:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004964:	e033      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004966:	f7fd ff45 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 800496a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800496c:	e02f      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fe76 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800497c:	e027      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497e:	f107 0308 	add.w	r3, r7, #8
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe ffc2 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800498c:	e01f      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498e:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <UART_SetConfig+0xc2c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800499a:	4b6b      	ldr	r3, [pc, #428]	; (8004b48 <UART_SetConfig+0xc2c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <UART_SetConfig+0xc30>)
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049ac:	e00f      	b.n	80049ce <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80049ae:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <UART_SetConfig+0xc30>)
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b2:	e00c      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049b4:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <UART_SetConfig+0xc34>)
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80049cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80ea 	beq.w	8004baa <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <UART_SetConfig+0xc28>)
 80049dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e0:	461a      	mov	r2, r3
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e8:	005a      	lsls	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d916      	bls.n	8004a30 <UART_SetConfig+0xb14>
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d212      	bcs.n	8004a30 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f023 030f 	bic.w	r3, r3, #15
 8004a12:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a22:	4313      	orrs	r3, r2
 8004a24:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e0bc      	b.n	8004baa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004a36:	e0b8      	b.n	8004baa <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	dc4b      	bgt.n	8004ad8 <UART_SetConfig+0xbbc>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f2c0 8087 	blt.w	8004b54 <UART_SetConfig+0xc38>
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	f200 8084 	bhi.w	8004b54 <UART_SetConfig+0xc38>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0xb38>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004adf 	.word	0x08004adf
 8004a58:	08004ae7 	.word	0x08004ae7
 8004a5c:	08004b55 	.word	0x08004b55
 8004a60:	08004b55 	.word	0x08004b55
 8004a64:	08004aef 	.word	0x08004aef
 8004a68:	08004b55 	.word	0x08004b55
 8004a6c:	08004b55 	.word	0x08004b55
 8004a70:	08004b55 	.word	0x08004b55
 8004a74:	08004aff 	.word	0x08004aff
 8004a78:	08004b55 	.word	0x08004b55
 8004a7c:	08004b55 	.word	0x08004b55
 8004a80:	08004b55 	.word	0x08004b55
 8004a84:	08004b55 	.word	0x08004b55
 8004a88:	08004b55 	.word	0x08004b55
 8004a8c:	08004b55 	.word	0x08004b55
 8004a90:	08004b55 	.word	0x08004b55
 8004a94:	08004b0f 	.word	0x08004b0f
 8004a98:	08004b55 	.word	0x08004b55
 8004a9c:	08004b55 	.word	0x08004b55
 8004aa0:	08004b55 	.word	0x08004b55
 8004aa4:	08004b55 	.word	0x08004b55
 8004aa8:	08004b55 	.word	0x08004b55
 8004aac:	08004b55 	.word	0x08004b55
 8004ab0:	08004b55 	.word	0x08004b55
 8004ab4:	08004b55 	.word	0x08004b55
 8004ab8:	08004b55 	.word	0x08004b55
 8004abc:	08004b55 	.word	0x08004b55
 8004ac0:	08004b55 	.word	0x08004b55
 8004ac4:	08004b55 	.word	0x08004b55
 8004ac8:	08004b55 	.word	0x08004b55
 8004acc:	08004b55 	.word	0x08004b55
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004b35 	.word	0x08004b35
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d02e      	beq.n	8004b3a <UART_SetConfig+0xc1e>
 8004adc:	e03a      	b.n	8004b54 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7fd fe73 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8004ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ae4:	e03c      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae6:	f7fd fe85 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004aea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004aec:	e038      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fdb6 	bl	8003664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004afc:	e030      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe ff02 	bl	800390c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b0c:	e028      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <UART_SetConfig+0xc2c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <UART_SetConfig+0xc2c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	08db      	lsrs	r3, r3, #3
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <UART_SetConfig+0xc30>)
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b2c:	e018      	b.n	8004b60 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <UART_SetConfig+0xc30>)
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b32:	e015      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <UART_SetConfig+0xc34>)
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b38:	e012      	b.n	8004b60 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b40:	e00e      	b.n	8004b60 <UART_SetConfig+0xc44>
 8004b42:	bf00      	nop
 8004b44:	08005704 	.word	0x08005704
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	03d09000 	.word	0x03d09000
 8004b50:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <UART_SetConfig+0xcb8>)
 8004b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	441a      	add	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	2b0f      	cmp	r3, #15
 8004b8e:	d909      	bls.n	8004ba4 <UART_SetConfig+0xc88>
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b96:	d205      	bcs.n	8004ba4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e002      	b.n	8004baa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004bc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3738      	adds	r7, #56	; 0x38
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08005704 	.word	0x08005704

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fa96 	bl	800125c <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d10e      	bne.n	8004d5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f82f 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e025      	b.n	8004daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d10e      	bne.n	8004d8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f819 	bl	8004db2 <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00f      	b.n	8004daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b09c      	sub	sp, #112	; 0x70
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	e0a9      	b.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	f000 80a5 	beq.w	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fc fa45 	bl	800125c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d140      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004df8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e069      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d051      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d149      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ee0:	623a      	str	r2, [r7, #32]
 8004ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e010      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f43f af46 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3770      	adds	r7, #112	; 0x70
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e027      	b.n	8004fa8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	; 0x24
 8004f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e02d      	b.n	8005028 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2224      	movs	r2, #36	; 0x24
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f84f 	bl	80050ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e02d      	b.n	80050a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f811 	bl	80050ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d108      	bne.n	80050ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050cc:	e031      	b.n	8005132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050ce:	2310      	movs	r3, #16
 80050d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050d2:	2310      	movs	r3, #16
 80050d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	0e5b      	lsrs	r3, r3, #25
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	0f5b      	lsrs	r3, r3, #29
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	7b3a      	ldrb	r2, [r7, #12]
 80050fa:	4911      	ldr	r1, [pc, #68]	; (8005140 <UARTEx_SetNbDataToProcess+0x94>)
 80050fc:	5c8a      	ldrb	r2, [r1, r2]
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005102:	7b3a      	ldrb	r2, [r7, #12]
 8005104:	490f      	ldr	r1, [pc, #60]	; (8005144 <UARTEx_SetNbDataToProcess+0x98>)
 8005106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005108:	fb93 f3f2 	sdiv	r3, r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	7b7a      	ldrb	r2, [r7, #13]
 8005118:	4909      	ldr	r1, [pc, #36]	; (8005140 <UARTEx_SetNbDataToProcess+0x94>)
 800511a:	5c8a      	ldrb	r2, [r1, r2]
 800511c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005120:	7b7a      	ldrb	r2, [r7, #13]
 8005122:	4908      	ldr	r1, [pc, #32]	; (8005144 <UARTEx_SetNbDataToProcess+0x98>)
 8005124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005126:	fb93 f3f2 	sdiv	r3, r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	0800571c 	.word	0x0800571c
 8005144:	08005724 	.word	0x08005724

08005148 <arm_mean_f32>:
 8005148:	b430      	push	{r4, r5}
 800514a:	088d      	lsrs	r5, r1, #2
 800514c:	d02d      	beq.n	80051aa <arm_mean_f32+0x62>
 800514e:	f100 0310 	add.w	r3, r0, #16
 8005152:	462c      	mov	r4, r5
 8005154:	eddf 7a16 	vldr	s15, [pc, #88]	; 80051b0 <arm_mean_f32+0x68>
 8005158:	ed13 7a04 	vldr	s14, [r3, #-16]
 800515c:	3c01      	subs	r4, #1
 800515e:	ed13 6a03 	vldr	s12, [r3, #-12]
 8005162:	f103 0310 	add.w	r3, r3, #16
 8005166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800516a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800516e:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8005172:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	d1eb      	bne.n	8005158 <arm_mean_f32+0x10>
 8005180:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005184:	f011 0303 	ands.w	r3, r1, #3
 8005188:	d005      	beq.n	8005196 <arm_mean_f32+0x4e>
 800518a:	ecb0 7a01 	vldmia	r0!, {s14}
 800518e:	3b01      	subs	r3, #1
 8005190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005194:	d1f9      	bne.n	800518a <arm_mean_f32+0x42>
 8005196:	ee07 1a10 	vmov	s14, r1
 800519a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800519e:	bc30      	pop	{r4, r5}
 80051a0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80051a4:	edc2 7a00 	vstr	s15, [r2]
 80051a8:	4770      	bx	lr
 80051aa:	eddf 7a01 	vldr	s15, [pc, #4]	; 80051b0 <arm_mean_f32+0x68>
 80051ae:	e7e9      	b.n	8005184 <arm_mean_f32+0x3c>
 80051b0:	00000000 	.word	0x00000000

080051b4 <arm_mat_trans_f32>:
 80051b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b8:	f8b0 c000 	ldrh.w	ip, [r0]
 80051bc:	b083      	sub	sp, #12
 80051be:	884a      	ldrh	r2, [r1, #2]
 80051c0:	6845      	ldr	r5, [r0, #4]
 80051c2:	4562      	cmp	r2, ip
 80051c4:	8843      	ldrh	r3, [r0, #2]
 80051c6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80051ca:	d15c      	bne.n	8005286 <arm_mat_trans_f32+0xd2>
 80051cc:	f8b1 e000 	ldrh.w	lr, [r1]
 80051d0:	459e      	cmp	lr, r3
 80051d2:	d158      	bne.n	8005286 <arm_mat_trans_f32+0xd2>
 80051d4:	f00e 0203 	and.w	r2, lr, #3
 80051d8:	ea4f 039e 	mov.w	r3, lr, lsr #2
 80051dc:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80051e0:	2700      	movs	r7, #0
 80051e2:	1e51      	subs	r1, r2, #1
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	9200      	str	r2, [sp, #0]
 80051ea:	b289      	uxth	r1, r1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3101      	adds	r1, #1
 80051f0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80051f4:	f103 0902 	add.w	r9, r3, #2
 80051f8:	3301      	adds	r3, #1
 80051fa:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80051fe:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8005202:	fb03 fb0b 	mul.w	fp, r3, fp
 8005206:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800520a:	9b01      	ldr	r3, [sp, #4]
 800520c:	eb0a 0187 	add.w	r1, sl, r7, lsl #2
 8005210:	b3bb      	cbz	r3, 8005282 <arm_mat_trans_f32+0xce>
 8005212:	f105 0310 	add.w	r3, r5, #16
 8005216:	eb05 0609 	add.w	r6, r5, r9
 800521a:	4608      	mov	r0, r1
 800521c:	ed53 7a04 	vldr	s15, [r3, #-16]
 8005220:	1884      	adds	r4, r0, r2
 8005222:	3310      	adds	r3, #16
 8005224:	edc0 7a00 	vstr	s15, [r0]
 8005228:	18a0      	adds	r0, r4, r2
 800522a:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 800522e:	edc4 7a00 	vstr	s15, [r4]
 8005232:	1884      	adds	r4, r0, r2
 8005234:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8005238:	edc0 7a00 	vstr	s15, [r0]
 800523c:	18a0      	adds	r0, r4, r2
 800523e:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
 8005242:	42b3      	cmp	r3, r6
 8005244:	edc4 7a00 	vstr	s15, [r4]
 8005248:	d1e8      	bne.n	800521c <arm_mat_trans_f32+0x68>
 800524a:	eb05 0308 	add.w	r3, r5, r8
 800524e:	4459      	add	r1, fp
 8005250:	9800      	ldr	r0, [sp, #0]
 8005252:	b180      	cbz	r0, 8005276 <arm_mat_trans_f32+0xc2>
 8005254:	eb03 050e 	add.w	r5, r3, lr
 8005258:	f853 0b04 	ldr.w	r0, [r3], #4
 800525c:	42ab      	cmp	r3, r5
 800525e:	6008      	str	r0, [r1, #0]
 8005260:	4411      	add	r1, r2
 8005262:	d1f9      	bne.n	8005258 <arm_mat_trans_f32+0xa4>
 8005264:	3701      	adds	r7, #1
 8005266:	b2bf      	uxth	r7, r7
 8005268:	4567      	cmp	r7, ip
 800526a:	d1ce      	bne.n	800520a <arm_mat_trans_f32+0x56>
 800526c:	2000      	movs	r0, #0
 800526e:	b240      	sxtb	r0, r0
 8005270:	b003      	add	sp, #12
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	3701      	adds	r7, #1
 8005278:	461d      	mov	r5, r3
 800527a:	b2bf      	uxth	r7, r7
 800527c:	4567      	cmp	r7, ip
 800527e:	d1c4      	bne.n	800520a <arm_mat_trans_f32+0x56>
 8005280:	e7f4      	b.n	800526c <arm_mat_trans_f32+0xb8>
 8005282:	462b      	mov	r3, r5
 8005284:	e7e4      	b.n	8005250 <arm_mat_trans_f32+0x9c>
 8005286:	20fd      	movs	r0, #253	; 0xfd
 8005288:	b240      	sxtb	r0, r0
 800528a:	b003      	add	sp, #12
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005290 <arm_mat_scale_f32>:
 8005290:	b470      	push	{r4, r5, r6}
 8005292:	6802      	ldr	r2, [r0, #0]
 8005294:	6845      	ldr	r5, [r0, #4]
 8005296:	e891 0018 	ldmia.w	r1, {r3, r4}
 800529a:	429a      	cmp	r2, r3
 800529c:	d13c      	bne.n	8005318 <arm_mat_scale_f32+0x88>
 800529e:	8841      	ldrh	r1, [r0, #2]
 80052a0:	8803      	ldrh	r3, [r0, #0]
 80052a2:	fb03 f101 	mul.w	r1, r3, r1
 80052a6:	088e      	lsrs	r6, r1, #2
 80052a8:	d025      	beq.n	80052f6 <arm_mat_scale_f32+0x66>
 80052aa:	f105 0210 	add.w	r2, r5, #16
 80052ae:	f104 0310 	add.w	r3, r4, #16
 80052b2:	4630      	mov	r0, r6
 80052b4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80052b8:	3801      	subs	r0, #1
 80052ba:	ed52 6a02 	vldr	s13, [r2, #-8]
 80052be:	f103 0310 	add.w	r3, r3, #16
 80052c2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80052c6:	ee20 6a06 	vmul.f32	s12, s0, s12
 80052ca:	ed52 7a04 	vldr	s15, [r2, #-16]
 80052ce:	ee60 6a26 	vmul.f32	s13, s0, s13
 80052d2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80052d6:	f102 0210 	add.w	r2, r2, #16
 80052da:	ee67 7a80 	vmul.f32	s15, s15, s0
 80052de:	ed03 6a07 	vstr	s12, [r3, #-28]	; 0xffffffe4
 80052e2:	ed43 6a06 	vstr	s13, [r3, #-24]	; 0xffffffe8
 80052e6:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80052ea:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80052ee:	d1e1      	bne.n	80052b4 <arm_mat_scale_f32+0x24>
 80052f0:	0136      	lsls	r6, r6, #4
 80052f2:	4435      	add	r5, r6
 80052f4:	4434      	add	r4, r6
 80052f6:	f011 0303 	ands.w	r3, r1, #3
 80052fa:	bf18      	it	ne
 80052fc:	4622      	movne	r2, r4
 80052fe:	d007      	beq.n	8005310 <arm_mat_scale_f32+0x80>
 8005300:	ecf5 7a01 	vldmia	r5!, {s15}
 8005304:	3b01      	subs	r3, #1
 8005306:	ee67 7a80 	vmul.f32	s15, s15, s0
 800530a:	ece2 7a01 	vstmia	r2!, {s15}
 800530e:	d1f7      	bne.n	8005300 <arm_mat_scale_f32+0x70>
 8005310:	2000      	movs	r0, #0
 8005312:	b240      	sxtb	r0, r0
 8005314:	bc70      	pop	{r4, r5, r6}
 8005316:	4770      	bx	lr
 8005318:	20fd      	movs	r0, #253	; 0xfd
 800531a:	e7fa      	b.n	8005312 <arm_mat_scale_f32+0x82>

0800531c <arm_mat_mult_f32>:
 800531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005320:	b087      	sub	sp, #28
 8005322:	8844      	ldrh	r4, [r0, #2]
 8005324:	880b      	ldrh	r3, [r1, #0]
 8005326:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800532a:	8800      	ldrh	r0, [r0, #0]
 800532c:	42a3      	cmp	r3, r4
 800532e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8005332:	4605      	mov	r5, r0
 8005334:	9003      	str	r0, [sp, #12]
 8005336:	6850      	ldr	r0, [r2, #4]
 8005338:	9004      	str	r0, [sp, #16]
 800533a:	f040 8091 	bne.w	8005460 <arm_mat_mult_f32+0x144>
 800533e:	8810      	ldrh	r0, [r2, #0]
 8005340:	42a8      	cmp	r0, r5
 8005342:	f040 808d 	bne.w	8005460 <arm_mat_mult_f32+0x144>
 8005346:	8852      	ldrh	r2, [r2, #2]
 8005348:	454a      	cmp	r2, r9
 800534a:	f040 8089 	bne.w	8005460 <arm_mat_mult_f32+0x144>
 800534e:	f003 0003 	and.w	r0, r3, #3
 8005352:	089a      	lsrs	r2, r3, #2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	684d      	ldr	r5, [r1, #4]
 8005358:	4607      	mov	r7, r0
 800535a:	1e54      	subs	r4, r2, #1
 800535c:	4616      	mov	r6, r2
 800535e:	9305      	str	r3, [sp, #20]
 8005360:	1e7a      	subs	r2, r7, #1
 8005362:	2300      	movs	r3, #0
 8005364:	9000      	str	r0, [sp, #0]
 8005366:	ea4f 1009 	mov.w	r0, r9, lsl #4
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	b292      	uxth	r2, r2
 800536e:	b2a3      	uxth	r3, r4
 8005370:	3201      	adds	r2, #1
 8005372:	ea4f 0489 	mov.w	r4, r9, lsl #2
 8005376:	3301      	adds	r3, #1
 8005378:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800537c:	fb00 fb03 	mul.w	fp, r0, r3
 8005380:	eb0c 1803 	add.w	r8, ip, r3, lsl #4
 8005384:	f8cd a004 	str.w	sl, [sp, #4]
 8005388:	46da      	mov	sl, fp
 800538a:	468b      	mov	fp, r1
 800538c:	4631      	mov	r1, r6
 800538e:	9b04      	ldr	r3, [sp, #16]
 8005390:	2700      	movs	r7, #0
 8005392:	9a02      	ldr	r2, [sp, #8]
 8005394:	f108 0610 	add.w	r6, r8, #16
 8005398:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800539c:	2900      	cmp	r1, #0
 800539e:	d05b      	beq.n	8005458 <arm_mat_mult_f32+0x13c>
 80053a0:	f10c 0010 	add.w	r0, ip, #16
 80053a4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800546c <arm_mat_mult_f32+0x150>
 80053a8:	462a      	mov	r2, r5
 80053aa:	ed50 6a04 	vldr	s13, [r0, #-16]
 80053ae:	1913      	adds	r3, r2, r4
 80053b0:	ed92 7a00 	vldr	s14, [r2]
 80053b4:	3010      	adds	r0, #16
 80053b6:	edd3 5a00 	vldr	s11, [r3]
 80053ba:	4423      	add	r3, r4
 80053bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80053c0:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
 80053c4:	ed93 6a00 	vldr	s12, [r3]
 80053c8:	4423      	add	r3, r4
 80053ca:	ee26 5aa5 	vmul.f32	s10, s13, s11
 80053ce:	ed50 5a06 	vldr	s11, [r0, #-24]	; 0xffffffe8
 80053d2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80053d6:	ed93 7a00 	vldr	s14, [r3]
 80053da:	ee25 6a86 	vmul.f32	s12, s11, s12
 80053de:	ed50 5a05 	vldr	s11, [r0, #-20]	; 0xffffffec
 80053e2:	42b0      	cmp	r0, r6
 80053e4:	eb03 0204 	add.w	r2, r3, r4
 80053e8:	ee75 6a26 	vadd.f32	s13, s10, s13
 80053ec:	ee25 7a87 	vmul.f32	s14, s11, s14
 80053f0:	ee76 7a26 	vadd.f32	s15, s12, s13
 80053f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f8:	d1d7      	bne.n	80053aa <arm_mat_mult_f32+0x8e>
 80053fa:	4455      	add	r5, sl
 80053fc:	4643      	mov	r3, r8
 80053fe:	9a00      	ldr	r2, [sp, #0]
 8005400:	b162      	cbz	r2, 800541c <arm_mat_mult_f32+0x100>
 8005402:	9a01      	ldr	r2, [sp, #4]
 8005404:	189a      	adds	r2, r3, r2
 8005406:	ecf3 6a01 	vldmia	r3!, {s13}
 800540a:	ed95 7a00 	vldr	s14, [r5]
 800540e:	4425      	add	r5, r4
 8005410:	4293      	cmp	r3, r2
 8005412:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800541a:	d1f4      	bne.n	8005406 <arm_mat_mult_f32+0xea>
 800541c:	3701      	adds	r7, #1
 800541e:	ecee 7a01 	vstmia	lr!, {s15}
 8005422:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005426:	b2bf      	uxth	r7, r7
 8005428:	454f      	cmp	r7, r9
 800542a:	eb03 0587 	add.w	r5, r3, r7, lsl #2
 800542e:	d1b5      	bne.n	800539c <arm_mat_mult_f32+0x80>
 8005430:	9802      	ldr	r0, [sp, #8]
 8005432:	9a03      	ldr	r2, [sp, #12]
 8005434:	4438      	add	r0, r7
 8005436:	9d05      	ldr	r5, [sp, #20]
 8005438:	3a01      	subs	r2, #1
 800543a:	4607      	mov	r7, r0
 800543c:	44ac      	add	ip, r5
 800543e:	44a8      	add	r8, r5
 8005440:	b292      	uxth	r2, r2
 8005442:	461d      	mov	r5, r3
 8005444:	b2bb      	uxth	r3, r7
 8005446:	9203      	str	r2, [sp, #12]
 8005448:	9302      	str	r3, [sp, #8]
 800544a:	2a00      	cmp	r2, #0
 800544c:	d19f      	bne.n	800538e <arm_mat_mult_f32+0x72>
 800544e:	4610      	mov	r0, r2
 8005450:	b240      	sxtb	r0, r0
 8005452:	b007      	add	sp, #28
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4663      	mov	r3, ip
 800545a:	eddf 7a04 	vldr	s15, [pc, #16]	; 800546c <arm_mat_mult_f32+0x150>
 800545e:	e7ce      	b.n	80053fe <arm_mat_mult_f32+0xe2>
 8005460:	20fd      	movs	r0, #253	; 0xfd
 8005462:	b240      	sxtb	r0, r0
 8005464:	b007      	add	sp, #28
 8005466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546a:	bf00      	nop
 800546c:	00000000 	.word	0x00000000

08005470 <arm_mat_init_f32>:
 8005470:	8001      	strh	r1, [r0, #0]
 8005472:	8042      	strh	r2, [r0, #2]
 8005474:	6043      	str	r3, [r0, #4]
 8005476:	4770      	bx	lr

08005478 <arm_offset_f32>:
 8005478:	b470      	push	{r4, r5, r6}
 800547a:	0896      	lsrs	r6, r2, #2
 800547c:	d025      	beq.n	80054ca <arm_offset_f32+0x52>
 800547e:	f100 0410 	add.w	r4, r0, #16
 8005482:	f101 0310 	add.w	r3, r1, #16
 8005486:	4635      	mov	r5, r6
 8005488:	ed14 6a04 	vldr	s12, [r4, #-16]
 800548c:	3d01      	subs	r5, #1
 800548e:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005492:	f103 0310 	add.w	r3, r3, #16
 8005496:	ed14 7a02 	vldr	s14, [r4, #-8]
 800549a:	ee36 6a00 	vadd.f32	s12, s12, s0
 800549e:	ed54 7a01 	vldr	s15, [r4, #-4]
 80054a2:	ee76 6a80 	vadd.f32	s13, s13, s0
 80054a6:	ee37 7a00 	vadd.f32	s14, s14, s0
 80054aa:	f104 0410 	add.w	r4, r4, #16
 80054ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80054b2:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 80054b6:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80054ba:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 80054be:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80054c2:	d1e1      	bne.n	8005488 <arm_offset_f32+0x10>
 80054c4:	0136      	lsls	r6, r6, #4
 80054c6:	4430      	add	r0, r6
 80054c8:	4431      	add	r1, r6
 80054ca:	f012 0203 	ands.w	r2, r2, #3
 80054ce:	d007      	beq.n	80054e0 <arm_offset_f32+0x68>
 80054d0:	ecf0 7a01 	vldmia	r0!, {s15}
 80054d4:	3a01      	subs	r2, #1
 80054d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80054da:	ece1 7a01 	vstmia	r1!, {s15}
 80054de:	d1f7      	bne.n	80054d0 <arm_offset_f32+0x58>
 80054e0:	bc70      	pop	{r4, r5, r6}
 80054e2:	4770      	bx	lr

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f82e 	bl	8005558 <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08005734 	.word	0x08005734
 8005520:	08005734 	.word	0x08005734
 8005524:	08005734 	.word	0x08005734
 8005528:	08005738 	.word	0x08005738

0800552c <memcpy>:
 800552c:	440a      	add	r2, r1
 800552e:	4291      	cmp	r1, r2
 8005530:	f100 33ff 	add.w	r3, r0, #4294967295
 8005534:	d100      	bne.n	8005538 <memcpy+0xc>
 8005536:	4770      	bx	lr
 8005538:	b510      	push	{r4, lr}
 800553a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005542:	4291      	cmp	r1, r2
 8005544:	d1f9      	bne.n	800553a <memcpy+0xe>
 8005546:	bd10      	pop	{r4, pc}

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
