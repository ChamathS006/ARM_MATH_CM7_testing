
CMSIS_4.5_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080051d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c0  24000074  0800524c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000134  0800524c  00020134  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000170c3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025e9  00000000  00000000  00037165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a70  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000009b8  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002eff7  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dc6c  00000000  00000000  00069b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133f44  00000000  00000000  000777db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c3  00000000  00000000  001ab71f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b64  00000000  00000000  001ab7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000004ae  00000000  00000000  001ae348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000074 	.word	0x24000074
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005124 	.word	0x08005124

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000078 	.word	0x24000078
 80002e8:	08005124 	.word	0x08005124

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <mat_f32_check_equal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int mat_f32_check_equal(arm_matrix_instance_f32* matrixAPtr, arm_matrix_instance_f32* matrixBPtr) {
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	 * Returns 1 if matrices are equal
	 *
	 * */

	// Check if the rows and cols match up in number
	int test_nRows = (matrixAPtr->numRows == matrixBPtr->numRows);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	bf0c      	ite	eq
 80005fa:	2301      	moveq	r3, #1
 80005fc:	2300      	movne	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	613b      	str	r3, [r7, #16]
	int test_nCols = (matrixAPtr->numCols == matrixBPtr->numCols);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	885a      	ldrh	r2, [r3, #2]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	885b      	ldrh	r3, [r3, #2]
 800060a:	429a      	cmp	r2, r3
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	60fb      	str	r3, [r7, #12]

	// If there's a mismatch, then return 0 immediately
	if (test_nRows * test_nCols == 0) {
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <mat_f32_check_equal+0x42>
		return 0;
 8000622:	2300      	movs	r3, #0
 8000624:	e025      	b.n	8000672 <mat_f32_check_equal+0x8e>
	}

	// Since rows and cols match, we need to check every entry
	for (int i = 0; i < (matrixAPtr->numRows) * (matrixAPtr->numCols); i++) {
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	e017      	b.n	800065c <mat_f32_check_equal+0x78>
		if (matrixAPtr->pData[i] != matrixBPtr->pData[i]) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eeb4 7a67 	vcmp.f32	s14, s15
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	d001      	beq.n	8000656 <mat_f32_check_equal+0x72>
			return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e00d      	b.n	8000672 <mat_f32_check_equal+0x8e>
	for (int i = 0; i < (matrixAPtr->numRows) * (matrixAPtr->numCols); i++) {
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	885b      	ldrh	r3, [r3, #2]
 8000666:	fb03 f302 	mul.w	r3, r3, r2
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbdd      	blt.n	800062c <mat_f32_check_equal+0x48>
		}
	}

	// If it's fine, then return 1
	return 1;
 8000670:	2301      	movs	r3, #1
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b0a6      	sub	sp, #152	; 0x98
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fc11 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f8cd 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f98d 	bl	80009ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000692:	f000 f937 	bl	8000904 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000696:	f000 f981 	bl	800099c <MX_USB_OTG_HS_USB_Init>
  arm_matrix_instance_f32 matrixA; //A
  arm_matrix_instance_f32 matrixB; //B
  arm_matrix_instance_f32 matrixC; //C. Meant to be C = AB
  arm_matrix_instance_f32 matrixTrue; // True result to compare against

  uint16_t nRowsA = 3;
 800069a:	2303      	movs	r3, #3
 800069c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t nColsA = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  float32_t pDataA[] = {1,2,3,4,5,6};
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <main+0x198>)
 80006a8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b6:	e884 0003 	stmia.w	r4, {r0, r1}

  uint16_t nRowsB = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  uint16_t nColsB = 3;
 80006c0:	2303      	movs	r3, #3
 80006c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  float32_t pDataB[] = {8,1,3,5,2,4};
 80006c6:	4b55      	ldr	r3, [pc, #340]	; (800081c <main+0x19c>)
 80006c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d6:	e884 0003 	stmia.w	r4, {r0, r1}

  uint16_t nRowsTrue = nRowsA;
 80006da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80006de:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  uint16_t nColsTrue = nColsB;
 80006e2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80006e6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  float32_t pDataTrue[] = {18,5,11,44,11,25,70,17,39};
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <main+0x1a0>)
 80006ec:	1d3c      	adds	r4, r7, #4
 80006ee:	461d      	mov	r5, r3
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	682b      	ldr	r3, [r5, #0]
 80006fa:	6023      	str	r3, [r4, #0]

  arm_mat_init_f32(&matrixA, nRowsA, nColsA, pDataA);
 80006fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000700:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8000704:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 8000708:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800070c:	f004 fc74 	bl	8004ff8 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixB, nRowsB, nColsB, pDataB);
 8000710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000714:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000718:	f8b7 108e 	ldrh.w	r1, [r7, #142]	; 0x8e
 800071c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000720:	f004 fc6a 	bl	8004ff8 <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue, nRowsTrue, nColsTrue, pDataTrue);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800072a:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 800072e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000732:	f004 fc61 	bl	8004ff8 <arm_mat_init_f32>

  // Initialise matrixC to store the result of matrixA * matrixB
  uint16_t matrixC_size = matrixA.numRows * matrixB.numCols;
 8000736:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800073a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800073e:	fb12 f303 	smulbb	r3, r2, r3
 8000742:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  float32_t pDataC[matrixC_size];
 8000746:	f8b7 4086 	ldrh.w	r4, [r7, #134]	; 0x86
 800074a:	4623      	mov	r3, r4
 800074c:	3b01      	subs	r3, #1
 800074e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000752:	b2a0      	uxth	r0, r4
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	014b      	lsls	r3, r1, #5
 8000762:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000766:	0142      	lsls	r2, r0, #5
 8000768:	b2a0      	uxth	r0, r4
 800076a:	f04f 0100 	mov.w	r1, #0
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	014b      	lsls	r3, r1, #5
 8000778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800077c:	0142      	lsls	r2, r0, #5
 800077e:	4623      	mov	r3, r4
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3307      	adds	r3, #7
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	ebad 0d03 	sub.w	sp, sp, r3
 800078c:	466b      	mov	r3, sp
 800078e:	3303      	adds	r3, #3
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	67fb      	str	r3, [r7, #124]	; 0x7c

  arm_mat_init_f32(&matrixC, matrixA.numRows, matrixB.numCols, pDataC);
 8000796:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 800079a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800079e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80007a4:	f004 fc28 	bl	8004ff8 <arm_mat_init_f32>

  // Multiply A and B and store in C
  arm_status ableToMultiply = arm_mat_mult_f32(&matrixA, &matrixB, &matrixC);
 80007a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80007ac:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80007b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fb75 	bl	8004ea4 <arm_mat_mult_f32>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  // If multiplication failed, then test_mult_flag should be set to 0
  int test_mult_flag;

  if (ableToMultiply == ARM_MATH_SUCCESS) {
 80007c0:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10a      	bne.n	80007de <main+0x15e>
	  test_mult_flag = mat_f32_check_equal(&matrixC, &matrixTrue);
 80007c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff06 	bl	80005e4 <mat_f32_check_equal>
 80007d8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80007dc:	e004      	b.n	80007e8 <main+0x168>
  }
  else {
	  test_mult_flag = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  // Jump to error handler as well
	  Error_Handler();
 80007e4:	f000 f9fc 	bl	8000be0 <Error_Handler>
  }

  free(pDataC);
 80007e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fc2c 	bl	8005048 <free>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_mult_flag == 1) {
 80007f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d104      	bne.n	8000802 <main+0x182>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 80007f8:	2101      	movs	r1, #1
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <main+0x1a4>)
 80007fc:	f000 feb9 	bl	8001572 <HAL_GPIO_TogglePin>
 8000800:	e004      	b.n	800080c <main+0x18c>
	  }
	  else {
		  HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <main+0x1a4>)
 8000808:	f000 feb3 	bl	8001572 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000810:	f000 fbde 	bl	8000fd0 <HAL_Delay>
	  if (test_mult_flag == 1) {
 8000814:	e7ec      	b.n	80007f0 <main+0x170>
 8000816:	bf00      	nop
 8000818:	0800513c 	.word	0x0800513c
 800081c:	08005154 	.word	0x08005154
 8000820:	0800516c 	.word	0x0800516c
 8000824:	58020400 	.word	0x58020400

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	; 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	224c      	movs	r2, #76	; 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fc0e 	bl	8005058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fc08 	bl	8005058 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000848:	2004      	movs	r0, #4
 800084a:	f000 fead 	bl	80015a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <SystemClock_Config+0xd8>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <SystemClock_Config+0xd8>)
 8000858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <SystemClock_Config+0xd8>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <SystemClock_Config+0xd8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800087a:	2321      	movs	r3, #33	; 0x21
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000894:	2318      	movs	r3, #24
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a4:	230c      	movs	r3, #12
 80008a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fed1 	bl	800165c <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008c0:	f000 f98e 	bl	8000be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	233f      	movs	r3, #63	; 0x3f
 80008c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2303      	movs	r3, #3
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2102      	movs	r1, #2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fabb 	bl	8001e64 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008f4:	f000 f974 	bl	8000be0 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	; 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024800 	.word	0x58024800

08000904 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_USART3_UART_Init+0x90>)
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <MX_USART3_UART_Init+0x94>)
 800090c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_USART3_UART_Init+0x90>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_USART3_UART_Init+0x90>)
 800094e:	f003 f943 	bl	8003bd8 <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f942 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000960:	f004 f9d6 	bl	8004d10 <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f939 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000972:	f004 fa0b 	bl	8004d8c <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f930 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_USART3_UART_Init+0x90>)
 8000982:	f004 f98c 	bl	8004c9e <HAL_UARTEx_DisableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f928 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	24000094 	.word	0x24000094
 8000998:	40004800 	.word	0x40004800

0800099c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b80      	ldr	r3, [pc, #512]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c8:	4a7e      	ldr	r2, [pc, #504]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d2:	4b7c      	ldr	r3, [pc, #496]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	623b      	str	r3, [r7, #32]
 80009de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e0:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e6:	4a77      	ldr	r2, [pc, #476]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009f0:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <MX_GPIO_Init+0x218>)
 80009f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f6:	f003 0320 	and.w	r3, r3, #32
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a04:	4a6f      	ldr	r2, [pc, #444]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a0e:	4b6d      	ldr	r3, [pc, #436]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b69      	ldr	r3, [pc, #420]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a22:	4a68      	ldr	r2, [pc, #416]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a2c:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b62      	ldr	r3, [pc, #392]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a40:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a58:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a7c:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9a:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa4:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x218>)
 8000aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4843      	ldr	r0, [pc, #268]	; (8000bc8 <MX_GPIO_Init+0x21c>)
 8000aba:	f000 fd41 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ac4:	4841      	ldr	r0, [pc, #260]	; (8000bcc <MX_GPIO_Init+0x220>)
 8000ac6:	f000 fd3b 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <MX_GPIO_Init+0x224>)
 8000ad0:	f000 fd36 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483a      	ldr	r0, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x228>)
 8000aea:	f000 fb79 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0x21c>)
 8000b08:	f000 fb6a 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8000b0c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4829      	ldr	r0, [pc, #164]	; (8000bcc <MX_GPIO_Init+0x220>)
 8000b26:	f000 fb5b 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <MX_GPIO_Init+0x22c>)
 8000b40:	f000 fb4e 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_GPIO_Init+0x230>)
 8000b5a:	f000 fb41 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x230>)
 8000b7c:	f000 fb30 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_GPIO_Init+0x230>)
 8000b9a:	f000 fb21 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_GPIO_Init+0x224>)
 8000bb6:	f000 fb13 	bl	80011e0 <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3738      	adds	r7, #56	; 0x38
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58021400 	.word	0x58021400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58021000 	.word	0x58021000
 8000bd4:	58020800 	.word	0x58020800
 8000bd8:	58021800 	.word	0x58021800
 8000bdc:	58020000 	.word	0x58020000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <Error_Handler+0x2c>)
 8000bf0:	f000 fca6 	bl	8001540 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <Error_Handler+0x2c>)
 8000bfa:	f000 fca1 	bl	8001540 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2102      	movs	r1, #2
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <Error_Handler+0x30>)
 8000c04:	f000 fc9c 	bl	8001540 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000c08:	e7ee      	b.n	8000be8 <Error_Handler+0x8>
 8000c0a:	bf00      	nop
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	58021000 	.word	0x58021000

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x30>)
 8000c1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x30>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0b8      	sub	sp, #224	; 0xe0
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	22b8      	movs	r2, #184	; 0xb8
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 f9f5 	bl	8005058 <memset>
  if(huart->Instance==USART3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_UART_MspInit+0xc0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d142      	bne.n	8000cfe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fc78 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c92:	f7ff ffa5 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000c98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000ca8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0xc4>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cec:	2307      	movs	r3, #7
 8000cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0xc8>)
 8000cfa:	f000 fa71 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	37e0      	adds	r7, #224	; 0xe0
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020c00 	.word	0x58020c00

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f916 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <SystemInit+0xd0>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <SystemInit+0xd0>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <SystemInit+0xd4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d807      	bhi.n	8000d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <SystemInit+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <SystemInit+0xd4>)
 8000d92:	f043 0303 	orr.w	r3, r3, #3
 8000d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemInit+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <SystemInit+0xd8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemInit+0xd8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SystemInit+0xd8>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4924      	ldr	r1, [pc, #144]	; (8000e40 <SystemInit+0xd8>)
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <SystemInit+0xdc>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <SystemInit+0xd4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SystemInit+0xd4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 030f 	bic.w	r3, r3, #15
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <SystemInit+0xd4>)
 8000dcc:	f043 0303 	orr.w	r3, r3, #3
 8000dd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <SystemInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <SystemInit+0xd8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <SystemInit+0xd8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <SystemInit+0xd8>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <SystemInit+0xe0>)
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <SystemInit+0xd8>)
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <SystemInit+0xe4>)
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <SystemInit+0xd8>)
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <SystemInit+0xe8>)
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <SystemInit+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SystemInit+0xd8>)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <SystemInit+0xe8>)
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SystemInit+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <SystemInit+0xd8>)
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <SystemInit+0xe8>)
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <SystemInit+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SystemInit+0xd8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <SystemInit+0xd8>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <SystemInit+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SystemInit+0xec>)
 8000e28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e2c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	52002000 	.word	0x52002000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e48:	02020200 	.word	0x02020200
 8000e4c:	01ff0000 	.word	0x01ff0000
 8000e50:	01010280 	.word	0x01010280
 8000e54:	52004000 	.word	0x52004000

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ff84 	bl	8000d68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f004 f8bb 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fbf9 	bl	8000680 <main>
  bx  lr
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e98:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e9c:	080051d8 	.word	0x080051d8
  ldr r2, =_sbss
 8000ea0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000ea4:	24000134 	.word	0x24000134

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f962 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000eb8:	f001 f98a 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_Init+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	4913      	ldr	r1, [pc, #76]	; (8000f18 <HAL_Init+0x6c>)
 8000eca:	5ccb      	ldrb	r3, [r1, r3]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_Init+0x68>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_Init+0x6c>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_Init+0x70>)
 8000eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_Init+0x74>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f814 	bl	8000f24 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e002      	b.n	8000f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f06:	f7ff fe85 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	08005190 	.word	0x08005190
 8000f1c:	24000004 	.word	0x24000004
 8000f20:	24000000 	.word	0x24000000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e021      	b.n	8000f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_InitTick+0x64>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_InitTick+0x60>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f939 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f911 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x68>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2400000c 	.word	0x2400000c
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	24000008 	.word	0x24000008

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	24000124 	.word	0x24000124

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000124 	.word	0x24000124

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2400000c 	.word	0x2400000c

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	4313      	orrs	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	05fa0000 	.word	0x05fa0000

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff47 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff5e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff90 	bl	80010d0 <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffb2 	bl	8001138 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <HAL_GPIO_Init+0x234>)
 80011f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011f2:	e194      	b.n	800151e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8186 	beq.w	8001518 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <HAL_GPIO_Init+0x44>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d130      	bne.n	8001286 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125a:	2201      	movs	r2, #1
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	f003 0201 	and.w	r2, r3, #1
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b03      	cmp	r3, #3
 8001290:	d017      	beq.n	80012c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d123      	bne.n	8001316 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	69b9      	ldr	r1, [r7, #24]
 8001312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0203 	and.w	r2, r3, #3
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80e0 	beq.w	8001518 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_GPIO_Init+0x238>)
 800135a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800135e:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <HAL_GPIO_Init+0x238>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_GPIO_Init+0x238>)
 800136a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a29      	ldr	r2, [pc, #164]	; (800141c <HAL_GPIO_Init+0x23c>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_GPIO_Init+0x240>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d052      	beq.n	8001448 <HAL_GPIO_Init+0x268>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_GPIO_Init+0x244>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d031      	beq.n	800140e <HAL_GPIO_Init+0x22e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_GPIO_Init+0x248>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02b      	beq.n	800140a <HAL_GPIO_Init+0x22a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_GPIO_Init+0x24c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d025      	beq.n	8001406 <HAL_GPIO_Init+0x226>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x250>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01f      	beq.n	8001402 <HAL_GPIO_Init+0x222>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x254>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x21e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <HAL_GPIO_Init+0x258>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_GPIO_Init+0x25c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x260>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_GPIO_Init+0x264>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x20e>
 80013ea:	2309      	movs	r3, #9
 80013ec:	e02d      	b.n	800144a <HAL_GPIO_Init+0x26a>
 80013ee:	230a      	movs	r3, #10
 80013f0:	e02b      	b.n	800144a <HAL_GPIO_Init+0x26a>
 80013f2:	2308      	movs	r3, #8
 80013f4:	e029      	b.n	800144a <HAL_GPIO_Init+0x26a>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e027      	b.n	800144a <HAL_GPIO_Init+0x26a>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e025      	b.n	800144a <HAL_GPIO_Init+0x26a>
 80013fe:	2305      	movs	r3, #5
 8001400:	e023      	b.n	800144a <HAL_GPIO_Init+0x26a>
 8001402:	2304      	movs	r3, #4
 8001404:	e021      	b.n	800144a <HAL_GPIO_Init+0x26a>
 8001406:	2303      	movs	r3, #3
 8001408:	e01f      	b.n	800144a <HAL_GPIO_Init+0x26a>
 800140a:	2302      	movs	r3, #2
 800140c:	e01d      	b.n	800144a <HAL_GPIO_Init+0x26a>
 800140e:	2301      	movs	r3, #1
 8001410:	e01b      	b.n	800144a <HAL_GPIO_Init+0x26a>
 8001412:	bf00      	nop
 8001414:	58000080 	.word	0x58000080
 8001418:	58024400 	.word	0x58024400
 800141c:	58000400 	.word	0x58000400
 8001420:	58020000 	.word	0x58020000
 8001424:	58020400 	.word	0x58020400
 8001428:	58020800 	.word	0x58020800
 800142c:	58020c00 	.word	0x58020c00
 8001430:	58021000 	.word	0x58021000
 8001434:	58021400 	.word	0x58021400
 8001438:	58021800 	.word	0x58021800
 800143c:	58021c00 	.word	0x58021c00
 8001440:	58022000 	.word	0x58022000
 8001444:	58022400 	.word	0x58022400
 8001448:	2300      	movs	r3, #0
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145a:	4938      	ldr	r1, [pc, #224]	; (800153c <HAL_GPIO_Init+0x35c>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800148e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3301      	adds	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f ae63 	bne.w	80011f4 <HAL_GPIO_Init+0x14>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3724      	adds	r7, #36	; 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000400 	.word	0x58000400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	400b      	ands	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d00a      	beq.n	80015d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e040      	b.n	8001650 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e03e      	b.n	8001650 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80015da:	491f      	ldr	r1, [pc, #124]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015e2:	f7ff fce9 	bl	8000fb8 <HAL_GetTick>
 80015e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015e8:	e009      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ea:	f7ff fce5 	bl	8000fb8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f8:	d901      	bls.n	80015fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e028      	b.n	8001650 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800160a:	d1ee      	bne.n	80015ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b1e      	cmp	r3, #30
 8001610:	d008      	beq.n	8001624 <HAL_PWREx_ConfigSupply+0x7c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b2e      	cmp	r3, #46	; 0x2e
 8001616:	d005      	beq.n	8001624 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b1d      	cmp	r3, #29
 800161c:	d002      	beq.n	8001624 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b2d      	cmp	r3, #45	; 0x2d
 8001622:	d114      	bne.n	800164e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001624:	f7ff fcc8 	bl	8000fb8 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800162a:	e009      	b.n	8001640 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800162c:	f7ff fcc4 	bl	8000fb8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800163a:	d901      	bls.n	8001640 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e007      	b.n	8001650 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_PWREx_ConfigSupply+0xb0>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164c:	d1ee      	bne.n	800162c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	58024800 	.word	0x58024800

0800165c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e3f3      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80b3 	beq.w	80017e2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167c:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001686:	4b9c      	ldr	r3, [pc, #624]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	2b10      	cmp	r3, #16
 8001690:	d007      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46>
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	2b18      	cmp	r3, #24
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x62>
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d10d      	bne.n	80016be <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b95      	ldr	r3, [pc, #596]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8098 	beq.w	80017e0 <HAL_RCC_OscConfig+0x184>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8093 	bne.w	80017e0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e3cb      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x7a>
 80016c8:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e058      	b.n	8001788 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0xa8>
 80016de:	4b86      	ldr	r3, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e041      	b.n	8001788 <HAL_RCC_OscConfig+0x12c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0xd8>
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a79      	ldr	r2, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b77      	ldr	r3, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a76      	ldr	r2, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001720:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a73      	ldr	r2, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e029      	b.n	8001788 <HAL_RCC_OscConfig+0x12c>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x108>
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6d      	ldr	r2, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a67      	ldr	r2, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e011      	b.n	8001788 <HAL_RCC_OscConfig+0x12c>
 8001764:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a60      	ldr	r2, [pc, #384]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b5e      	ldr	r3, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a5d      	ldr	r2, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fc12 	bl	8000fb8 <HAL_GetTick>
 8001794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fc0e 	bl	8000fb8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e355      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x13c>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fbfe 	bl	8000fb8 <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fbfa 	bl	8000fb8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e341      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x164>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 808c 	beq.w	8001908 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_RCC_OscConfig+0x1ba>
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	2b18      	cmp	r3, #24
 800180a:	d137      	bne.n	800187c <HAL_RCC_OscConfig+0x220>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d132      	bne.n	800187c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x1d2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e313      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0219 	bic.w	r2, r3, #25
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	492f      	ldr	r1, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001840:	f7ff fbba 	bl	8000fb8 <HAL_GetTick>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fbb6 	bl	8000fb8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e2fd      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	061b      	lsls	r3, r3, #24
 8001874:	4920      	ldr	r1, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187a:	e045      	b.n	8001908 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d026      	beq.n	80018d2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 0219 	bic.w	r2, r3, #25
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4919      	ldr	r1, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fb8f 	bl	8000fb8 <HAL_GetTick>
 800189a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fb8b 	bl	8000fb8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2d2      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	490b      	ldr	r1, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
 80018d0:	e01a      	b.n	8001908 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fb6b 	bl	8000fb8 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fb67 	bl	8000fb8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d903      	bls.n	80018fc <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e2ae      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
 80018f8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018fc:	4b99      	ldr	r3, [pc, #612]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d06a      	beq.n	80019ea <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001914:	4b93      	ldr	r3, [pc, #588]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800191e:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d007      	beq.n	800193a <HAL_RCC_OscConfig+0x2de>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b18      	cmp	r3, #24
 800192e:	d11b      	bne.n	8001968 <HAL_RCC_OscConfig+0x30c>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800193a:	4b8a      	ldr	r3, [pc, #552]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b80      	cmp	r3, #128	; 0x80
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e281      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001952:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	061b      	lsls	r3, r3, #24
 8001960:	4980      	ldr	r1, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001962:	4313      	orrs	r3, r2
 8001964:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001966:	e040      	b.n	80019ea <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001970:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb1c 	bl	8000fb8 <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001984:	f7ff fb18 	bl	8000fb8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e25f      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019a2:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	496c      	ldr	r1, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80019be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff faf8 	bl	8000fb8 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019cc:	f7ff faf4 	bl	8000fb8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e23b      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019de:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d036      	beq.n	8001a64 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fad5 	bl	8000fb8 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fad1 	bl	8000fb8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e218      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3b6>
 8001a30:	e018      	b.n	8001a64 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a36:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fabb 	bl	8000fb8 <HAL_GetTick>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff fab7 	bl	8000fb8 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1fe      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d036      	beq.n	8001ade <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d019      	beq.n	8001aac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a39      	ldr	r2, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa98 	bl	8000fb8 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a8c:	f7ff fa94 	bl	8000fb8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1db      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x430>
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fa7e 	bl	8000fb8 <HAL_GetTick>
 8001abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ac0:	f7ff fa7a 	bl	8000fb8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1c1      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80af 	beq.w	8001c4a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_OscConfig+0x50c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x50c>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa5e 	bl	8000fb8 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fa5a 	bl	8000fb8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1a1      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x50c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4d8>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	e05b      	b.n	8001bec <HAL_RCC_OscConfig+0x590>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d117      	bne.n	8001b6c <HAL_RCC_OscConfig+0x510>
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a02      	ldr	r2, [pc, #8]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e044      	b.n	8001bec <HAL_RCC_OscConfig+0x590>
 8001b62:	bf00      	nop
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58024800 	.word	0x58024800
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x53e>
 8001b74:	4b95      	ldr	r3, [pc, #596]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a94      	ldr	r2, [pc, #592]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a91      	ldr	r2, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e028      	b.n	8001bec <HAL_RCC_OscConfig+0x590>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b85      	cmp	r3, #133	; 0x85
 8001ba0:	d112      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x56c>
 8001ba2:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b87      	ldr	r3, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a86      	ldr	r2, [pc, #536]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a83      	ldr	r2, [pc, #524]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e011      	b.n	8001bec <HAL_RCC_OscConfig+0x590>
 8001bc8:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a7f      	ldr	r2, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a7c      	ldr	r2, [pc, #496]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9e0 	bl	8000fb8 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f9dc 	bl	8000fb8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e121      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c12:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ee      	beq.n	8001bfc <HAL_RCC_OscConfig+0x5a0>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9ca 	bl	8000fb8 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9c6 	bl	8000fb8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e10b      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8100 	beq.w	8001e54 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c54:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5c:	2b18      	cmp	r3, #24
 8001c5e:	f000 80bb 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 8095 	bne.w	8001d96 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f99e 	bl	8000fb8 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f99a 	bl	8000fb8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0e1      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_OscConfig+0x774>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4946      	ldr	r1, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	628b      	str	r3, [r1, #40]	; 0x28
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ce8:	4938      	ldr	r1, [pc, #224]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cee:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d06:	00d2      	lsls	r2, r2, #3
 8001d08:	4930      	ldr	r1, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f023 020c 	bic.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	492c      	ldr	r1, [pc, #176]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f023 0202 	bic.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	4927      	ldr	r1, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f923 	bl	8000fb8 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff f91f 	bl	8000fb8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e066      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x71a>
 8001d94:	e05e      	b.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f909 	bl	8000fb8 <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f905 	bl	8000fb8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e04c      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_OscConfig+0x770>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x74e>
 8001dc8:	e044      	b.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
 8001dca:	bf00      	nop
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	fffffc0c 	.word	0xfffffc0c
 8001dd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x804>)
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x804>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d031      	beq.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d12a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d122      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d11a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0a5b      	lsrs	r3, r3, #9
 8001e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d111      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400

08001e64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e19c      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b87      	ldr	r3, [pc, #540]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020f 	bic.w	r2, r3, #15
 8001e8e:	4985      	ldr	r1, [pc, #532]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e184      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d908      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	4975      	ldr	r1, [pc, #468]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	496a      	ldr	r1, [pc, #424]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	495e      	ldr	r1, [pc, #376]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4953      	ldr	r1, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f023 020f 	bic.w	r2, r3, #15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4947      	ldr	r1, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d055      	beq.n	8002046 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4940      	ldr	r1, [pc, #256]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fb4:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d121      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0f6      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d115      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0ea      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0de      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d6      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4925      	ldr	r1, [pc, #148]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002012:	4313      	orrs	r3, r2
 8002014:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7fe ffcf 	bl	8000fb8 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	e00a      	b.n	8002034 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201e:	f7fe ffcb 	bl	8000fb8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0be      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	429a      	cmp	r2, r3
 8002044:	d1eb      	bne.n	800201e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	429a      	cmp	r2, r3
 8002060:	d208      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f023 020f 	bic.w	r2, r3, #15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x244>)
 8002070:	4313      	orrs	r3, r2
 8002072:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d214      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	4906      	ldr	r1, [pc, #24]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e086      	b.n	80021b2 <HAL_RCC_ClockConfig+0x34e>
 80020a4:	52002000 	.word	0x52002000
 80020a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d208      	bcs.n	80020da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d208      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	492e      	ldr	r1, [pc, #184]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4922      	ldr	r1, [pc, #136]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4917      	ldr	r1, [pc, #92]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002164:	f000 f834 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x35c>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x358>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_RCC_ClockConfig+0x35c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x360>)
 800219a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x364>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x368>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe febc 	bl	8000f24 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	58024400 	.word	0x58024400
 80021c0:	08005190 	.word	0x08005190
 80021c4:	24000004 	.word	0x24000004
 80021c8:	24000000 	.word	0x24000000
 80021cc:	24000008 	.word	0x24000008

080021d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d6:	4bb3      	ldr	r3, [pc, #716]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021de:	2b18      	cmp	r3, #24
 80021e0:	f200 8155 	bhi.w	800248e <HAL_RCC_GetSysClockFreq+0x2be>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	08002251 	.word	0x08002251
 80021f0:	0800248f 	.word	0x0800248f
 80021f4:	0800248f 	.word	0x0800248f
 80021f8:	0800248f 	.word	0x0800248f
 80021fc:	0800248f 	.word	0x0800248f
 8002200:	0800248f 	.word	0x0800248f
 8002204:	0800248f 	.word	0x0800248f
 8002208:	0800248f 	.word	0x0800248f
 800220c:	08002277 	.word	0x08002277
 8002210:	0800248f 	.word	0x0800248f
 8002214:	0800248f 	.word	0x0800248f
 8002218:	0800248f 	.word	0x0800248f
 800221c:	0800248f 	.word	0x0800248f
 8002220:	0800248f 	.word	0x0800248f
 8002224:	0800248f 	.word	0x0800248f
 8002228:	0800248f 	.word	0x0800248f
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800248f 	.word	0x0800248f
 8002234:	0800248f 	.word	0x0800248f
 8002238:	0800248f 	.word	0x0800248f
 800223c:	0800248f 	.word	0x0800248f
 8002240:	0800248f 	.word	0x0800248f
 8002244:	0800248f 	.word	0x0800248f
 8002248:	0800248f 	.word	0x0800248f
 800224c:	08002283 	.word	0x08002283
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002250:	4b94      	ldr	r3, [pc, #592]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800225c:	4b91      	ldr	r3, [pc, #580]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800226e:	e111      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002270:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002272:	61bb      	str	r3, [r7, #24]
    break;
 8002274:	e10e      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002278:	61bb      	str	r3, [r7, #24]
    break;
 800227a:	e10b      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800227c:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800227e:	61bb      	str	r3, [r7, #24]
    break;
 8002280:	e108      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002282:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800228c:	4b85      	ldr	r3, [pc, #532]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002296:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002298:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022a2:	4b80      	ldr	r3, [pc, #512]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80e1 	beq.w	8002488 <HAL_RCC_GetSysClockFreq+0x2b8>
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	f000 8083 	beq.w	80023d4 <HAL_RCC_GetSysClockFreq+0x204>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f200 80a1 	bhi.w	8002418 <HAL_RCC_GetSysClockFreq+0x248>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x114>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d056      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022e2:	e099      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022e4:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02d      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022f0:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	4a6b      	ldr	r2, [pc, #428]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800234a:	e087      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238e:	e065      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023d2:	e043      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002416:	e021      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243a:	ed97 6a02 	vldr	s12, [r7, #8]
 800243e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800245a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	0a5b      	lsrs	r3, r3, #9
 8002462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002466:	3301      	adds	r3, #1
 8002468:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002474:	edd7 6a07 	vldr	s13, [r7, #28]
 8002478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002486:	e005      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002490:	61bb      	str	r3, [r7, #24]
    break;
 8002492:	bf00      	nop
  }

  return sysclockfreq;
 8002494:	69bb      	ldr	r3, [r7, #24]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	03d09000 	.word	0x03d09000
 80024ac:	003d0900 	.word	0x003d0900
 80024b0:	007a1200 	.word	0x007a1200
 80024b4:	46000000 	.word	0x46000000
 80024b8:	4c742400 	.word	0x4c742400
 80024bc:	4a742400 	.word	0x4a742400
 80024c0:	4af42400 	.word	0x4af42400

080024c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80024ca:	f7ff fe81 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_RCC_GetHCLKFreq+0x50>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490f      	ldr	r1, [pc, #60]	; (8002518 <HAL_RCC_GetHCLKFreq+0x54>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_GetHCLKFreq+0x50>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_GetHCLKFreq+0x54>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_RCC_GetHCLKFreq+0x58>)
 8002500:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_RCC_GetHCLKFreq+0x58>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	58024400 	.word	0x58024400
 8002518:	08005190 	.word	0x08005190
 800251c:	24000004 	.word	0x24000004
 8002520:	24000000 	.word	0x24000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002528:	f7ff ffcc 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58024400 	.word	0x58024400
 800254c:	08005190 	.word	0x08005190

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002554:	f7ff ffb6 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4904      	ldr	r1, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58024400 	.word	0x58024400
 8002578:	08005190 	.word	0x08005190

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002588:	2300      	movs	r3, #0
 800258a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03f      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025a0:	d02a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025a6:	d824      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ac:	d018      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b2:	d81e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025bc:	d007      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025be:	e018      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c0:	4ba6      	ldr	r3, [pc, #664]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	4aa5      	ldr	r2, [pc, #660]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025cc:	e015      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f99b 	bl	8003910 <RCCEx_PLL2_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025de:	e00c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 fa44 	bl	8003a74 <RCCEx_PLL3_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
      break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260c:	4993      	ldr	r1, [pc, #588]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	650b      	str	r3, [r1, #80]	; 0x50
 8002612:	e001      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03d      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	2b04      	cmp	r3, #4
 800262a:	d826      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002649 	.word	0x08002649
 8002638:	08002657 	.word	0x08002657
 800263c:	08002669 	.word	0x08002669
 8002640:	08002681 	.word	0x08002681
 8002644:	08002681 	.word	0x08002681
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002648:	4b84      	ldr	r3, [pc, #528]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a83      	ldr	r2, [pc, #524]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002654:	e015      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f001 f957 	bl	8003910 <RCCEx_PLL2_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002666:	e00c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3324      	adds	r3, #36	; 0x24
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f001 fa00 	bl	8003a74 <RCCEx_PLL3_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
      break;
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002688:	4b74      	ldr	r3, [pc, #464]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	f023 0207 	bic.w	r2, r3, #7
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	4971      	ldr	r1, [pc, #452]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	650b      	str	r3, [r1, #80]	; 0x50
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d04a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026b4:	d031      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80026b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026ba:	d82b      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	d02d      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	d825      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026c8:	2bc0      	cmp	r3, #192	; 0xc0
 80026ca:	d02a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026cc:	2bc0      	cmp	r3, #192	; 0xc0
 80026ce:	d821      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d016      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d81d      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d007      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80026e0:	e018      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e2:	4b5e      	ldr	r3, [pc, #376]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026ee:	e019      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 f90a 	bl	8003910 <RCCEx_PLL2_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002700:	e010      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3324      	adds	r3, #36	; 0x24
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f9b3 	bl	8003a74 <RCCEx_PLL3_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002712:	e007      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
      break;
 8002718:	e004      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800271a:	bf00      	nop
 800271c:	e002      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	4949      	ldr	r1, [pc, #292]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	650b      	str	r3, [r1, #80]	; 0x50
 800273c:	e001      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04f      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002756:	d036      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002758:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800275c:	d830      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800275e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002762:	d032      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002768:	d82a      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800276a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800276e:	d02e      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002770:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002774:	d824      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d018      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x232>
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	d81e      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278a:	d007      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800278c:	e018      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	4a32      	ldr	r2, [pc, #200]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800279a:	e019      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f8b4 	bl	8003910 <RCCEx_PLL2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027ac:	e010      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3324      	adds	r3, #36	; 0x24
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f95d 	bl	8003a74 <RCCEx_PLL3_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027be:	e007      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
      break;
 80027c4:	e004      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	491e      	ldr	r1, [pc, #120]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	650b      	str	r3, [r1, #80]	; 0x50
 80027e8:	e001      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d034      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	2b30      	cmp	r3, #48	; 0x30
 8002800:	d01c      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002802:	2b30      	cmp	r3, #48	; 0x30
 8002804:	d817      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002806:	2b20      	cmp	r3, #32
 8002808:	d00c      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d813      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002812:	2b10      	cmp	r3, #16
 8002814:	d10f      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002822:	e00e      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f870 	bl	8003910 <RCCEx_PLL2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002834:	e005      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	4901      	ldr	r1, [pc, #4]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	64cb      	str	r3, [r1, #76]	; 0x4c
 800285a:	e003      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800285c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d047      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002878:	d030      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800287a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287e:	d82a      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002884:	d02c      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002886:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800288a:	d824      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d018      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	d81e      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d007      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a4:	4bb0      	ldr	r3, [pc, #704]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4aaf      	ldr	r2, [pc, #700]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028b0:	e017      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 f829 	bl	8003910 <RCCEx_PLL2_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028c2:	e00e      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f8d2 	bl	8003a74 <RCCEx_PLL3_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028d4:	e005      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80028dc:	bf00      	nop
 80028de:	e000      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80028e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028e8:	4b9f      	ldr	r3, [pc, #636]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	499c      	ldr	r1, [pc, #624]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	650b      	str	r3, [r1, #80]	; 0x50
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d049      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d02e      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291a:	d828      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800291c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002920:	d02a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002926:	d822      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800292c:	d026      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800292e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002932:	d81c      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002938:	d010      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800293a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800293e:	d816      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01d      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d111      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f000 ffdd 	bl	8003910 <RCCEx_PLL2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800295a:	e012      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3324      	adds	r3, #36	; 0x24
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f886 	bl	8003a74 <RCCEx_PLL3_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800296c:	e009      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
      break;
 8002972:	e006      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002974:	bf00      	nop
 8002976:	e004      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002978:	bf00      	nop
 800297a:	e002      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002988:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	4974      	ldr	r1, [pc, #464]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	650b      	str	r3, [r1, #80]	; 0x50
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d053      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029b6:	d034      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029b8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029bc:	d82e      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c2:	d030      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80029c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c8:	d828      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d02c      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d822      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029da:	d028      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80029dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e0:	d81c      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e6:	d010      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ec:	d816      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01f      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80029f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f6:	d111      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff86 	bl	8003910 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a08:	e014      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f82f 	bl	8003a74 <RCCEx_PLL3_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a20:	e008      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a22:	bf00      	nop
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e004      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a48:	4947      	ldr	r1, [pc, #284]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d02f      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a68:	d00e      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6e:	d814      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a78:	d10f      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a86:	e00c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 ff3e 	bl	8003910 <RCCEx_PLL2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a98:	e003      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	492c      	ldr	r1, [pc, #176]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8002aba:	e001      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d032      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d81b      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b13 	.word	0x08002b13
 8002ae0:	08002aed 	.word	0x08002aed
 8002ae4:	08002afb 	.word	0x08002afb
 8002ae8:	08002b13 	.word	0x08002b13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 ff05 	bl	8003910 <RCCEx_PLL2_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4910      	ldr	r1, [pc, #64]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b2c:	e001      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 808a 	beq.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fa34 	bl	8000fb8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b52:	e00d      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fa30 	bl	8000fb8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d906      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	75fb      	strb	r3, [r7, #23]
        break;
 8002b66:	e009      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b70:	4bba      	ldr	r3, [pc, #744]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0eb      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d166      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b82:	4bb7      	ldr	r3, [pc, #732]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b8c:	4053      	eors	r3, r2
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b96:	4bb2      	ldr	r3, [pc, #712]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba0:	4baf      	ldr	r3, [pc, #700]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4aae      	ldr	r2, [pc, #696]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bac:	4bac      	ldr	r3, [pc, #688]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4aab      	ldr	r2, [pc, #684]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bb8:	4aa9      	ldr	r2, [pc, #676]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe f9f5 	bl	8000fb8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd0:	e00b      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe f9f1 	bl	8000fb8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d902      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	75fb      	strb	r3, [r7, #23]
            break;
 8002be8:	e005      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bea:	4b9d      	ldr	r3, [pc, #628]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ed      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d126      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002c0c:	4b94      	ldr	r3, [pc, #592]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c1a:	0919      	lsrs	r1, r3, #4
 8002c1c:	4b91      	ldr	r3, [pc, #580]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	498f      	ldr	r1, [pc, #572]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
 8002c26:	e005      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002c28:	4b8d      	ldr	r3, [pc, #564]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	4a8c      	ldr	r2, [pc, #560]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c32:	6113      	str	r3, [r2, #16]
 8002c34:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	4987      	ldr	r1, [pc, #540]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	670b      	str	r3, [r1, #112]	; 0x70
 8002c48:	e004      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	75bb      	strb	r3, [r7, #22]
 8002c4e:	e001      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d07f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c66:	2b28      	cmp	r3, #40	; 0x28
 8002c68:	d866      	bhi.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002c6a:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002d3f 	.word	0x08002d3f
 8002c74:	08002d39 	.word	0x08002d39
 8002c78:	08002d39 	.word	0x08002d39
 8002c7c:	08002d39 	.word	0x08002d39
 8002c80:	08002d39 	.word	0x08002d39
 8002c84:	08002d39 	.word	0x08002d39
 8002c88:	08002d39 	.word	0x08002d39
 8002c8c:	08002d39 	.word	0x08002d39
 8002c90:	08002d15 	.word	0x08002d15
 8002c94:	08002d39 	.word	0x08002d39
 8002c98:	08002d39 	.word	0x08002d39
 8002c9c:	08002d39 	.word	0x08002d39
 8002ca0:	08002d39 	.word	0x08002d39
 8002ca4:	08002d39 	.word	0x08002d39
 8002ca8:	08002d39 	.word	0x08002d39
 8002cac:	08002d39 	.word	0x08002d39
 8002cb0:	08002d27 	.word	0x08002d27
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d39 	.word	0x08002d39
 8002cbc:	08002d39 	.word	0x08002d39
 8002cc0:	08002d39 	.word	0x08002d39
 8002cc4:	08002d39 	.word	0x08002d39
 8002cc8:	08002d39 	.word	0x08002d39
 8002ccc:	08002d39 	.word	0x08002d39
 8002cd0:	08002d3f 	.word	0x08002d3f
 8002cd4:	08002d39 	.word	0x08002d39
 8002cd8:	08002d39 	.word	0x08002d39
 8002cdc:	08002d39 	.word	0x08002d39
 8002ce0:	08002d39 	.word	0x08002d39
 8002ce4:	08002d39 	.word	0x08002d39
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d39 	.word	0x08002d39
 8002cf0:	08002d3f 	.word	0x08002d3f
 8002cf4:	08002d39 	.word	0x08002d39
 8002cf8:	08002d39 	.word	0x08002d39
 8002cfc:	08002d39 	.word	0x08002d39
 8002d00:	08002d39 	.word	0x08002d39
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d39 	.word	0x08002d39
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d3f 	.word	0x08002d3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fdf8 	bl	8003910 <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d24:	e00c      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3324      	adds	r3, #36	; 0x24
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fea1 	bl	8003a74 <RCCEx_PLL3_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d36:	e003      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d46:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d54:	4942      	ldr	r1, [pc, #264]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	654b      	str	r3, [r1, #84]	; 0x54
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d038      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d821      	bhi.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002dbf 	.word	0x08002dbf
 8002d80:	08002d95 	.word	0x08002d95
 8002d84:	08002da7 	.word	0x08002da7
 8002d88:	08002dbf 	.word	0x08002dbf
 8002d8c:	08002dbf 	.word	0x08002dbf
 8002d90:	08002dbf 	.word	0x08002dbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fdb8 	bl	8003910 <RCCEx_PLL2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002da4:	e00c      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3324      	adds	r3, #36	; 0x24
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fe61 	bl	8003a74 <RCCEx_PLL3_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002db6:	e003      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
      break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd2:	4923      	ldr	r1, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8002dd8:	e001      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d040      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d821      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e3f 	.word	0x08002e3f
 8002e00:	08002e15 	.word	0x08002e15
 8002e04:	08002e27 	.word	0x08002e27
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fd78 	bl	8003910 <RCCEx_PLL2_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e24:	e00c      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3324      	adds	r3, #36	; 0x24
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fe21 	bl	8003a74 <RCCEx_PLL3_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e36:	e003      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3c:	e000      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d110      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e54:	4902      	ldr	r1, [pc, #8]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	658b      	str	r3, [r1, #88]	; 0x58
 8002e5a:	e007      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e5c:	58024800 	.word	0x58024800
 8002e60:	58024400 	.word	0x58024400
 8002e64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d04b      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e82:	d02e      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e88:	d828      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d02a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d822      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e9a:	d026      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ea0:	d81c      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea6:	d010      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d816      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb6:	d111      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fd26 	bl	8003910 <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e012      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fdcf 	bl	8003a74 <RCCEx_PLL3_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eda:	e009      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef6:	4bb3      	ldr	r3, [pc, #716]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	49af      	ldr	r1, [pc, #700]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	654b      	str	r3, [r1, #84]	; 0x54
 8002f0a:	e001      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d04b      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f26:	d02e      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f2c:	d828      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f32:	d02a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d822      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f3e:	d026      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f44:	d81c      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f50:	d816      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01d      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fcd4 	bl	8003910 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f6c:	e012      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3324      	adds	r3, #36	; 0x24
 8002f72:	2102      	movs	r1, #2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fd7d 	bl	8003a74 <RCCEx_PLL3_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f7e:	e009      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
      break;
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9a:	4b8a      	ldr	r3, [pc, #552]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fa8:	4986      	ldr	r1, [pc, #536]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	658b      	str	r3, [r1, #88]	; 0x58
 8002fae:	e001      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d04b      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fca:	d02e      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fd0:	d828      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd6:	d02a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fdc:	d822      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fe2:	d026      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fe8:	d81c      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fee:	d010      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff4:	d816      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01d      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffe:	d111      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fc82 	bl	8003910 <RCCEx_PLL2_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003010:	e012      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3324      	adds	r3, #36	; 0x24
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fd2b 	bl	8003a74 <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003022:	e009      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	e006      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800303e:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800304c:	495d      	ldr	r1, [pc, #372]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800304e:	4313      	orrs	r3, r2
 8003050:	658b      	str	r3, [r1, #88]	; 0x58
 8003052:	e001      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d10a      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3324      	adds	r3, #36	; 0x24
 8003074:	2102      	movs	r1, #2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fcfc 	bl	8003a74 <RCCEx_PLL3_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003086:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	494b      	ldr	r1, [pc, #300]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003096:	4313      	orrs	r3, r2
 8003098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b0:	d10a      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fcdb 	bl	8003a74 <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030c8:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d6:	493b      	ldr	r1, [pc, #236]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d034      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f2:	d01d      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80030f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f8:	d817      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d009      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003104:	e011      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fbff 	bl	8003910 <RCCEx_PLL2_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003116:	e00c      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3324      	adds	r3, #36	; 0x24
 800311c:	2102      	movs	r1, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fca8 	bl	8003a74 <RCCEx_PLL3_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
      break;
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003146:	491f      	ldr	r1, [pc, #124]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003148:	4313      	orrs	r3, r2
 800314a:	658b      	str	r3, [r1, #88]	; 0x58
 800314c:	e001      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d036      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003168:	d01c      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800316a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800316e:	d816      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003174:	d003      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317a:	d007      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800317c:	e00f      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3324      	adds	r3, #36	; 0x24
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fc6e 	bl	8003a74 <RCCEx_PLL3_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
      break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80031a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10d      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ba:	4902      	ldr	r1, [pc, #8]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	654b      	str	r3, [r1, #84]	; 0x54
 80031c0:	e004      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80031c2:	bf00      	nop
 80031c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d029      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d007      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80031e6:	e00f      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b69      	ldr	r3, [pc, #420]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4a68      	ldr	r2, [pc, #416]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031f4:	e00b      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fb87 	bl	8003910 <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003206:	e002      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
      break;
 800320c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003214:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	495b      	ldr	r1, [pc, #364]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003222:	4313      	orrs	r3, r2
 8003224:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003226:	e001      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3324      	adds	r3, #36	; 0x24
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fc18 	bl	8003a74 <RCCEx_PLL3_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d032      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003264:	d017      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d811      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d013      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d80b      	bhi.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d106      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003282:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	4a42      	ldr	r2, [pc, #264]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800328e:	e007      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e004      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800329e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b4:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	654b      	str	r3, [r1, #84]	; 0x54
 80032ba:	e001      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d8:	492d      	ldr	r1, [pc, #180]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f6:	4926      	ldr	r1, [pc, #152]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	491e      	ldr	r1, [pc, #120]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003316:	4313      	orrs	r3, r2
 8003318:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800332c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003330:	6113      	str	r3, [r2, #16]
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800333c:	4914      	ldr	r1, [pc, #80]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800333e:	4313      	orrs	r3, r2
 8003340:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da08      	bge.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003358:	4313      	orrs	r3, r2
 800335a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4906      	ldr	r1, [pc, #24]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003378:	4313      	orrs	r3, r2
 800337a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800337c:	7dbb      	ldrb	r3, [r7, #22]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	58024400 	.word	0x58024400

08003394 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003398:	f7ff f894 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4904      	ldr	r1, [pc, #16]	; (80033bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024400 	.word	0x58024400
 80033bc:	08005190 	.word	0x08005190

080033c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033c8:	4ba1      	ldr	r3, [pc, #644]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80033d2:	4b9f      	ldr	r3, [pc, #636]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	0b1b      	lsrs	r3, r3, #12
 80033d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80033de:	4b9c      	ldr	r3, [pc, #624]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80033ea:	4b99      	ldr	r3, [pc, #612]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	08db      	lsrs	r3, r3, #3
 80033f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8111 	beq.w	8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b02      	cmp	r3, #2
 8003412:	f000 8083 	beq.w	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f200 80a1 	bhi.w	8003560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d056      	beq.n	80034d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800342a:	e099      	b.n	8003560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800342c:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02d      	beq.n	8003494 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003438:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	4a84      	ldr	r2, [pc, #528]	; (8003654 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003462:	4b7b      	ldr	r3, [pc, #492]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003472:	ed97 6a03 	vldr	s12, [r7, #12]
 8003476:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800347a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003492:	e087      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800365c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80034a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034d6:	e065      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80034fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800351a:	e043      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800352a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352e:	4b48      	ldr	r3, [pc, #288]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003542:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800355e:	e021      	b.n	80035a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003582:	ed97 6a03 	vldr	s12, [r7, #12]
 8003586:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	0a5b      	lsrs	r3, r3, #9
 80035aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035be:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	ee17 2a90 	vmov	r2, s15
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f8:	ee17 2a90 	vmov	r2, s15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	0e1b      	lsrs	r3, r3, #24
 8003606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800361a:	edd7 6a07 	vldr	s13, [r7, #28]
 800361e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003626:	ee17 2a90 	vmov	r2, s15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800362e:	e008      	b.n	8003642 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
}
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	03d09000 	.word	0x03d09000
 8003658:	46000000 	.word	0x46000000
 800365c:	4c742400 	.word	0x4c742400
 8003660:	4a742400 	.word	0x4a742400
 8003664:	4af42400 	.word	0x4af42400

08003668 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003670:	4ba1      	ldr	r3, [pc, #644]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800367a:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	0d1b      	lsrs	r3, r3, #20
 8003680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003684:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003686:	4b9c      	ldr	r3, [pc, #624]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003692:	4b99      	ldr	r3, [pc, #612]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	08db      	lsrs	r3, r3, #3
 8003698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8111 	beq.w	80038d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	f000 8083 	beq.w	80037c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	f200 80a1 	bhi.w	8003808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d056      	beq.n	8003780 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80036d2:	e099      	b.n	8003808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d4:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02d      	beq.n	800373c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036e0:	4b85      	ldr	r3, [pc, #532]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	08db      	lsrs	r3, r3, #3
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	4a84      	ldr	r2, [pc, #528]	; (80038fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370a:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371a:	ed97 6a03 	vldr	s12, [r7, #12]
 800371e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800373a:	e087      	b.n	800384c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003904 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003762:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377e:	e065      	b.n	800384c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037c2:	e043      	b.n	800384c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800390c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003806:	e021      	b.n	800384c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382a:	ed97 6a03 	vldr	s12, [r7, #12]
 800382e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800384a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	0a5b      	lsrs	r3, r3, #9
 8003852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003866:	edd7 6a07 	vldr	s13, [r7, #28]
 800386a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003872:	ee17 2a90 	vmov	r2, s15
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003894:	edd7 6a07 	vldr	s13, [r7, #28]
 8003898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a0:	ee17 2a90 	vmov	r2, s15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	0e1b      	lsrs	r3, r3, #24
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ce:	ee17 2a90 	vmov	r2, s15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	58024400 	.word	0x58024400
 80038fc:	03d09000 	.word	0x03d09000
 8003900:	46000000 	.word	0x46000000
 8003904:	4c742400 	.word	0x4c742400
 8003908:	4a742400 	.word	0x4a742400
 800390c:	4af42400 	.word	0x4af42400

08003910 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800391e:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b03      	cmp	r3, #3
 8003928:	d101      	bne.n	800392e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e099      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800392e:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a4e      	ldr	r2, [pc, #312]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003934:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393a:	f7fd fb3d 	bl	8000fb8 <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003940:	e008      	b.n	8003954 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003942:	f7fd fb39 	bl	8000fb8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e086      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003954:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003960:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	493f      	ldr	r1, [pc, #252]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	628b      	str	r3, [r1, #40]	; 0x28
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	3b01      	subs	r3, #1
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	b29b      	uxth	r3, r3
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039a4:	4931      	ldr	r1, [pc, #196]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	492d      	ldr	r1, [pc, #180]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039bc:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f023 0220 	bic.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	4928      	ldr	r1, [pc, #160]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4a26      	ldr	r2, [pc, #152]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <RCCEx_PLL2_Config+0x160>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	69d2      	ldr	r2, [r2, #28]
 80039e6:	00d2      	lsls	r2, r2, #3
 80039e8:	4920      	ldr	r1, [pc, #128]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a0c:	e00f      	b.n	8003a2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a20:	e005      	b.n	8003a2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fabd 	bl	8000fb8 <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a42:	f7fd fab9 	bl	8000fb8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <RCCEx_PLL2_Config+0x15c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	ffff0007 	.word	0xffff0007

08003a74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d101      	bne.n	8003a92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e099      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a92:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4e      	ldr	r2, [pc, #312]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fa8b 	bl	8000fb8 <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003aa6:	f7fd fa87 	bl	8000fb8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e086      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ab8:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ac4:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	051b      	lsls	r3, r3, #20
 8003ad2:	493f      	ldr	r1, [pc, #252]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	025b      	lsls	r3, r3, #9
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b08:	4931      	ldr	r1, [pc, #196]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b0e:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	492d      	ldr	r1, [pc, #180]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4928      	ldr	r1, [pc, #160]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <RCCEx_PLL3_Config+0x160>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69d2      	ldr	r2, [r2, #28]
 8003b4a:	00d2      	lsls	r2, r2, #3
 8003b4c:	4920      	ldr	r1, [pc, #128]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b70:	e00f      	b.n	8003b92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d106      	bne.n	8003b86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b84:	e005      	b.n	8003b92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a0e      	ldr	r2, [pc, #56]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd fa0b 	bl	8000fb8 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ba6:	f7fd fa07 	bl	8000fb8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e006      	b.n	8003bc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <RCCEx_PLL3_Config+0x15c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	ffff0007 	.word	0xffff0007

08003bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd f823 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	; 0x24
 8003c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f82c 	bl	8003c78 <UART_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fe7e 	bl	8004934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 ff05 	bl	8004a78 <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	b5b0      	push	{r4, r5, r7, lr}
 8003c7a:	b08e      	sub	sp, #56	; 0x38
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4bbf      	ldr	r3, [pc, #764]	; (8003fa4 <UART_SetConfig+0x32c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4ab5      	ldr	r2, [pc, #724]	; (8003fa8 <UART_SetConfig+0x330>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	4bb0      	ldr	r3, [pc, #704]	; (8003fac <UART_SetConfig+0x334>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f023 010f 	bic.w	r1, r3, #15
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4aa7      	ldr	r2, [pc, #668]	; (8003fb0 <UART_SetConfig+0x338>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d176      	bne.n	8003e04 <UART_SetConfig+0x18c>
 8003d16:	4ba7      	ldr	r3, [pc, #668]	; (8003fb4 <UART_SetConfig+0x33c>)
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d1e:	2b28      	cmp	r3, #40	; 0x28
 8003d20:	d86c      	bhi.n	8003dfc <UART_SetConfig+0x184>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0xb0>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003dcd 	.word	0x08003dcd
 8003d2c:	08003dfd 	.word	0x08003dfd
 8003d30:	08003dfd 	.word	0x08003dfd
 8003d34:	08003dfd 	.word	0x08003dfd
 8003d38:	08003dfd 	.word	0x08003dfd
 8003d3c:	08003dfd 	.word	0x08003dfd
 8003d40:	08003dfd 	.word	0x08003dfd
 8003d44:	08003dfd 	.word	0x08003dfd
 8003d48:	08003dd5 	.word	0x08003dd5
 8003d4c:	08003dfd 	.word	0x08003dfd
 8003d50:	08003dfd 	.word	0x08003dfd
 8003d54:	08003dfd 	.word	0x08003dfd
 8003d58:	08003dfd 	.word	0x08003dfd
 8003d5c:	08003dfd 	.word	0x08003dfd
 8003d60:	08003dfd 	.word	0x08003dfd
 8003d64:	08003dfd 	.word	0x08003dfd
 8003d68:	08003ddd 	.word	0x08003ddd
 8003d6c:	08003dfd 	.word	0x08003dfd
 8003d70:	08003dfd 	.word	0x08003dfd
 8003d74:	08003dfd 	.word	0x08003dfd
 8003d78:	08003dfd 	.word	0x08003dfd
 8003d7c:	08003dfd 	.word	0x08003dfd
 8003d80:	08003dfd 	.word	0x08003dfd
 8003d84:	08003dfd 	.word	0x08003dfd
 8003d88:	08003de5 	.word	0x08003de5
 8003d8c:	08003dfd 	.word	0x08003dfd
 8003d90:	08003dfd 	.word	0x08003dfd
 8003d94:	08003dfd 	.word	0x08003dfd
 8003d98:	08003dfd 	.word	0x08003dfd
 8003d9c:	08003dfd 	.word	0x08003dfd
 8003da0:	08003dfd 	.word	0x08003dfd
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003ded 	.word	0x08003ded
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003dfd 	.word	0x08003dfd
 8003db4:	08003dfd 	.word	0x08003dfd
 8003db8:	08003dfd 	.word	0x08003dfd
 8003dbc:	08003dfd 	.word	0x08003dfd
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dfd 	.word	0x08003dfd
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dd2:	e326      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dda:	e322      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003de2:	e31e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dea:	e31a      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003dec:	2320      	movs	r3, #32
 8003dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003df2:	e316      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfa:	e312      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e02:	e30e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <UART_SetConfig+0x340>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d130      	bne.n	8003e70 <UART_SetConfig+0x1f8>
 8003e0e:	4b69      	ldr	r3, [pc, #420]	; (8003fb4 <UART_SetConfig+0x33c>)
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d826      	bhi.n	8003e68 <UART_SetConfig+0x1f0>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x1a8>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e39 	.word	0x08003e39
 8003e24:	08003e41 	.word	0x08003e41
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e3e:	e2f0      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e46:	e2ec      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e4e:	e2e8      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e50:	2310      	movs	r3, #16
 8003e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e56:	e2e4      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e58:	2320      	movs	r3, #32
 8003e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e5e:	e2e0      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e60:	2340      	movs	r3, #64	; 0x40
 8003e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e66:	e2dc      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6e:	e2d8      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a51      	ldr	r2, [pc, #324]	; (8003fbc <UART_SetConfig+0x344>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d130      	bne.n	8003edc <UART_SetConfig+0x264>
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <UART_SetConfig+0x33c>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d826      	bhi.n	8003ed4 <UART_SetConfig+0x25c>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0x214>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003ea5 	.word	0x08003ea5
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eaa:	e2ba      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eb2:	e2b6      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eba:	e2b2      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ec2:	e2ae      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eca:	e2aa      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ed2:	e2a6      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eda:	e2a2      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a37      	ldr	r2, [pc, #220]	; (8003fc0 <UART_SetConfig+0x348>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d130      	bne.n	8003f48 <UART_SetConfig+0x2d0>
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <UART_SetConfig+0x33c>)
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d826      	bhi.n	8003f40 <UART_SetConfig+0x2c8>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x280>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f11 	.word	0x08003f11
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	08003f21 	.word	0x08003f21
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f16:	e284      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f1e:	e280      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f26:	e27c      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f2e:	e278      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f30:	2320      	movs	r3, #32
 8003f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f36:	e274      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f3e:	e270      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f46:	e26c      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <UART_SetConfig+0x34c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d142      	bne.n	8003fd8 <UART_SetConfig+0x360>
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <UART_SetConfig+0x33c>)
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d838      	bhi.n	8003fd0 <UART_SetConfig+0x358>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <UART_SetConfig+0x2ec>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f7d 	.word	0x08003f7d
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f82:	e24e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8a:	e24a      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f92:	e246      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f9a:	e242      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fa2:	e23e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003fa4:	cfff69f3 	.word	0xcfff69f3
 8003fa8:	58000c00 	.word	0x58000c00
 8003fac:	11fff4ff 	.word	0x11fff4ff
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40004800 	.word	0x40004800
 8003fc0:	40004c00 	.word	0x40004c00
 8003fc4:	40005000 	.word	0x40005000
 8003fc8:	2340      	movs	r3, #64	; 0x40
 8003fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fce:	e228      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd6:	e224      	b.n	8004422 <UART_SetConfig+0x7aa>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4ab1      	ldr	r2, [pc, #708]	; (80042a4 <UART_SetConfig+0x62c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d176      	bne.n	80040d0 <UART_SetConfig+0x458>
 8003fe2:	4bb1      	ldr	r3, [pc, #708]	; (80042a8 <UART_SetConfig+0x630>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fea:	2b28      	cmp	r3, #40	; 0x28
 8003fec:	d86c      	bhi.n	80040c8 <UART_SetConfig+0x450>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x37c>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004099 	.word	0x08004099
 8003ff8:	080040c9 	.word	0x080040c9
 8003ffc:	080040c9 	.word	0x080040c9
 8004000:	080040c9 	.word	0x080040c9
 8004004:	080040c9 	.word	0x080040c9
 8004008:	080040c9 	.word	0x080040c9
 800400c:	080040c9 	.word	0x080040c9
 8004010:	080040c9 	.word	0x080040c9
 8004014:	080040a1 	.word	0x080040a1
 8004018:	080040c9 	.word	0x080040c9
 800401c:	080040c9 	.word	0x080040c9
 8004020:	080040c9 	.word	0x080040c9
 8004024:	080040c9 	.word	0x080040c9
 8004028:	080040c9 	.word	0x080040c9
 800402c:	080040c9 	.word	0x080040c9
 8004030:	080040c9 	.word	0x080040c9
 8004034:	080040a9 	.word	0x080040a9
 8004038:	080040c9 	.word	0x080040c9
 800403c:	080040c9 	.word	0x080040c9
 8004040:	080040c9 	.word	0x080040c9
 8004044:	080040c9 	.word	0x080040c9
 8004048:	080040c9 	.word	0x080040c9
 800404c:	080040c9 	.word	0x080040c9
 8004050:	080040c9 	.word	0x080040c9
 8004054:	080040b1 	.word	0x080040b1
 8004058:	080040c9 	.word	0x080040c9
 800405c:	080040c9 	.word	0x080040c9
 8004060:	080040c9 	.word	0x080040c9
 8004064:	080040c9 	.word	0x080040c9
 8004068:	080040c9 	.word	0x080040c9
 800406c:	080040c9 	.word	0x080040c9
 8004070:	080040c9 	.word	0x080040c9
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040c9 	.word	0x080040c9
 800407c:	080040c9 	.word	0x080040c9
 8004080:	080040c9 	.word	0x080040c9
 8004084:	080040c9 	.word	0x080040c9
 8004088:	080040c9 	.word	0x080040c9
 800408c:	080040c9 	.word	0x080040c9
 8004090:	080040c9 	.word	0x080040c9
 8004094:	080040c1 	.word	0x080040c1
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409e:	e1c0      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a6:	e1bc      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ae:	e1b8      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b6:	e1b4      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040b8:	2320      	movs	r3, #32
 80040ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040be:	e1b0      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040c0:	2340      	movs	r3, #64	; 0x40
 80040c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c6:	e1ac      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ce:	e1a8      	b.n	8004422 <UART_SetConfig+0x7aa>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a75      	ldr	r2, [pc, #468]	; (80042ac <UART_SetConfig+0x634>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d130      	bne.n	800413c <UART_SetConfig+0x4c4>
 80040da:	4b73      	ldr	r3, [pc, #460]	; (80042a8 <UART_SetConfig+0x630>)
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d826      	bhi.n	8004134 <UART_SetConfig+0x4bc>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x474>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004105 	.word	0x08004105
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	08004115 	.word	0x08004115
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410a:	e18a      	b.n	8004422 <UART_SetConfig+0x7aa>
 800410c:	2304      	movs	r3, #4
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004112:	e186      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004114:	2308      	movs	r3, #8
 8004116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411a:	e182      	b.n	8004422 <UART_SetConfig+0x7aa>
 800411c:	2310      	movs	r3, #16
 800411e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004122:	e17e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004124:	2320      	movs	r3, #32
 8004126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412a:	e17a      	b.n	8004422 <UART_SetConfig+0x7aa>
 800412c:	2340      	movs	r3, #64	; 0x40
 800412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004132:	e176      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413a:	e172      	b.n	8004422 <UART_SetConfig+0x7aa>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5b      	ldr	r2, [pc, #364]	; (80042b0 <UART_SetConfig+0x638>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d130      	bne.n	80041a8 <UART_SetConfig+0x530>
 8004146:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <UART_SetConfig+0x630>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	2b05      	cmp	r3, #5
 8004150:	d826      	bhi.n	80041a0 <UART_SetConfig+0x528>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x4e0>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004171 	.word	0x08004171
 800415c:	08004179 	.word	0x08004179
 8004160:	08004181 	.word	0x08004181
 8004164:	08004189 	.word	0x08004189
 8004168:	08004191 	.word	0x08004191
 800416c:	08004199 	.word	0x08004199
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004176:	e154      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004178:	2304      	movs	r3, #4
 800417a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417e:	e150      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004180:	2308      	movs	r3, #8
 8004182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004186:	e14c      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004188:	2310      	movs	r3, #16
 800418a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800418e:	e148      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004190:	2320      	movs	r3, #32
 8004192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004196:	e144      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004198:	2340      	movs	r3, #64	; 0x40
 800419a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419e:	e140      	b.n	8004422 <UART_SetConfig+0x7aa>
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a6:	e13c      	b.n	8004422 <UART_SetConfig+0x7aa>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <UART_SetConfig+0x63c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f040 8082 	bne.w	80042b8 <UART_SetConfig+0x640>
 80041b4:	4b3c      	ldr	r3, [pc, #240]	; (80042a8 <UART_SetConfig+0x630>)
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041bc:	2b28      	cmp	r3, #40	; 0x28
 80041be:	d86d      	bhi.n	800429c <UART_SetConfig+0x624>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x550>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	0800426d 	.word	0x0800426d
 80041cc:	0800429d 	.word	0x0800429d
 80041d0:	0800429d 	.word	0x0800429d
 80041d4:	0800429d 	.word	0x0800429d
 80041d8:	0800429d 	.word	0x0800429d
 80041dc:	0800429d 	.word	0x0800429d
 80041e0:	0800429d 	.word	0x0800429d
 80041e4:	0800429d 	.word	0x0800429d
 80041e8:	08004275 	.word	0x08004275
 80041ec:	0800429d 	.word	0x0800429d
 80041f0:	0800429d 	.word	0x0800429d
 80041f4:	0800429d 	.word	0x0800429d
 80041f8:	0800429d 	.word	0x0800429d
 80041fc:	0800429d 	.word	0x0800429d
 8004200:	0800429d 	.word	0x0800429d
 8004204:	0800429d 	.word	0x0800429d
 8004208:	0800427d 	.word	0x0800427d
 800420c:	0800429d 	.word	0x0800429d
 8004210:	0800429d 	.word	0x0800429d
 8004214:	0800429d 	.word	0x0800429d
 8004218:	0800429d 	.word	0x0800429d
 800421c:	0800429d 	.word	0x0800429d
 8004220:	0800429d 	.word	0x0800429d
 8004224:	0800429d 	.word	0x0800429d
 8004228:	08004285 	.word	0x08004285
 800422c:	0800429d 	.word	0x0800429d
 8004230:	0800429d 	.word	0x0800429d
 8004234:	0800429d 	.word	0x0800429d
 8004238:	0800429d 	.word	0x0800429d
 800423c:	0800429d 	.word	0x0800429d
 8004240:	0800429d 	.word	0x0800429d
 8004244:	0800429d 	.word	0x0800429d
 8004248:	0800428d 	.word	0x0800428d
 800424c:	0800429d 	.word	0x0800429d
 8004250:	0800429d 	.word	0x0800429d
 8004254:	0800429d 	.word	0x0800429d
 8004258:	0800429d 	.word	0x0800429d
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800429d 	.word	0x0800429d
 8004268:	08004295 	.word	0x08004295
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004272:	e0d6      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800427a:	e0d2      	b.n	8004422 <UART_SetConfig+0x7aa>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004282:	e0ce      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800428a:	e0ca      	b.n	8004422 <UART_SetConfig+0x7aa>
 800428c:	2320      	movs	r3, #32
 800428e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004292:	e0c6      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004294:	2340      	movs	r3, #64	; 0x40
 8004296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429a:	e0c2      	b.n	8004422 <UART_SetConfig+0x7aa>
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a2:	e0be      	b.n	8004422 <UART_SetConfig+0x7aa>
 80042a4:	40011400 	.word	0x40011400
 80042a8:	58024400 	.word	0x58024400
 80042ac:	40007800 	.word	0x40007800
 80042b0:	40007c00 	.word	0x40007c00
 80042b4:	40011800 	.word	0x40011800
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4aad      	ldr	r2, [pc, #692]	; (8004574 <UART_SetConfig+0x8fc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d176      	bne.n	80043b0 <UART_SetConfig+0x738>
 80042c2:	4bad      	ldr	r3, [pc, #692]	; (8004578 <UART_SetConfig+0x900>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ca:	2b28      	cmp	r3, #40	; 0x28
 80042cc:	d86c      	bhi.n	80043a8 <UART_SetConfig+0x730>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0x65c>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004379 	.word	0x08004379
 80042d8:	080043a9 	.word	0x080043a9
 80042dc:	080043a9 	.word	0x080043a9
 80042e0:	080043a9 	.word	0x080043a9
 80042e4:	080043a9 	.word	0x080043a9
 80042e8:	080043a9 	.word	0x080043a9
 80042ec:	080043a9 	.word	0x080043a9
 80042f0:	080043a9 	.word	0x080043a9
 80042f4:	08004381 	.word	0x08004381
 80042f8:	080043a9 	.word	0x080043a9
 80042fc:	080043a9 	.word	0x080043a9
 8004300:	080043a9 	.word	0x080043a9
 8004304:	080043a9 	.word	0x080043a9
 8004308:	080043a9 	.word	0x080043a9
 800430c:	080043a9 	.word	0x080043a9
 8004310:	080043a9 	.word	0x080043a9
 8004314:	08004389 	.word	0x08004389
 8004318:	080043a9 	.word	0x080043a9
 800431c:	080043a9 	.word	0x080043a9
 8004320:	080043a9 	.word	0x080043a9
 8004324:	080043a9 	.word	0x080043a9
 8004328:	080043a9 	.word	0x080043a9
 800432c:	080043a9 	.word	0x080043a9
 8004330:	080043a9 	.word	0x080043a9
 8004334:	08004391 	.word	0x08004391
 8004338:	080043a9 	.word	0x080043a9
 800433c:	080043a9 	.word	0x080043a9
 8004340:	080043a9 	.word	0x080043a9
 8004344:	080043a9 	.word	0x080043a9
 8004348:	080043a9 	.word	0x080043a9
 800434c:	080043a9 	.word	0x080043a9
 8004350:	080043a9 	.word	0x080043a9
 8004354:	08004399 	.word	0x08004399
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043a9 	.word	0x080043a9
 8004360:	080043a9 	.word	0x080043a9
 8004364:	080043a9 	.word	0x080043a9
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043a9 	.word	0x080043a9
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043a1 	.word	0x080043a1
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437e:	e050      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004380:	2304      	movs	r3, #4
 8004382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004386:	e04c      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004388:	2308      	movs	r3, #8
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438e:	e048      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004390:	2310      	movs	r3, #16
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004396:	e044      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004398:	2320      	movs	r3, #32
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439e:	e040      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a6:	e03c      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ae:	e038      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a71      	ldr	r2, [pc, #452]	; (800457c <UART_SetConfig+0x904>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d130      	bne.n	800441c <UART_SetConfig+0x7a4>
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <UART_SetConfig+0x900>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d826      	bhi.n	8004414 <UART_SetConfig+0x79c>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x754>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043e5 	.word	0x080043e5
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	2302      	movs	r3, #2
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ea:	e01a      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043ec:	2304      	movs	r3, #4
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f2:	e016      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043f4:	2308      	movs	r3, #8
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fa:	e012      	b.n	8004422 <UART_SetConfig+0x7aa>
 80043fc:	2310      	movs	r3, #16
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004402:	e00e      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004404:	2320      	movs	r3, #32
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440a:	e00a      	b.n	8004422 <UART_SetConfig+0x7aa>
 800440c:	2340      	movs	r3, #64	; 0x40
 800440e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004412:	e006      	b.n	8004422 <UART_SetConfig+0x7aa>
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e002      	b.n	8004422 <UART_SetConfig+0x7aa>
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a55      	ldr	r2, [pc, #340]	; (800457c <UART_SetConfig+0x904>)
 8004428:	4293      	cmp	r3, r2
 800442a:	f040 80f0 	bne.w	800460e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800442e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004432:	2b20      	cmp	r3, #32
 8004434:	dc46      	bgt.n	80044c4 <UART_SetConfig+0x84c>
 8004436:	2b02      	cmp	r3, #2
 8004438:	db75      	blt.n	8004526 <UART_SetConfig+0x8ae>
 800443a:	3b02      	subs	r3, #2
 800443c:	2b1e      	cmp	r3, #30
 800443e:	d872      	bhi.n	8004526 <UART_SetConfig+0x8ae>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x7d0>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	080044cb 	.word	0x080044cb
 800444c:	08004527 	.word	0x08004527
 8004450:	080044d3 	.word	0x080044d3
 8004454:	08004527 	.word	0x08004527
 8004458:	08004527 	.word	0x08004527
 800445c:	08004527 	.word	0x08004527
 8004460:	080044e3 	.word	0x080044e3
 8004464:	08004527 	.word	0x08004527
 8004468:	08004527 	.word	0x08004527
 800446c:	08004527 	.word	0x08004527
 8004470:	08004527 	.word	0x08004527
 8004474:	08004527 	.word	0x08004527
 8004478:	08004527 	.word	0x08004527
 800447c:	08004527 	.word	0x08004527
 8004480:	080044f3 	.word	0x080044f3
 8004484:	08004527 	.word	0x08004527
 8004488:	08004527 	.word	0x08004527
 800448c:	08004527 	.word	0x08004527
 8004490:	08004527 	.word	0x08004527
 8004494:	08004527 	.word	0x08004527
 8004498:	08004527 	.word	0x08004527
 800449c:	08004527 	.word	0x08004527
 80044a0:	08004527 	.word	0x08004527
 80044a4:	08004527 	.word	0x08004527
 80044a8:	08004527 	.word	0x08004527
 80044ac:	08004527 	.word	0x08004527
 80044b0:	08004527 	.word	0x08004527
 80044b4:	08004527 	.word	0x08004527
 80044b8:	08004527 	.word	0x08004527
 80044bc:	08004527 	.word	0x08004527
 80044c0:	08004519 	.word	0x08004519
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d02a      	beq.n	800451e <UART_SetConfig+0x8a6>
 80044c8:	e02d      	b.n	8004526 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80044ca:	f7fe ff63 	bl	8003394 <HAL_RCCEx_GetD3PCLK1Freq>
 80044ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044d0:	e02f      	b.n	8004532 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044d2:	f107 0314 	add.w	r3, r7, #20
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe ff72 	bl	80033c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044e0:	e027      	b.n	8004532 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff f8be 	bl	8003668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f0:	e01f      	b.n	8004532 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <UART_SetConfig+0x900>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <UART_SetConfig+0x900>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	08db      	lsrs	r3, r3, #3
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <UART_SetConfig+0x908>)
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004510:	e00f      	b.n	8004532 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <UART_SetConfig+0x908>)
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004516:	e00c      	b.n	8004532 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <UART_SetConfig+0x90c>)
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800451c:	e009      	b.n	8004532 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004524:	e005      	b.n	8004532 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004530:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 81e6 	beq.w	8004906 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <UART_SetConfig+0x910>)
 8004540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004544:	461a      	mov	r2, r3
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	fbb3 f3f2 	udiv	r3, r3, r2
 800454c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	429a      	cmp	r2, r3
 800455c:	d305      	bcc.n	800456a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004570:	e1c9      	b.n	8004906 <UART_SetConfig+0xc8e>
 8004572:	bf00      	nop
 8004574:	40011c00 	.word	0x40011c00
 8004578:	58024400 	.word	0x58024400
 800457c:	58000c00 	.word	0x58000c00
 8004580:	03d09000 	.word	0x03d09000
 8004584:	003d0900 	.word	0x003d0900
 8004588:	080051a0 	.word	0x080051a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	4618      	mov	r0, r3
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	4ac1      	ldr	r2, [pc, #772]	; (80048a0 <UART_SetConfig+0xc28>)
 800459a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	f7fb fea2 	bl	80002ec <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	020b      	lsls	r3, r1, #8
 80045ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045be:	0202      	lsls	r2, r0, #8
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	6849      	ldr	r1, [r1, #4]
 80045c4:	0849      	lsrs	r1, r1, #1
 80045c6:	4608      	mov	r0, r1
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	1814      	adds	r4, r2, r0
 80045ce:	eb43 0501 	adc.w	r5, r3, r1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	4620      	mov	r0, r4
 80045de:	4629      	mov	r1, r5
 80045e0:	f7fb fe84 	bl	80002ec <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f2:	d308      	bcc.n	8004606 <UART_SetConfig+0x98e>
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d204      	bcs.n	8004606 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e17f      	b.n	8004906 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800460c:	e17b      	b.n	8004906 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	f040 80bd 	bne.w	8004794 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800461a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800461e:	2b20      	cmp	r3, #32
 8004620:	dc48      	bgt.n	80046b4 <UART_SetConfig+0xa3c>
 8004622:	2b00      	cmp	r3, #0
 8004624:	db7b      	blt.n	800471e <UART_SetConfig+0xaa6>
 8004626:	2b20      	cmp	r3, #32
 8004628:	d879      	bhi.n	800471e <UART_SetConfig+0xaa6>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x9b8>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	080046bb 	.word	0x080046bb
 8004634:	080046c3 	.word	0x080046c3
 8004638:	0800471f 	.word	0x0800471f
 800463c:	0800471f 	.word	0x0800471f
 8004640:	080046cb 	.word	0x080046cb
 8004644:	0800471f 	.word	0x0800471f
 8004648:	0800471f 	.word	0x0800471f
 800464c:	0800471f 	.word	0x0800471f
 8004650:	080046db 	.word	0x080046db
 8004654:	0800471f 	.word	0x0800471f
 8004658:	0800471f 	.word	0x0800471f
 800465c:	0800471f 	.word	0x0800471f
 8004660:	0800471f 	.word	0x0800471f
 8004664:	0800471f 	.word	0x0800471f
 8004668:	0800471f 	.word	0x0800471f
 800466c:	0800471f 	.word	0x0800471f
 8004670:	080046eb 	.word	0x080046eb
 8004674:	0800471f 	.word	0x0800471f
 8004678:	0800471f 	.word	0x0800471f
 800467c:	0800471f 	.word	0x0800471f
 8004680:	0800471f 	.word	0x0800471f
 8004684:	0800471f 	.word	0x0800471f
 8004688:	0800471f 	.word	0x0800471f
 800468c:	0800471f 	.word	0x0800471f
 8004690:	0800471f 	.word	0x0800471f
 8004694:	0800471f 	.word	0x0800471f
 8004698:	0800471f 	.word	0x0800471f
 800469c:	0800471f 	.word	0x0800471f
 80046a0:	0800471f 	.word	0x0800471f
 80046a4:	0800471f 	.word	0x0800471f
 80046a8:	0800471f 	.word	0x0800471f
 80046ac:	0800471f 	.word	0x0800471f
 80046b0:	08004711 	.word	0x08004711
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d02e      	beq.n	8004716 <UART_SetConfig+0xa9e>
 80046b8:	e031      	b.n	800471e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ba:	f7fd ff33 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80046be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046c0:	e033      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c2:	f7fd ff45 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80046c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046c8:	e02f      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fe76 	bl	80033c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046d8:	e027      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe ffc2 	bl	8003668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046e8:	e01f      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ea:	4b6e      	ldr	r3, [pc, #440]	; (80048a4 <UART_SetConfig+0xc2c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046f6:	4b6b      	ldr	r3, [pc, #428]	; (80048a4 <UART_SetConfig+0xc2c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	08db      	lsrs	r3, r3, #3
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	4a69      	ldr	r2, [pc, #420]	; (80048a8 <UART_SetConfig+0xc30>)
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004708:	e00f      	b.n	800472a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800470a:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <UART_SetConfig+0xc30>)
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800470e:	e00c      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <UART_SetConfig+0xc34>)
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004714:	e009      	b.n	800472a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800471c:	e005      	b.n	800472a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80ea 	beq.w	8004906 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	4a5a      	ldr	r2, [pc, #360]	; (80048a0 <UART_SetConfig+0xc28>)
 8004738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800473c:	461a      	mov	r2, r3
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	fbb3 f3f2 	udiv	r3, r3, r2
 8004744:	005a      	lsls	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d916      	bls.n	800478c <UART_SetConfig+0xb14>
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d212      	bcs.n	800478c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	b29b      	uxth	r3, r3
 800476a:	f023 030f 	bic.w	r3, r3, #15
 800476e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	b29a      	uxth	r2, r3
 800477c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800477e:	4313      	orrs	r3, r2
 8004780:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e0bc      	b.n	8004906 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004792:	e0b8      	b.n	8004906 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004798:	2b20      	cmp	r3, #32
 800479a:	dc4b      	bgt.n	8004834 <UART_SetConfig+0xbbc>
 800479c:	2b00      	cmp	r3, #0
 800479e:	f2c0 8087 	blt.w	80048b0 <UART_SetConfig+0xc38>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	f200 8084 	bhi.w	80048b0 <UART_SetConfig+0xc38>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0xb38>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	0800483b 	.word	0x0800483b
 80047b4:	08004843 	.word	0x08004843
 80047b8:	080048b1 	.word	0x080048b1
 80047bc:	080048b1 	.word	0x080048b1
 80047c0:	0800484b 	.word	0x0800484b
 80047c4:	080048b1 	.word	0x080048b1
 80047c8:	080048b1 	.word	0x080048b1
 80047cc:	080048b1 	.word	0x080048b1
 80047d0:	0800485b 	.word	0x0800485b
 80047d4:	080048b1 	.word	0x080048b1
 80047d8:	080048b1 	.word	0x080048b1
 80047dc:	080048b1 	.word	0x080048b1
 80047e0:	080048b1 	.word	0x080048b1
 80047e4:	080048b1 	.word	0x080048b1
 80047e8:	080048b1 	.word	0x080048b1
 80047ec:	080048b1 	.word	0x080048b1
 80047f0:	0800486b 	.word	0x0800486b
 80047f4:	080048b1 	.word	0x080048b1
 80047f8:	080048b1 	.word	0x080048b1
 80047fc:	080048b1 	.word	0x080048b1
 8004800:	080048b1 	.word	0x080048b1
 8004804:	080048b1 	.word	0x080048b1
 8004808:	080048b1 	.word	0x080048b1
 800480c:	080048b1 	.word	0x080048b1
 8004810:	080048b1 	.word	0x080048b1
 8004814:	080048b1 	.word	0x080048b1
 8004818:	080048b1 	.word	0x080048b1
 800481c:	080048b1 	.word	0x080048b1
 8004820:	080048b1 	.word	0x080048b1
 8004824:	080048b1 	.word	0x080048b1
 8004828:	080048b1 	.word	0x080048b1
 800482c:	080048b1 	.word	0x080048b1
 8004830:	08004891 	.word	0x08004891
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d02e      	beq.n	8004896 <UART_SetConfig+0xc1e>
 8004838:	e03a      	b.n	80048b0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483a:	f7fd fe73 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 800483e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004840:	e03c      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004842:	f7fd fe85 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8004846:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004848:	e038      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fdb6 	bl	80033c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004858:	e030      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe ff02 	bl	8003668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004868:	e028      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800486a:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <UART_SetConfig+0xc2c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <UART_SetConfig+0xc2c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	08db      	lsrs	r3, r3, #3
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <UART_SetConfig+0xc30>)
 8004882:	fa22 f303 	lsr.w	r3, r2, r3
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004888:	e018      	b.n	80048bc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <UART_SetConfig+0xc30>)
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800488e:	e015      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <UART_SetConfig+0xc34>)
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004894:	e012      	b.n	80048bc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800489c:	e00e      	b.n	80048bc <UART_SetConfig+0xc44>
 800489e:	bf00      	nop
 80048a0:	080051a0 	.word	0x080051a0
 80048a4:	58024400 	.word	0x58024400
 80048a8:	03d09000 	.word	0x03d09000
 80048ac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80048ba:	bf00      	nop
    }

    if (pclk != 0U)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d021      	beq.n	8004906 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <UART_SetConfig+0xcb8>)
 80048c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d909      	bls.n	8004900 <UART_SetConfig+0xc88>
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d205      	bcs.n	8004900 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	e002      	b.n	8004906 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004922:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004926:	4618      	mov	r0, r3
 8004928:	3738      	adds	r7, #56	; 0x38
 800492a:	46bd      	mov	sp, r7
 800492c:	bdb0      	pop	{r4, r5, r7, pc}
 800492e:	bf00      	nop
 8004930:	080051a0 	.word	0x080051a0

08004934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d10a      	bne.n	8004a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a88:	f7fc fa96 	bl	8000fb8 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10e      	bne.n	8004aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f82f 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e025      	b.n	8004b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d10e      	bne.n	8004ae6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f819 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e00f      	b.n	8004b06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b09c      	sub	sp, #112	; 0x70
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	e0a9      	b.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	f000 80a5 	beq.w	8004c74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fc fa45 	bl	8000fb8 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d140      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b54:	667b      	str	r3, [r7, #100]	; 0x64
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	663b      	str	r3, [r7, #96]	; 0x60
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e5      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e069      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d051      	beq.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d149      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c3c:	623a      	str	r2, [r7, #32]
 8004c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e010      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	f43f af46 	beq.w	8004b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3770      	adds	r7, #112	; 0x70
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e027      	b.n	8004d04 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ce2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e02d      	b.n	8004d84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f84f 	bl	8004e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e02d      	b.n	8004e00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f811 	bl	8004e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e28:	e031      	b.n	8004e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e2e:	2310      	movs	r3, #16
 8004e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	0e5b      	lsrs	r3, r3, #25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	0f5b      	lsrs	r3, r3, #29
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e52:	7bbb      	ldrb	r3, [r7, #14]
 8004e54:	7b3a      	ldrb	r2, [r7, #12]
 8004e56:	4911      	ldr	r1, [pc, #68]	; (8004e9c <UARTEx_SetNbDataToProcess+0x94>)
 8004e58:	5c8a      	ldrb	r2, [r1, r2]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e5e:	7b3a      	ldrb	r2, [r7, #12]
 8004e60:	490f      	ldr	r1, [pc, #60]	; (8004ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8004e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	7b7a      	ldrb	r2, [r7, #13]
 8004e74:	4909      	ldr	r1, [pc, #36]	; (8004e9c <UARTEx_SetNbDataToProcess+0x94>)
 8004e76:	5c8a      	ldrb	r2, [r1, r2]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e7c:	7b7a      	ldrb	r2, [r7, #13]
 8004e7e:	4908      	ldr	r1, [pc, #32]	; (8004ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8004e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	080051b8 	.word	0x080051b8
 8004ea0:	080051c0 	.word	0x080051c0

08004ea4 <arm_mat_mult_f32>:
 8004ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	8844      	ldrh	r4, [r0, #2]
 8004eac:	880b      	ldrh	r3, [r1, #0]
 8004eae:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8004eb2:	8800      	ldrh	r0, [r0, #0]
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004eba:	4605      	mov	r5, r0
 8004ebc:	9003      	str	r0, [sp, #12]
 8004ebe:	6850      	ldr	r0, [r2, #4]
 8004ec0:	9004      	str	r0, [sp, #16]
 8004ec2:	f040 8091 	bne.w	8004fe8 <arm_mat_mult_f32+0x144>
 8004ec6:	8810      	ldrh	r0, [r2, #0]
 8004ec8:	42a8      	cmp	r0, r5
 8004eca:	f040 808d 	bne.w	8004fe8 <arm_mat_mult_f32+0x144>
 8004ece:	8852      	ldrh	r2, [r2, #2]
 8004ed0:	454a      	cmp	r2, r9
 8004ed2:	f040 8089 	bne.w	8004fe8 <arm_mat_mult_f32+0x144>
 8004ed6:	f003 0003 	and.w	r0, r3, #3
 8004eda:	089a      	lsrs	r2, r3, #2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	684d      	ldr	r5, [r1, #4]
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	1e54      	subs	r4, r2, #1
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	9305      	str	r3, [sp, #20]
 8004ee8:	1e7a      	subs	r2, r7, #1
 8004eea:	2300      	movs	r3, #0
 8004eec:	9000      	str	r0, [sp, #0]
 8004eee:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	b2a3      	uxth	r3, r4
 8004ef8:	3201      	adds	r2, #1
 8004efa:	ea4f 0489 	mov.w	r4, r9, lsl #2
 8004efe:	3301      	adds	r3, #1
 8004f00:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8004f04:	fb00 fb03 	mul.w	fp, r0, r3
 8004f08:	eb0c 1803 	add.w	r8, ip, r3, lsl #4
 8004f0c:	f8cd a004 	str.w	sl, [sp, #4]
 8004f10:	46da      	mov	sl, fp
 8004f12:	468b      	mov	fp, r1
 8004f14:	4631      	mov	r1, r6
 8004f16:	9b04      	ldr	r3, [sp, #16]
 8004f18:	2700      	movs	r7, #0
 8004f1a:	9a02      	ldr	r2, [sp, #8]
 8004f1c:	f108 0610 	add.w	r6, r8, #16
 8004f20:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8004f24:	2900      	cmp	r1, #0
 8004f26:	d05b      	beq.n	8004fe0 <arm_mat_mult_f32+0x13c>
 8004f28:	f10c 0010 	add.w	r0, ip, #16
 8004f2c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004ff4 <arm_mat_mult_f32+0x150>
 8004f30:	462a      	mov	r2, r5
 8004f32:	ed50 6a04 	vldr	s13, [r0, #-16]
 8004f36:	1913      	adds	r3, r2, r4
 8004f38:	ed92 7a00 	vldr	s14, [r2]
 8004f3c:	3010      	adds	r0, #16
 8004f3e:	edd3 5a00 	vldr	s11, [r3]
 8004f42:	4423      	add	r3, r4
 8004f44:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004f48:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
 8004f4c:	ed93 6a00 	vldr	s12, [r3]
 8004f50:	4423      	add	r3, r4
 8004f52:	ee26 5aa5 	vmul.f32	s10, s13, s11
 8004f56:	ed50 5a06 	vldr	s11, [r0, #-24]	; 0xffffffe8
 8004f5a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004f5e:	ed93 7a00 	vldr	s14, [r3]
 8004f62:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004f66:	ed50 5a05 	vldr	s11, [r0, #-20]	; 0xffffffec
 8004f6a:	42b0      	cmp	r0, r6
 8004f6c:	eb03 0204 	add.w	r2, r3, r4
 8004f70:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004f74:	ee25 7a87 	vmul.f32	s14, s11, s14
 8004f78:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f80:	d1d7      	bne.n	8004f32 <arm_mat_mult_f32+0x8e>
 8004f82:	4455      	add	r5, sl
 8004f84:	4643      	mov	r3, r8
 8004f86:	9a00      	ldr	r2, [sp, #0]
 8004f88:	b162      	cbz	r2, 8004fa4 <arm_mat_mult_f32+0x100>
 8004f8a:	9a01      	ldr	r2, [sp, #4]
 8004f8c:	189a      	adds	r2, r3, r2
 8004f8e:	ecf3 6a01 	vldmia	r3!, {s13}
 8004f92:	ed95 7a00 	vldr	s14, [r5]
 8004f96:	4425      	add	r5, r4
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8004f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fa2:	d1f4      	bne.n	8004f8e <arm_mat_mult_f32+0xea>
 8004fa4:	3701      	adds	r7, #1
 8004fa6:	ecee 7a01 	vstmia	lr!, {s15}
 8004faa:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004fae:	b2bf      	uxth	r7, r7
 8004fb0:	454f      	cmp	r7, r9
 8004fb2:	eb03 0587 	add.w	r5, r3, r7, lsl #2
 8004fb6:	d1b5      	bne.n	8004f24 <arm_mat_mult_f32+0x80>
 8004fb8:	9802      	ldr	r0, [sp, #8]
 8004fba:	9a03      	ldr	r2, [sp, #12]
 8004fbc:	4438      	add	r0, r7
 8004fbe:	9d05      	ldr	r5, [sp, #20]
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	4607      	mov	r7, r0
 8004fc4:	44ac      	add	ip, r5
 8004fc6:	44a8      	add	r8, r5
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	461d      	mov	r5, r3
 8004fcc:	b2bb      	uxth	r3, r7
 8004fce:	9203      	str	r2, [sp, #12]
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	d19f      	bne.n	8004f16 <arm_mat_mult_f32+0x72>
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	b240      	sxtb	r0, r0
 8004fda:	b007      	add	sp, #28
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	4663      	mov	r3, ip
 8004fe2:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004ff4 <arm_mat_mult_f32+0x150>
 8004fe6:	e7ce      	b.n	8004f86 <arm_mat_mult_f32+0xe2>
 8004fe8:	20fd      	movs	r0, #253	; 0xfd
 8004fea:	b240      	sxtb	r0, r0
 8004fec:	b007      	add	sp, #28
 8004fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff2:	bf00      	nop
 8004ff4:	00000000 	.word	0x00000000

08004ff8 <arm_mat_init_f32>:
 8004ff8:	8001      	strh	r1, [r0, #0]
 8004ffa:	8042      	strh	r2, [r0, #2]
 8004ffc:	6043      	str	r3, [r0, #4]
 8004ffe:	4770      	bx	lr

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4d0d      	ldr	r5, [pc, #52]	; (8005038 <__libc_init_array+0x38>)
 8005004:	4c0d      	ldr	r4, [pc, #52]	; (800503c <__libc_init_array+0x3c>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	2600      	movs	r6, #0
 800500c:	42a6      	cmp	r6, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	4d0b      	ldr	r5, [pc, #44]	; (8005040 <__libc_init_array+0x40>)
 8005012:	4c0c      	ldr	r4, [pc, #48]	; (8005044 <__libc_init_array+0x44>)
 8005014:	f000 f886 	bl	8005124 <_init>
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	2600      	movs	r6, #0
 800501e:	42a6      	cmp	r6, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f855 3b04 	ldr.w	r3, [r5], #4
 8005028:	4798      	blx	r3
 800502a:	3601      	adds	r6, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005032:	4798      	blx	r3
 8005034:	3601      	adds	r6, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	080051d0 	.word	0x080051d0
 800503c:	080051d0 	.word	0x080051d0
 8005040:	080051d0 	.word	0x080051d0
 8005044:	080051d4 	.word	0x080051d4

08005048 <free>:
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <free+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f000 b80b 	b.w	8005068 <_free_r>
 8005052:	bf00      	nop
 8005054:	24000010 	.word	0x24000010

08005058 <memset>:
 8005058:	4402      	add	r2, r0
 800505a:	4603      	mov	r3, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	d100      	bne.n	8005062 <memset+0xa>
 8005060:	4770      	bx	lr
 8005062:	f803 1b01 	strb.w	r1, [r3], #1
 8005066:	e7f9      	b.n	800505c <memset+0x4>

08005068 <_free_r>:
 8005068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800506a:	2900      	cmp	r1, #0
 800506c:	d048      	beq.n	8005100 <_free_r+0x98>
 800506e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005072:	9001      	str	r0, [sp, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f1a1 0404 	sub.w	r4, r1, #4
 800507a:	bfb8      	it	lt
 800507c:	18e4      	addlt	r4, r4, r3
 800507e:	f000 f843 	bl	8005108 <__malloc_lock>
 8005082:	4a20      	ldr	r2, [pc, #128]	; (8005104 <_free_r+0x9c>)
 8005084:	9801      	ldr	r0, [sp, #4]
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	4615      	mov	r5, r2
 800508a:	b933      	cbnz	r3, 800509a <_free_r+0x32>
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	6014      	str	r4, [r2, #0]
 8005090:	b003      	add	sp, #12
 8005092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005096:	f000 b83d 	b.w	8005114 <__malloc_unlock>
 800509a:	42a3      	cmp	r3, r4
 800509c:	d90b      	bls.n	80050b6 <_free_r+0x4e>
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	1862      	adds	r2, r4, r1
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bf04      	itt	eq
 80050a6:	681a      	ldreq	r2, [r3, #0]
 80050a8:	685b      	ldreq	r3, [r3, #4]
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	bf04      	itt	eq
 80050ae:	1852      	addeq	r2, r2, r1
 80050b0:	6022      	streq	r2, [r4, #0]
 80050b2:	602c      	str	r4, [r5, #0]
 80050b4:	e7ec      	b.n	8005090 <_free_r+0x28>
 80050b6:	461a      	mov	r2, r3
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	b10b      	cbz	r3, 80050c0 <_free_r+0x58>
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d9fa      	bls.n	80050b6 <_free_r+0x4e>
 80050c0:	6811      	ldr	r1, [r2, #0]
 80050c2:	1855      	adds	r5, r2, r1
 80050c4:	42a5      	cmp	r5, r4
 80050c6:	d10b      	bne.n	80050e0 <_free_r+0x78>
 80050c8:	6824      	ldr	r4, [r4, #0]
 80050ca:	4421      	add	r1, r4
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	d1dd      	bne.n	8005090 <_free_r+0x28>
 80050d4:	681c      	ldr	r4, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	6053      	str	r3, [r2, #4]
 80050da:	4421      	add	r1, r4
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	e7d7      	b.n	8005090 <_free_r+0x28>
 80050e0:	d902      	bls.n	80050e8 <_free_r+0x80>
 80050e2:	230c      	movs	r3, #12
 80050e4:	6003      	str	r3, [r0, #0]
 80050e6:	e7d3      	b.n	8005090 <_free_r+0x28>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf04      	itt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	6063      	str	r3, [r4, #4]
 80050f6:	bf04      	itt	eq
 80050f8:	1949      	addeq	r1, r1, r5
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	6054      	str	r4, [r2, #4]
 80050fe:	e7c7      	b.n	8005090 <_free_r+0x28>
 8005100:	b003      	add	sp, #12
 8005102:	bd30      	pop	{r4, r5, pc}
 8005104:	24000090 	.word	0x24000090

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f000 b809 	b.w	8005120 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	2400012c 	.word	0x2400012c

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f000 b804 	b.w	8005122 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	2400012c 	.word	0x2400012c

08005120 <__retarget_lock_acquire_recursive>:
 8005120:	4770      	bx	lr

08005122 <__retarget_lock_release_recursive>:
 8005122:	4770      	bx	lr

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
