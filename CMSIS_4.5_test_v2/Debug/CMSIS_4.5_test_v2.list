
CMSIS_4.5_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  24000010  080051cc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c0  080051cc  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017152  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002557  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a78  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000009d0  00000000  00000000  0003a160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f058  00000000  00000000  0003ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dbec  00000000  00000000  00069b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013419d  00000000  00000000  00077774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c3  00000000  00000000  001ab911  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002aac  00000000  00000000  001ab9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005048 	.word	0x08005048

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005048 	.word	0x08005048

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <mat_f32_check_equal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

arm_status mat_f32_check_equal(arm_matrix_instance_f32 matrixA, arm_matrix_instance_f32 matrixB) {
 80005e4:	b490      	push	{r4, r7}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	f107 0408 	add.w	r4, r7, #8
 80005ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80005f2:	4639      	mov	r1, r7
 80005f4:	e881 000c 	stmia.w	r1, {r2, r3}
	 * Returns ARM_MATH_TEST_FAILURE if matrices aren't equal
	 *
	 * */

	// Check if the rows and cols match up in number
	int test_nRows = (matrixA.numRows == matrixB.numRows);
 80005f8:	893a      	ldrh	r2, [r7, #8]
 80005fa:	883b      	ldrh	r3, [r7, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	61bb      	str	r3, [r7, #24]
	int test_nCols = (matrixA.numCols == matrixB.numCols);
 8000608:	897a      	ldrh	r2, [r7, #10]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	429a      	cmp	r2, r3
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	617b      	str	r3, [r7, #20]

	// If there's a mismatch, then return ARM_MATH_SIZE_MISMATCH immediately
	if (test_nRows * test_nCols == 0) {
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <mat_f32_check_equal+0x46>
		return ARM_MATH_SIZE_MISMATCH;
 8000624:	f06f 0302 	mvn.w	r3, #2
 8000628:	e021      	b.n	800066e <mat_f32_check_equal+0x8a>
	}

	// Since rows and cols match, we need to check every entry
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e016      	b.n	800065e <mat_f32_check_equal+0x7a>
		if (matrixA.pData[i] != matrixB.pData[i]) {
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	ed93 7a00 	vldr	s14, [r3]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eeb4 7a67 	vcmp.f32	s14, s15
 800064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000650:	d002      	beq.n	8000658 <mat_f32_check_equal+0x74>
			return ARM_MATH_TEST_FAILURE;
 8000652:	f06f 0305 	mvn.w	r3, #5
 8000656:	e00a      	b.n	800066e <mat_f32_check_equal+0x8a>
	for (int i = 0; i < (matrixA.numRows) * (matrixA.numCols); i++) {
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	3301      	adds	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	893b      	ldrh	r3, [r7, #8]
 8000660:	897a      	ldrh	r2, [r7, #10]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbe1      	blt.n	8000630 <mat_f32_check_equal+0x4c>
		}
	}

	// If it's fine, then return ARM_MATH_SUCCESS
	return ARM_MATH_SUCCESS;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bc90      	pop	{r4, r7}
 8000676:	4770      	bx	lr

08000678 <create_data_matrix_f32>:
	// Now offset the input vector by the mean value
	arm_offset_f32(dataVector, meanValue, demeanedVector, (uint32_t) WINDOW_SIZE);

}

arm_status create_data_matrix_f32(arm_matrix_instance_f32* uninitialised_matrix, int numOfArrays, ...) {
 8000678:	b40e      	push	{r1, r2, r3}
 800067a:	b5b0      	push	{r4, r5, r7, lr}
 800067c:	b08b      	sub	sp, #44	; 0x2c
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	466b      	mov	r3, sp
 8000684:	461d      	mov	r5, r3
	 * 		(eg: n = 4 matches column 3: Column 3 has the 4th data entry for XAccel, YAccel, ZAccel, Altitude, Pressure, Temp)
	 *
	 * Eg: create_data_matrix_f32(dummy_matrix, 3, XAccelVector[WINDOW_SIZE], YAccelVector[WINDOW_SIZE], ZAccelVector[WINDOW_SIZE]);
	 * */
	// if numOfArrays != NUM_OF_VARIABLES, then return size mismatch immediately
	if (numOfArrays != NUM_OF_VARIABLES) {
 8000686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000688:	2b03      	cmp	r3, #3
 800068a:	d002      	beq.n	8000692 <create_data_matrix_f32+0x1a>
		return ARM_MATH_SIZE_MISMATCH;
 800068c:	f06f 0302 	mvn.w	r3, #2
 8000690:	e05f      	b.n	8000752 <create_data_matrix_f32+0xda>
	}
	// Declare variable argument variables and other variables
	va_list valist;
	int outputVector_size = WINDOW_SIZE * numOfArrays;
 8000692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	61fb      	str	r3, [r7, #28]
	float32_t outputVector[outputVector_size];
 800069c:	69fc      	ldr	r4, [r7, #28]
 800069e:	1e63      	subs	r3, r4, #1
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	4623      	mov	r3, r4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f04f 0100 	mov.w	r1, #0
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	014b      	lsls	r3, r1, #5
 80006b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006b8:	0142      	lsls	r2, r0, #5
 80006ba:	4623      	mov	r3, r4
 80006bc:	4618      	mov	r0, r3
 80006be:	f04f 0100 	mov.w	r1, #0
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	f04f 0300 	mov.w	r3, #0
 80006ca:	014b      	lsls	r3, r1, #5
 80006cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80006d0:	0142      	lsls	r2, r0, #5
 80006d2:	4623      	mov	r3, r4
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	3307      	adds	r3, #7
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	ebad 0d03 	sub.w	sp, sp, r3
 80006e0:	466b      	mov	r3, sp
 80006e2:	3303      	adds	r3, #3
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	617b      	str	r3, [r7, #20]

	// Start accessing the arguments
	va_start(valist, numOfArrays);
 80006ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ee:	60fb      	str	r3, [r7, #12]

	// Since all arguments from here should be float32_t arrays, declare a dummy array to store it
	float32_t* argument = NULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < numOfArrays; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
 80006f8:	e01f      	b.n	800073a <create_data_matrix_f32+0xc2>
		// Get next argument
		argument = va_arg(valist, float32_t*);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1d1a      	adds	r2, r3, #4
 80006fe:	60fa      	str	r2, [r7, #12]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	613b      	str	r3, [r7, #16]
//		if ((sizeof(argument))/(sizeof(float32_t)) != WINDOW_SIZE) {
//			return ARM_MATH_SIZE_MISMATCH;
//		}

		// Add it to the output array
		for (int j = 0; j < WINDOW_SIZE; j++) {
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
 8000708:	e011      	b.n	800072e <create_data_matrix_f32+0xb6>
			outputVector[i * WINDOW_SIZE + j] = argument[j];
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	18d1      	adds	r1, r2, r3
 8000712:	6a3a      	ldr	r2, [r7, #32]
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	441a      	add	r2, r3
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	4413      	add	r3, r2
 800071e:	680a      	ldr	r2, [r1, #0]
 8000720:	6979      	ldr	r1, [r7, #20]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < WINDOW_SIZE; j++) {
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	3301      	adds	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	2b08      	cmp	r3, #8
 8000732:	ddea      	ble.n	800070a <create_data_matrix_f32+0x92>
	for (int i = 0; i < numOfArrays; i++) {
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	3301      	adds	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	6a3a      	ldr	r2, [r7, #32]
 800073c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073e:	429a      	cmp	r2, r3
 8000740:	dbdb      	blt.n	80006fa <create_data_matrix_f32+0x82>
	}
	// Stop accessing arguments
	va_end(valist);

	// Output vector now has everything we need
	arm_mat_init_f32(uninitialised_matrix, numOfArrays, (uint16_t) WINDOW_SIZE, outputVector);
 8000742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000744:	b299      	uxth	r1, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	2209      	movs	r2, #9
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f004 fc3e 	bl	8004fcc <arm_mat_init_f32>

	// Seems like the function works; return ARM_MATH_SUCCESS
	return ARM_MATH_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	46ad      	mov	sp, r5
}
 8000754:	4618      	mov	r0, r3
 8000756:	372c      	adds	r7, #44	; 0x2c
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800075e:	b003      	add	sp, #12
 8000760:	4770      	bx	lr

08000762 <create_data_matrix_f32_test_3_arrays>:

arm_status create_data_matrix_f32_test_3_arrays(float32_t array1[9], float32_t array2[9], float32_t array3[9], float32_t arrayTrue[27]) {
 8000762:	b580      	push	{r7, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af02      	add	r7, sp, #8
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
	// Initialise variables
	arm_matrix_instance_f32 test_matrix;
	arm_matrix_instance_f32 true_matrix;
	uint16_t arrayRows = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t arrayCols = 3;
 8000774:	2303      	movs	r3, #3
 8000776:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint16_t arrayTrueRows = 3;
 8000778:	2303      	movs	r3, #3
 800077a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t arrayTrueCols = 9;
 800077c:	2309      	movs	r3, #9
 800077e:	853b      	strh	r3, [r7, #40]	; 0x28

	arm_status status;

	// Set up the true matrix
	arm_mat_init_f32(&true_matrix, arrayTrueRows, arrayTrueCols, arrayTrue);
 8000780:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000782:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000784:	f107 0014 	add.w	r0, r7, #20
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f004 fc1f 	bl	8004fcc <arm_mat_init_f32>

	// Call the function
	status = create_data_matrix_f32(&test_matrix, 3, array1, array2, array3);
 800078e:	f107 001c 	add.w	r0, r7, #28
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	2103      	movs	r1, #3
 800079c:	f7ff ff6c 	bl	8000678 <create_data_matrix_f32>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Check if the test matrix is the same as the true matrix
	status = mat_f32_check_equal(test_matrix, true_matrix);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	cb0c      	ldmia	r3, {r2, r3}
 80007ac:	f107 011c 	add.w	r1, r7, #28
 80007b0:	c903      	ldmia	r1, {r0, r1}
 80007b2:	f7ff ff17 	bl	80005e4 <mat_f32_check_equal>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 80007bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b0d2      	sub	sp, #328	; 0x148
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fc01 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f8bd 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f97d 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007da:	f000 f927 	bl	8000a2c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80007de:	f000 f971 	bl	8000ac4 <MX_USB_OTG_HS_USB_Init>
  arm_matrix_instance_f32 matrixB; //B

  arm_matrix_instance_f32 matrixTrue_mat_mult_f32; // True result to compare against
  arm_matrix_instance_f32 matrixTrue_mat_trans_f32;

  uint16_t nRowsA = 3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
  uint16_t nColsA = 3;
 80007e8:	2303      	movs	r3, #3
 80007ea:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
  float32_t pDataA[] = {1,2,3,4,5,6,7,8,9};
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <main+0x16c>)
 80007f0:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	682b      	ldr	r3, [r5, #0]
 8000800:	6023      	str	r3, [r4, #0]

  uint16_t nRowsB = 3;
 8000802:	2303      	movs	r3, #3
 8000804:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
  uint16_t nColsB = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
  float32_t pDataB[] = {8,1,3,5,2,4,8,1,5};
 800080e:	4b4a      	ldr	r3, [pc, #296]	; (8000938 <main+0x170>)
 8000810:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	6023      	str	r3, [r4, #0]

  float32_t pDataC[] = {9,8,7,6,5,4,3,2,1};
 8000822:	4b46      	ldr	r3, [pc, #280]	; (800093c <main+0x174>)
 8000824:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000828:	461d      	mov	r5, r3
 800082a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000832:	682b      	ldr	r3, [r5, #0]
 8000834:	6023      	str	r3, [r4, #0]
  float32_t pDataTrue_create_data_matrix_f32_test_3_arrays[] = {1,2,3,4,5,6,7,8,9,8,1,3,5,2,4,8,1,5,9,8,7,6,5,4,3,2,1};
 8000836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800083a:	4a41      	ldr	r2, [pc, #260]	; (8000940 <main+0x178>)
 800083c:	4618      	mov	r0, r3
 800083e:	4611      	mov	r1, r2
 8000840:	236c      	movs	r3, #108	; 0x6c
 8000842:	461a      	mov	r2, r3
 8000844:	f004 fbea 	bl	800501c <memcpy>
  uint16_t nRowsTrue_mat_mult_f32 = nRowsA;
 8000848:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800084c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
  uint16_t nColsTrue_mat_mult_f32 = nColsB;
 8000850:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 8000854:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
  float32_t pDataTrue_mat_mult_f32[] = {18,5,11,44,11,25,70,17,39};
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4a39      	ldr	r2, [pc, #228]	; (8000944 <main+0x17c>)
 800085e:	461c      	mov	r4, r3
 8000860:	4615      	mov	r5, r2
 8000862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	682b      	ldr	r3, [r5, #0]
 800086c:	6023      	str	r3, [r4, #0]

  uint16_t nRowsTrue_mat_trans_f32 = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
  uint16_t nColsTrue_mat_trans_f32 = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
  float32_t pDataTrue_mat_trans_f32[] = {8,5,1,2,3,4};
 800087a:	463b      	mov	r3, r7
 800087c:	4a32      	ldr	r2, [pc, #200]	; (8000948 <main+0x180>)
 800087e:	461c      	mov	r4, r3
 8000880:	4615      	mov	r5, r2
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0003 	ldmia.w	r5, {r0, r1}
 800088a:	e884 0003 	stmia.w	r4, {r0, r1}

  arm_mat_init_f32(&matrixA, nRowsA, nColsA, pDataA);
 800088e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000892:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8000896:	f8b7 1146 	ldrh.w	r1, [r7, #326]	; 0x146
 800089a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 800089e:	f004 fb95 	bl	8004fcc <arm_mat_init_f32>
  arm_mat_init_f32(&matrixB, nRowsB, nColsB, pDataB);
 80008a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80008aa:	f8b7 1142 	ldrh.w	r1, [r7, #322]	; 0x142
 80008ae:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80008b2:	f004 fb8b 	bl	8004fcc <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue_mat_mult_f32, nRowsTrue_mat_mult_f32, nColsTrue_mat_mult_f32, pDataTrue_mat_mult_f32);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 80008be:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
 80008c2:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 80008c6:	f004 fb81 	bl	8004fcc <arm_mat_init_f32>
  arm_mat_init_f32(&matrixTrue_mat_trans_f32, nRowsTrue_mat_trans_f32, nColsTrue_mat_trans_f32, pDataTrue_mat_trans_f32);
 80008ca:	463b      	mov	r3, r7
 80008cc:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 80008d0:	f8b7 113a 	ldrh.w	r1, [r7, #314]	; 0x13a
 80008d4:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80008d8:	f004 fb78 	bl	8004fcc <arm_mat_init_f32>

  // Call the relevant test
//  arm_status test_result = mat_mult_f32_test(matrixA, matrixB, matrixTrue_mat_mult_f32);
//  arm_status test_result = mat_trans_f32_test(matrixB, matrixTrue_mat_trans_f32);
  arm_status test_result = create_data_matrix_f32_test_3_arrays(pDataA, pDataB, pDataC, pDataTrue_create_data_matrix_f32_test_3_arrays);
 80008dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80008e4:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80008e8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80008ec:	f7ff ff39 	bl	8000762 <create_data_matrix_f32_test_3_arrays>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

  // Depending on the test result, blink LED's appropriately
  if (test_result == ARM_MATH_SIZE_MISMATCH) {
 80008f6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80008fa:	f113 0f03 	cmn.w	r3, #3
 80008fe:	d101      	bne.n	8000904 <main+0x13c>
	  Error_Handler();
 8000900:	f000 fa02 	bl	8000d08 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (test_result == ARM_MATH_SUCCESS) {
 8000904:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8000908:	2b00      	cmp	r3, #0
 800090a:	d104      	bne.n	8000916 <main+0x14e>
		  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 800090c:	2101      	movs	r1, #1
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <main+0x184>)
 8000910:	f000 fec3 	bl	800169a <HAL_GPIO_TogglePin>
 8000914:	e009      	b.n	800092a <main+0x162>
	  }
	  else if (test_result == ARM_MATH_TEST_FAILURE) {
 8000916:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800091a:	f113 0f06 	cmn.w	r3, #6
 800091e:	d104      	bne.n	800092a <main+0x162>
		  HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <main+0x184>)
 8000926:	f000 feb8 	bl	800169a <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092e:	f000 fbe3 	bl	80010f8 <HAL_Delay>
	  if (test_result == ARM_MATH_SUCCESS) {
 8000932:	e7e7      	b.n	8000904 <main+0x13c>
 8000934:	08005060 	.word	0x08005060
 8000938:	08005084 	.word	0x08005084
 800093c:	080050a8 	.word	0x080050a8
 8000940:	080050cc 	.word	0x080050cc
 8000944:	08005138 	.word	0x08005138
 8000948:	0800515c 	.word	0x0800515c
 800094c:	58020400 	.word	0x58020400

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	224c      	movs	r2, #76	; 0x4c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fb6a 	bl	8005038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2220      	movs	r2, #32
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f004 fb64 	bl	8005038 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000970:	2004      	movs	r0, #4
 8000972:	f000 fead 	bl	80016d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <SystemClock_Config+0xd8>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a2a      	ldr	r2, [pc, #168]	; (8000a28 <SystemClock_Config+0xd8>)
 8000980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <SystemClock_Config+0xd8>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000992:	bf00      	nop
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <SystemClock_Config+0xd8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a0:	d1f8      	bne.n	8000994 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009a2:	2321      	movs	r3, #33	; 0x21
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009bc:	2318      	movs	r3, #24
 80009be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009cc:	230c      	movs	r3, #12
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fed1 	bl	8001784 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009e8:	f000 f98e 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	233f      	movs	r3, #63	; 0x3f
 80009ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fabb 	bl	8001f8c <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a1c:	f000 f974 	bl	8000d08 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3770      	adds	r7, #112	; 0x70
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58024800 	.word	0x58024800

08000a2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_USART3_UART_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a76:	f003 f943 	bl	8003d00 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f942 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a88:	f004 f9d6 	bl	8004e38 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f939 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000a9a:	f004 fa0b 	bl	8004eb4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f930 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_USART3_UART_Init+0x90>)
 8000aaa:	f004 f98c 	bl	8004dc6 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f928 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2400002c 	.word	0x2400002c
 8000ac0:	40004800 	.word	0x40004800

08000ac4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b80      	ldr	r3, [pc, #512]	; (8000cec <MX_GPIO_Init+0x218>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <MX_GPIO_Init+0x218>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afa:	4b7c      	ldr	r3, [pc, #496]	; (8000cec <MX_GPIO_Init+0x218>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	623b      	str	r3, [r7, #32]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b08:	4b78      	ldr	r3, [pc, #480]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	4a77      	ldr	r2, [pc, #476]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b18:	4b74      	ldr	r3, [pc, #464]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	4b71      	ldr	r3, [pc, #452]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2c:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b36:	4b6d      	ldr	r3, [pc, #436]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b69      	ldr	r3, [pc, #420]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	4a68      	ldr	r2, [pc, #416]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b54:	4b65      	ldr	r3, [pc, #404]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	4b62      	ldr	r3, [pc, #392]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b68:	4a60      	ldr	r2, [pc, #384]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b72:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	4a59      	ldr	r2, [pc, #356]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b90:	4b56      	ldr	r3, [pc, #344]	; (8000cec <MX_GPIO_Init+0x218>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b53      	ldr	r3, [pc, #332]	; (8000cec <MX_GPIO_Init+0x218>)
 8000ba0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba4:	4a51      	ldr	r2, [pc, #324]	; (8000cec <MX_GPIO_Init+0x218>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bae:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <MX_GPIO_Init+0x218>)
 8000bb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <MX_GPIO_Init+0x218>)
 8000bbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc2:	4a4a      	ldr	r2, [pc, #296]	; (8000cec <MX_GPIO_Init+0x218>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bcc:	4b47      	ldr	r3, [pc, #284]	; (8000cec <MX_GPIO_Init+0x218>)
 8000bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <MX_GPIO_Init+0x21c>)
 8000be2:	f000 fd41 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bec:	4841      	ldr	r0, [pc, #260]	; (8000cf4 <MX_GPIO_Init+0x220>)
 8000bee:	f000 fd3b 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x224>)
 8000bf8:	f000 fd36 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	483a      	ldr	r0, [pc, #232]	; (8000cfc <MX_GPIO_Init+0x228>)
 8000c12:	f000 fb79 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <MX_GPIO_Init+0x21c>)
 8000c30:	f000 fb6a 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8000c34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <MX_GPIO_Init+0x220>)
 8000c4e:	f000 fb5b 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4826      	ldr	r0, [pc, #152]	; (8000d00 <MX_GPIO_Init+0x22c>)
 8000c68:	f000 fb4e 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4820      	ldr	r0, [pc, #128]	; (8000d04 <MX_GPIO_Init+0x230>)
 8000c82:	f000 fb41 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <MX_GPIO_Init+0x230>)
 8000ca4:	f000 fb30 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ca8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <MX_GPIO_Init+0x230>)
 8000cc2:	f000 fb21 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_GPIO_Init+0x224>)
 8000cde:	f000 fb13 	bl	8001308 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58021000 	.word	0x58021000
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	58021800 	.word	0x58021800
 8000d04:	58020000 	.word	0x58020000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <Error_Handler+0x2c>)
 8000d18:	f000 fca6 	bl	8001668 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <Error_Handler+0x2c>)
 8000d22:	f000 fca1 	bl	8001668 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <Error_Handler+0x30>)
 8000d2c:	f000 fc9c 	bl	8001668 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000d30:	e7ee      	b.n	8000d10 <Error_Handler+0x8>
 8000d32:	bf00      	nop
 8000d34:	58020400 	.word	0x58020400
 8000d38:	58021000 	.word	0x58021000

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_MspInit+0x30>)
 8000d44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x30>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x30>)
 8000d54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	58024400 	.word	0x58024400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0b8      	sub	sp, #224	; 0xe0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	22b8      	movs	r2, #184	; 0xb8
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 f951 	bl	8005038 <memset>
  if(huart->Instance==USART3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_UART_MspInit+0xc0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d142      	bne.n	8000e26 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fc78 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dba:	f7ff ffa5 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de2:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_UART_MspInit+0xc8>)
 8000e22:	f000 fa71 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	37e0      	adds	r7, #224	; 0xe0
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004800 	.word	0x40004800
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020c00 	.word	0x58020c00

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f916 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <SystemInit+0xd0>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <SystemInit+0xd0>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <SystemInit+0xd4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d807      	bhi.n	8000ec0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <SystemInit+0xd4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <SystemInit+0xd4>)
 8000eba:	f043 0303 	orr.w	r3, r3, #3
 8000ebe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <SystemInit+0xd8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <SystemInit+0xd8>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <SystemInit+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <SystemInit+0xd8>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4924      	ldr	r1, [pc, #144]	; (8000f68 <SystemInit+0xd8>)
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <SystemInit+0xdc>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <SystemInit+0xd4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <SystemInit+0xd4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 030f 	bic.w	r3, r3, #15
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <SystemInit+0xd4>)
 8000ef4:	f043 0303 	orr.w	r3, r3, #3
 8000ef8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <SystemInit+0xd8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <SystemInit+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <SystemInit+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <SystemInit+0xd8>)
 8000f0e:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <SystemInit+0xe0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <SystemInit+0xd8>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <SystemInit+0xe4>)
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <SystemInit+0xd8>)
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <SystemInit+0xe8>)
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <SystemInit+0xd8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <SystemInit+0xd8>)
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <SystemInit+0xe8>)
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <SystemInit+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <SystemInit+0xd8>)
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <SystemInit+0xe8>)
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <SystemInit+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <SystemInit+0xd8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <SystemInit+0xd8>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <SystemInit+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <SystemInit+0xec>)
 8000f50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f54:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	52002000 	.word	0x52002000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f70:	02020200 	.word	0x02020200
 8000f74:	01ff0000 	.word	0x01ff0000
 8000f78:	01010280 	.word	0x01010280
 8000f7c:	52004000 	.word	0x52004000

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff ff84 	bl	8000e90 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f004 f811 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fc09 	bl	80007c8 <main>
  bx  lr
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fc4:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000fc8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fcc:	240000c0 	.word	0x240000c0

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f962 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fe0:	f001 f98a 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_Init+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4913      	ldr	r1, [pc, #76]	; (8001040 <HAL_Init+0x6c>)
 8000ff2:	5ccb      	ldrb	r3, [r1, r3]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_Init+0x6c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_Init+0x70>)
 8001016:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_Init+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f814 	bl	800104c <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fe85 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400
 8001040:	08005174 	.word	0x08005174
 8001044:	24000004 	.word	0x24000004
 8001048:	24000000 	.word	0x24000000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e021      	b.n	80010a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_InitTick+0x64>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f939 	bl	80012ee <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f911 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x68>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24000000 	.word	0x24000000
 80010b4:	24000008 	.word	0x24000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c
 80010dc:	240000bc 	.word	0x240000bc

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	240000bc 	.word	0x240000bc

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	05fa0000 	.word	0x05fa0000

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff47 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb2 	bl	8001260 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_GPIO_Init+0x234>)
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131a:	e194      	b.n	8001646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8186 	beq.w	8001640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x44>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e0 	beq.w	8001640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001486:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001492:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x23c>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x240>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d052      	beq.n	8001570 <HAL_GPIO_Init+0x268>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_GPIO_Init+0x244>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d031      	beq.n	8001536 <HAL_GPIO_Init+0x22e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_GPIO_Init+0x248>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x22a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x24c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x226>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_GPIO_Init+0x250>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x222>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_GPIO_Init+0x254>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x258>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_GPIO_Init+0x25c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x260>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_GPIO_Init+0x264>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20e>
 8001512:	2309      	movs	r3, #9
 8001514:	e02d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001516:	230a      	movs	r3, #10
 8001518:	e02b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151a:	2308      	movs	r3, #8
 800151c:	e029      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151e:	2307      	movs	r3, #7
 8001520:	e027      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001522:	2306      	movs	r3, #6
 8001524:	e025      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001526:	2305      	movs	r3, #5
 8001528:	e023      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152a:	2304      	movs	r3, #4
 800152c:	e021      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152e:	2303      	movs	r3, #3
 8001530:	e01f      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001532:	2302      	movs	r3, #2
 8001534:	e01d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001536:	2301      	movs	r3, #1
 8001538:	e01b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800153a:	bf00      	nop
 800153c:	58000080 	.word	0x58000080
 8001540:	58024400 	.word	0x58024400
 8001544:	58000400 	.word	0x58000400
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58020800 	.word	0x58020800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58021400 	.word	0x58021400
 8001560:	58021800 	.word	0x58021800
 8001564:	58021c00 	.word	0x58021c00
 8001568:	58022000 	.word	0x58022000
 800156c:	58022400 	.word	0x58022400
 8001570:	2300      	movs	r3, #0
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001582:	4938      	ldr	r1, [pc, #224]	; (8001664 <HAL_GPIO_Init+0x35c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae63 	bne.w	800131c <HAL_GPIO_Init+0x14>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3724      	adds	r7, #36	; 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	400b      	ands	r3, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d00a      	beq.n	80016fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d001      	beq.n	80016f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e040      	b.n	8001778 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e03e      	b.n	8001778 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001702:	491f      	ldr	r1, [pc, #124]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800170a:	f7ff fce9 	bl	80010e0 <HAL_GetTick>
 800170e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001710:	e009      	b.n	8001726 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001712:	f7ff fce5 	bl	80010e0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001720:	d901      	bls.n	8001726 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e028      	b.n	8001778 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800172e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001732:	d1ee      	bne.n	8001712 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b1e      	cmp	r3, #30
 8001738:	d008      	beq.n	800174c <HAL_PWREx_ConfigSupply+0x7c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b2e      	cmp	r3, #46	; 0x2e
 800173e:	d005      	beq.n	800174c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b1d      	cmp	r3, #29
 8001744:	d002      	beq.n	800174c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b2d      	cmp	r3, #45	; 0x2d
 800174a:	d114      	bne.n	8001776 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800174c:	f7ff fcc8 	bl	80010e0 <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001752:	e009      	b.n	8001768 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001754:	f7ff fcc4 	bl	80010e0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001762:	d901      	bls.n	8001768 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e007      	b.n	8001778 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_PWREx_ConfigSupply+0xb0>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d1ee      	bne.n	8001754 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024800 	.word	0x58024800

08001784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e3f3      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80b3 	beq.w	800190a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a4:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ae:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d007      	beq.n	80017ca <HAL_RCC_OscConfig+0x46>
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	2b18      	cmp	r3, #24
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d10d      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b95      	ldr	r3, [pc, #596]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8098 	beq.w	8001908 <HAL_RCC_OscConfig+0x184>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 8093 	bne.w	8001908 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e3cb      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x7a>
 80017f0:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a8a      	ldr	r2, [pc, #552]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e058      	b.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0xa8>
 8001806:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a85      	ldr	r2, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b83      	ldr	r3, [pc, #524]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a82      	ldr	r2, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7f      	ldr	r2, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e041      	b.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a79      	ldr	r2, [pc, #484]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b77      	ldr	r3, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a76      	ldr	r2, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b74      	ldr	r3, [pc, #464]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a73      	ldr	r2, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e029      	b.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001864:	d112      	bne.n	800188c <HAL_RCC_OscConfig+0x108>
 8001866:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6d      	ldr	r2, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a67      	ldr	r2, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e011      	b.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80018aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc12 	bl	80010e0 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc0e 	bl	80010e0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e355      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x13c>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fbfe 	bl	80010e0 <HAL_GetTick>
 80018e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fbfa 	bl	80010e0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e341      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x164>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 808c 	beq.w	8001a30 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001920:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_RCC_OscConfig+0x1ba>
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b18      	cmp	r3, #24
 8001932:	d137      	bne.n	80019a4 <HAL_RCC_OscConfig+0x220>
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d132      	bne.n	80019a4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x1d2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e313      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0219 	bic.w	r2, r3, #25
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	492f      	ldr	r1, [pc, #188]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001968:	f7ff fbba 	bl	80010e0 <HAL_GetTick>
 800196c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff fbb6 	bl	80010e0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e2fd      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	061b      	lsls	r3, r3, #24
 800199c:	4920      	ldr	r1, [pc, #128]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a2:	e045      	b.n	8001a30 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 0219 	bic.w	r2, r3, #25
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4919      	ldr	r1, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fb8f 	bl	80010e0 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fb8b 	bl	80010e0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e2d2      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	490b      	ldr	r1, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e01a      	b.n	8001a30 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_RCC_OscConfig+0x29c>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb6b 	bl	80010e0 <HAL_GetTick>
 8001a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fb67 	bl	80010e0 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d903      	bls.n	8001a24 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e2ae      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
 8001a20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a24:	4b99      	ldr	r3, [pc, #612]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06a      	beq.n	8001b12 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a46:	4b91      	ldr	r3, [pc, #580]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d007      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2de>
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b18      	cmp	r3, #24
 8001a56:	d11b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x30c>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a62:	4b8a      	ldr	r3, [pc, #552]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b80      	cmp	r3, #128	; 0x80
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e281      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a7a:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	4980      	ldr	r1, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a8e:	e040      	b.n	8001b12 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a98:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a7b      	ldr	r2, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fb1c 	bl	80010e0 <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb18 	bl	80010e0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e25f      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	496c      	ldr	r1, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60cb      	str	r3, [r1, #12]
 8001ade:	e018      	b.n	8001b12 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a69      	ldr	r2, [pc, #420]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff faf8 	bl	80010e0 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001af4:	f7ff faf4 	bl	80010e0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e23b      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d019      	beq.n	8001b5a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fad5 	bl	80010e0 <HAL_GetTick>
 8001b36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fad1 	bl	80010e0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e218      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x3b6>
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5e:	4a4b      	ldr	r2, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fabb 	bl	80010e0 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fab7 	bl	80010e0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1fe      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d036      	beq.n	8001c06 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001ba6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa98 	bl	80010e0 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bb4:	f7ff fa94 	bl	80010e0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1db      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x430>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2c      	ldr	r2, [pc, #176]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa7e 	bl	80010e0 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001be8:	f7ff fa7a 	bl	80010e0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1c1      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80af 	beq.w	8001d72 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_OscConfig+0x50c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x50c>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fa5e 	bl	80010e0 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff fa5a 	bl	80010e0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1a1      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x50c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d8>
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e05b      	b.n	8001d14 <HAL_RCC_OscConfig+0x590>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d117      	bne.n	8001c94 <HAL_RCC_OscConfig+0x510>
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a02      	ldr	r2, [pc, #8]	; (8001c8c <HAL_RCC_OscConfig+0x508>)
 8001c82:	f023 0304 	bic.w	r3, r3, #4
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	e044      	b.n	8001d14 <HAL_RCC_OscConfig+0x590>
 8001c8a:	bf00      	nop
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58024800 	.word	0x58024800
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d112      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x53e>
 8001c9c:	4b95      	ldr	r3, [pc, #596]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a94      	ldr	r2, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a91      	ldr	r2, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a8e      	ldr	r2, [pc, #568]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc0:	e028      	b.n	8001d14 <HAL_RCC_OscConfig+0x590>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b85      	cmp	r3, #133	; 0x85
 8001cc8:	d112      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x56c>
 8001cca:	4b8a      	ldr	r3, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	4a89      	ldr	r2, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd6:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	4a86      	ldr	r2, [pc, #536]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce2:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a83      	ldr	r2, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	e011      	b.n	8001d14 <HAL_RCC_OscConfig+0x590>
 8001cf0:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a7f      	ldr	r2, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a7c      	ldr	r2, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d02:	f023 0304 	bic.w	r3, r3, #4
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f9e0 	bl	80010e0 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f9dc 	bl	80010e0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e121      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ee      	beq.n	8001d24 <HAL_RCC_OscConfig+0x5a0>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f9ca 	bl	80010e0 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f9c6 	bl	80010e0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e10b      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8100 	beq.w	8001f7c <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d84:	2b18      	cmp	r3, #24
 8001d86:	f000 80bb 	beq.w	8001f00 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	f040 8095 	bne.w	8001ebe <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f99e 	bl	80010e0 <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f99a 	bl	80010e0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0e1      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <HAL_RCC_OscConfig+0x774>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	4946      	ldr	r1, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	628b      	str	r3, [r1, #40]	; 0x28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	3b01      	subs	r3, #1
 8001de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	3b01      	subs	r3, #1
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e10:	4938      	ldr	r1, [pc, #224]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_RCC_OscConfig+0x778>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e2e:	00d2      	lsls	r2, r2, #3
 8001e30:	4930      	ldr	r1, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f023 020c 	bic.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	492c      	ldr	r1, [pc, #176]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	f023 0202 	bic.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f923 	bl	80010e0 <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff f91f 	bl	80010e0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e066      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x71a>
 8001ebc:	e05e      	b.n	8001f7c <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eca:	f7ff f909 	bl	80010e0 <HAL_GetTick>
 8001ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff f905 	bl	80010e0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e04c      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_OscConfig+0x770>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x74e>
 8001ef0:	e044      	b.n	8001f7c <HAL_RCC_OscConfig+0x7f8>
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	fffffc0c 	.word	0xfffffc0c
 8001efc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x804>)
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_OscConfig+0x804>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d031      	beq.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0203 	and.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d12a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d122      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0a5b      	lsrs	r3, r3, #9
 8001f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d111      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	0e1b      	lsrs	r3, r3, #24
 8001f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3730      	adds	r7, #48	; 0x30
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	58024400 	.word	0x58024400

08001f8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e19c      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b8a      	ldr	r3, [pc, #552]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b87      	ldr	r3, [pc, #540]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	4985      	ldr	r1, [pc, #532]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b83      	ldr	r3, [pc, #524]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e184      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d908      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fec:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4975      	ldr	r1, [pc, #468]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d010      	beq.n	800202c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002016:	429a      	cmp	r2, r3
 8002018:	d908      	bls.n	800202c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800201a:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	496a      	ldr	r1, [pc, #424]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	495e      	ldr	r1, [pc, #376]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002056:	4313      	orrs	r3, r2
 8002058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002072:	429a      	cmp	r2, r3
 8002074:	d908      	bls.n	8002088 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002076:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4953      	ldr	r1, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002084:	4313      	orrs	r3, r2
 8002086:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d908      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f023 020f 	bic.w	r2, r3, #15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4947      	ldr	r1, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d055      	beq.n	800216e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4940      	ldr	r1, [pc, #256]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d107      	bne.n	80020ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020dc:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d121      	bne.n	800212c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0f6      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d115      	bne.n	800212c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0ea      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0de      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d6      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f023 0207 	bic.w	r2, r3, #7
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4925      	ldr	r1, [pc, #148]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe ffcf 	bl	80010e0 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002144:	e00a      	b.n	800215c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002146:	f7fe ffcb 	bl	80010e0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0be      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	429a      	cmp	r2, r3
 800216c:	d1eb      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	429a      	cmp	r2, r3
 8002188:	d208      	bcs.n	800219c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f023 020f 	bic.w	r2, r3, #15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d214      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	4906      	ldr	r1, [pc, #24]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <HAL_RCC_ClockConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e086      	b.n	80022da <HAL_RCC_ClockConfig+0x34e>
 80021cc:	52002000 	.word	0x52002000
 80021d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d208      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021f0:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	4939      	ldr	r1, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800221a:	429a      	cmp	r2, r3
 800221c:	d208      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800221e:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	492e      	ldr	r1, [pc, #184]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 800222c:	4313      	orrs	r3, r2
 800222e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002248:	429a      	cmp	r2, r3
 800224a:	d208      	bcs.n	800225e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 800225a:	4313      	orrs	r3, r2
 800225c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d208      	bcs.n	800228c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4917      	ldr	r1, [pc, #92]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002288:	4313      	orrs	r3, r2
 800228a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800228c:	f000 f834 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	4912      	ldr	r1, [pc, #72]	; (80022e8 <HAL_RCC_ClockConfig+0x35c>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x358>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_RCC_ClockConfig+0x35c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x360>)
 80022c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x364>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x368>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe febc 	bl	800104c <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	08005174 	.word	0x08005174
 80022ec:	24000004 	.word	0x24000004
 80022f0:	24000000 	.word	0x24000000
 80022f4:	24000008 	.word	0x24000008

080022f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fe:	4bb3      	ldr	r3, [pc, #716]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002306:	2b18      	cmp	r3, #24
 8002308:	f200 8155 	bhi.w	80025b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <HAL_RCC_GetSysClockFreq+0x1c>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002379 	.word	0x08002379
 8002318:	080025b7 	.word	0x080025b7
 800231c:	080025b7 	.word	0x080025b7
 8002320:	080025b7 	.word	0x080025b7
 8002324:	080025b7 	.word	0x080025b7
 8002328:	080025b7 	.word	0x080025b7
 800232c:	080025b7 	.word	0x080025b7
 8002330:	080025b7 	.word	0x080025b7
 8002334:	0800239f 	.word	0x0800239f
 8002338:	080025b7 	.word	0x080025b7
 800233c:	080025b7 	.word	0x080025b7
 8002340:	080025b7 	.word	0x080025b7
 8002344:	080025b7 	.word	0x080025b7
 8002348:	080025b7 	.word	0x080025b7
 800234c:	080025b7 	.word	0x080025b7
 8002350:	080025b7 	.word	0x080025b7
 8002354:	080023a5 	.word	0x080023a5
 8002358:	080025b7 	.word	0x080025b7
 800235c:	080025b7 	.word	0x080025b7
 8002360:	080025b7 	.word	0x080025b7
 8002364:	080025b7 	.word	0x080025b7
 8002368:	080025b7 	.word	0x080025b7
 800236c:	080025b7 	.word	0x080025b7
 8002370:	080025b7 	.word	0x080025b7
 8002374:	080023ab 	.word	0x080023ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002378:	4b94      	ldr	r3, [pc, #592]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002384:	4b91      	ldr	r3, [pc, #580]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002396:	e111      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002398:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800239a:	61bb      	str	r3, [r7, #24]
    break;
 800239c:	e10e      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800239e:	4b8d      	ldr	r3, [pc, #564]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023a0:	61bb      	str	r3, [r7, #24]
    break;
 80023a2:	e10b      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023a4:	4b8c      	ldr	r3, [pc, #560]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023a6:	61bb      	str	r3, [r7, #24]
    break;
 80023a8:	e108      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023b4:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023ca:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80e1 	beq.w	80025b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f000 8083 	beq.w	80024fc <HAL_RCC_GetSysClockFreq+0x204>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	f200 80a1 	bhi.w	8002540 <HAL_RCC_GetSysClockFreq+0x248>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x114>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d056      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800240a:	e099      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02d      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002418:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	4a6b      	ldr	r2, [pc, #428]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a02 	vldr	s12, [r7, #8]
 8002456:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002472:	e087      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024b6:	e065      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	ed97 6a02 	vldr	s12, [r7, #8]
 80024de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80024e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024fa:	e043      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800250a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002522:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800252a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800253e:	e021      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800254e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002562:	ed97 6a02 	vldr	s12, [r7, #8]
 8002566:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800256a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002582:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	0a5b      	lsrs	r3, r3, #9
 800258a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800258e:	3301      	adds	r3, #1
 8002590:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800259c:	edd7 6a07 	vldr	s13, [r7, #28]
 80025a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025ae:	e005      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
    break;
 80025b4:	e002      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025b8:	61bb      	str	r3, [r7, #24]
    break;
 80025ba:	bf00      	nop
  }

  return sysclockfreq;
 80025bc:	69bb      	ldr	r3, [r7, #24]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	58024400 	.word	0x58024400
 80025d0:	03d09000 	.word	0x03d09000
 80025d4:	003d0900 	.word	0x003d0900
 80025d8:	007a1200 	.word	0x007a1200
 80025dc:	46000000 	.word	0x46000000
 80025e0:	4c742400 	.word	0x4c742400
 80025e4:	4a742400 	.word	0x4a742400
 80025e8:	4af42400 	.word	0x4af42400

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80025f2:	f7ff fe81 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_GetHCLKFreq+0x50>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490f      	ldr	r1, [pc, #60]	; (8002640 <HAL_RCC_GetHCLKFreq+0x54>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_GetHCLKFreq+0x50>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	4a09      	ldr	r2, [pc, #36]	; (8002640 <HAL_RCC_GetHCLKFreq+0x54>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_RCC_GetHCLKFreq+0x58>)
 8002628:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_RCC_GetHCLKFreq+0x5c>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCC_GetHCLKFreq+0x58>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58024400 	.word	0x58024400
 8002640:	08005174 	.word	0x08005174
 8002644:	24000004 	.word	0x24000004
 8002648:	24000000 	.word	0x24000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002650:	f7ff ffcc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400
 8002674:	08005174 	.word	0x08005174

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800267c:	f7ff ffb6 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400
 80026a0:	08005174 	.word	0x08005174

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03f      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026c8:	d02a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ce:	d824      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d4:	d018      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026da:	d81e      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e4:	d007      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026e6:	e018      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e8:	4ba6      	ldr	r3, [pc, #664]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	4aa5      	ldr	r2, [pc, #660]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026f4:	e015      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 f99b 	bl	8003a38 <RCCEx_PLL2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002706:	e00c      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3324      	adds	r3, #36	; 0x24
 800270c:	2102      	movs	r1, #2
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fa44 	bl	8003b9c <RCCEx_PLL3_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002718:	e003      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
      break;
 800271e:	e000      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002728:	4b96      	ldr	r3, [pc, #600]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002734:	4993      	ldr	r1, [pc, #588]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002736:	4313      	orrs	r3, r2
 8002738:	650b      	str	r3, [r1, #80]	; 0x50
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	2b04      	cmp	r3, #4
 8002752:	d826      	bhi.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002771 	.word	0x08002771
 8002760:	0800277f 	.word	0x0800277f
 8002764:	08002791 	.word	0x08002791
 8002768:	080027a9 	.word	0x080027a9
 800276c:	080027a9 	.word	0x080027a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002770:	4b84      	ldr	r3, [pc, #528]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	4a83      	ldr	r2, [pc, #524]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800277c:	e015      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f957 	bl	8003a38 <RCCEx_PLL2_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800278e:	e00c      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3324      	adds	r3, #36	; 0x24
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fa00 	bl	8003b9c <RCCEx_PLL3_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027a0:	e003      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
      break;
 80027a6:	e000      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b0:	4b74      	ldr	r3, [pc, #464]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	f023 0207 	bic.w	r2, r3, #7
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	4971      	ldr	r1, [pc, #452]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	650b      	str	r3, [r1, #80]	; 0x50
 80027c2:	e001      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d04a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027dc:	d031      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80027de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027e2:	d82b      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e8:	d02d      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d825      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027f0:	2bc0      	cmp	r3, #192	; 0xc0
 80027f2:	d02a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027f4:	2bc0      	cmp	r3, #192	; 0xc0
 80027f6:	d821      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d016      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d81d      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d007      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002808:	e018      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002816:	e019      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f90a 	bl	8003a38 <RCCEx_PLL2_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002828:	e010      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f9b3 	bl	8003b9c <RCCEx_PLL3_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800283a:	e007      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
      break;
 8002840:	e004      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800284a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4949      	ldr	r1, [pc, #292]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	650b      	str	r3, [r1, #80]	; 0x50
 8002864:	e001      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04f      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800287e:	d036      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002880:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002884:	d830      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288a:	d032      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800288c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002890:	d82a      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002892:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002896:	d02e      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800289c:	d824      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d018      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d81e      	bhi.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d007      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80028b4:	e018      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	4a32      	ldr	r2, [pc, #200]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028c2:	e019      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f8b4 	bl	8003a38 <RCCEx_PLL2_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028d4:	e010      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3324      	adds	r3, #36	; 0x24
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 f95d 	bl	8003b9c <RCCEx_PLL3_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028e6:	e007      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
      break;
 80028ec:	e004      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80028fe:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	491e      	ldr	r1, [pc, #120]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	650b      	str	r3, [r1, #80]	; 0x50
 8002910:	e001      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d034      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	2b30      	cmp	r3, #48	; 0x30
 8002928:	d01c      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800292a:	2b30      	cmp	r3, #48	; 0x30
 800292c:	d817      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800292e:	2b20      	cmp	r3, #32
 8002930:	d00c      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002932:	2b20      	cmp	r3, #32
 8002934:	d813      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800293a:	2b10      	cmp	r3, #16
 800293c:	d10f      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800294a:	e00e      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f870 	bl	8003a38 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800295c:	e005      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002964:	bf00      	nop
 8002966:	e000      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	4901      	ldr	r1, [pc, #4]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002982:	e003      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d047      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a0:	d030      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a6:	d82a      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80029a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ac:	d02c      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80029ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b2:	d824      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b8:	d018      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x348>
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d81e      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d007      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80029ca:	e018      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4bb0      	ldr	r3, [pc, #704]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4aaf      	ldr	r2, [pc, #700]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029d8:	e017      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f829 	bl	8003a38 <RCCEx_PLL2_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ea:	e00e      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3324      	adds	r3, #36	; 0x24
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f8d2 	bl	8003b9c <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029fc:	e005      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a10:	4b9f      	ldr	r3, [pc, #636]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	499c      	ldr	r1, [pc, #624]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	650b      	str	r3, [r1, #80]	; 0x50
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d049      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3c:	d02e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a42:	d828      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a48:	d02a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a4e:	d822      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a54:	d026      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a5a:	d81c      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a60:	d010      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a66:	d816      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d111      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 ffdd 	bl	8003a38 <RCCEx_PLL2_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a82:	e012      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3324      	adds	r3, #36	; 0x24
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 f886 	bl	8003b9c <RCCEx_PLL3_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a94:	e009      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9a:	e006      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a9c:	bf00      	nop
 8002a9e:	e004      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ab0:	4b77      	ldr	r3, [pc, #476]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abc:	4974      	ldr	r1, [pc, #464]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d053      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ada:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ade:	d034      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ae0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ae4:	d82e      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aea:	d030      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af0:	d828      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d02c      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d822      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b02:	d028      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b08:	d81c      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d816      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01f      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1e:	d111      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	2101      	movs	r1, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ff86 	bl	8003a38 <RCCEx_PLL2_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b30:	e014      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3324      	adds	r3, #36	; 0x24
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f82f 	bl	8003b9c <RCCEx_PLL3_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b42:	e00b      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
      break;
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b62:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b70:	4947      	ldr	r1, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	658b      	str	r3, [r1, #88]	; 0x58
 8002b76:	e001      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d00e      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b96:	d814      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bae:	e00c      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 ff3e 	bl	8003a38 <RCCEx_PLL2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bdc:	492c      	ldr	r1, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	650b      	str	r3, [r1, #80]	; 0x50
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d032      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d81b      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c15 	.word	0x08002c15
 8002c0c:	08002c23 	.word	0x08002c23
 8002c10:	08002c3b 	.word	0x08002c3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c20:	e00c      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ff05 	bl	8003a38 <RCCEx_PLL2_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c32:	e003      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
      break;
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4910      	ldr	r1, [pc, #64]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c54:	e001      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 808a 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c74:	f7fe fa34 	bl	80010e0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	e00d      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe fa30 	bl	80010e0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d906      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4bba      	ldr	r3, [pc, #744]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0eb      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d166      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002caa:	4bb7      	ldr	r3, [pc, #732]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbe:	4bb2      	ldr	r3, [pc, #712]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc8:	4baf      	ldr	r3, [pc, #700]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4aae      	ldr	r2, [pc, #696]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4bac      	ldr	r3, [pc, #688]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4aab      	ldr	r2, [pc, #684]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ce0:	4aa9      	ldr	r2, [pc, #676]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d115      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f9f5 	bl	80010e0 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f9f1 	bl	80010e0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8002d10:	e005      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d12:	4b9d      	ldr	r3, [pc, #628]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ed      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d126      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002d34:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d42:	0919      	lsrs	r1, r3, #4
 8002d44:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	498f      	ldr	r1, [pc, #572]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002d50:	4b8d      	ldr	r3, [pc, #564]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4a8c      	ldr	r2, [pc, #560]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d5a:	6113      	str	r3, [r2, #16]
 8002d5c:	4b8a      	ldr	r3, [pc, #552]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	4987      	ldr	r1, [pc, #540]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8002d70:	e004      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07f      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	2b28      	cmp	r3, #40	; 0x28
 8002d90:	d866      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002e67 	.word	0x08002e67
 8002d9c:	08002e61 	.word	0x08002e61
 8002da0:	08002e61 	.word	0x08002e61
 8002da4:	08002e61 	.word	0x08002e61
 8002da8:	08002e61 	.word	0x08002e61
 8002dac:	08002e61 	.word	0x08002e61
 8002db0:	08002e61 	.word	0x08002e61
 8002db4:	08002e61 	.word	0x08002e61
 8002db8:	08002e3d 	.word	0x08002e3d
 8002dbc:	08002e61 	.word	0x08002e61
 8002dc0:	08002e61 	.word	0x08002e61
 8002dc4:	08002e61 	.word	0x08002e61
 8002dc8:	08002e61 	.word	0x08002e61
 8002dcc:	08002e61 	.word	0x08002e61
 8002dd0:	08002e61 	.word	0x08002e61
 8002dd4:	08002e61 	.word	0x08002e61
 8002dd8:	08002e4f 	.word	0x08002e4f
 8002ddc:	08002e61 	.word	0x08002e61
 8002de0:	08002e61 	.word	0x08002e61
 8002de4:	08002e61 	.word	0x08002e61
 8002de8:	08002e61 	.word	0x08002e61
 8002dec:	08002e61 	.word	0x08002e61
 8002df0:	08002e61 	.word	0x08002e61
 8002df4:	08002e61 	.word	0x08002e61
 8002df8:	08002e67 	.word	0x08002e67
 8002dfc:	08002e61 	.word	0x08002e61
 8002e00:	08002e61 	.word	0x08002e61
 8002e04:	08002e61 	.word	0x08002e61
 8002e08:	08002e61 	.word	0x08002e61
 8002e0c:	08002e61 	.word	0x08002e61
 8002e10:	08002e61 	.word	0x08002e61
 8002e14:	08002e61 	.word	0x08002e61
 8002e18:	08002e67 	.word	0x08002e67
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e67 	.word	0x08002e67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fdf8 	bl	8003a38 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fea1 	bl	8003b9c <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e6e:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7c:	4942      	ldr	r1, [pc, #264]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	654b      	str	r3, [r1, #84]	; 0x54
 8002e82:	e001      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d038      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d821      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ee7 	.word	0x08002ee7
 8002ea8:	08002ebd 	.word	0x08002ebd
 8002eac:	08002ecf 	.word	0x08002ecf
 8002eb0:	08002ee7 	.word	0x08002ee7
 8002eb4:	08002ee7 	.word	0x08002ee7
 8002eb8:	08002ee7 	.word	0x08002ee7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fdb8 	bl	8003a38 <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fe61 	bl	8003b9c <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efa:	4923      	ldr	r1, [pc, #140]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	654b      	str	r3, [r1, #84]	; 0x54
 8002f00:	e001      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d040      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d821      	bhi.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f67 	.word	0x08002f67
 8002f28:	08002f3d 	.word	0x08002f3d
 8002f2c:	08002f4f 	.word	0x08002f4f
 8002f30:	08002f67 	.word	0x08002f67
 8002f34:	08002f67 	.word	0x08002f67
 8002f38:	08002f67 	.word	0x08002f67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fd78 	bl	8003a38 <RCCEx_PLL2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f4c:	e00c      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3324      	adds	r3, #36	; 0x24
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fe21 	bl	8003b9c <RCCEx_PLL3_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f5e:	e003      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
      break;
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d110      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7c:	4902      	ldr	r1, [pc, #8]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	658b      	str	r3, [r1, #88]	; 0x58
 8002f82:	e007      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002f84:	58024800 	.word	0x58024800
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d04b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002faa:	d02e      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb0:	d828      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d02a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d822      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fc2:	d026      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002fc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fc8:	d81c      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd4:	d816      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01d      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fde:	d111      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fd26 	bl	8003a38 <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ff0:	e012      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3324      	adds	r3, #36	; 0x24
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fdcf 	bl	8003b9c <RCCEx_PLL3_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003002:	e009      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
      break;
 8003008:	e006      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800300a:	bf00      	nop
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301e:	4bb3      	ldr	r3, [pc, #716]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302c:	49af      	ldr	r1, [pc, #700]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800302e:	4313      	orrs	r3, r2
 8003030:	654b      	str	r3, [r1, #84]	; 0x54
 8003032:	e001      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d04b      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800304a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800304e:	d02e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003050:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003054:	d828      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	d02a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d822      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003062:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003066:	d026      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800306c:	d81c      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800306e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003072:	d010      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d816      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01d      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d111      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fcd4 	bl	8003a38 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003094:	e012      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	2102      	movs	r1, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd7d 	bl	8003b9c <RCCEx_PLL3_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c2:	4b8a      	ldr	r3, [pc, #552]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030d0:	4986      	ldr	r1, [pc, #536]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	658b      	str	r3, [r1, #88]	; 0x58
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d04b      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030f2:	d02e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80030f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030f8:	d828      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fe:	d02a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d822      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003106:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800310a:	d026      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800310c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003110:	d81c      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003116:	d010      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311c:	d816      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01d      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d111      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fc82 	bl	8003a38 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003138:	e012      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3324      	adds	r3, #36	; 0x24
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd2b 	bl	8003b9c <RCCEx_PLL3_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
      break;
 8003150:	e006      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003152:	bf00      	nop
 8003154:	e004      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003156:	bf00      	nop
 8003158:	e002      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800315e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003166:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003174:	495d      	ldr	r1, [pc, #372]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003176:	4313      	orrs	r3, r2
 8003178:	658b      	str	r3, [r1, #88]	; 0x58
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fcfc 	bl	8003b9c <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	494b      	ldr	r1, [pc, #300]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d10a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fcdb 	bl	8003b9c <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031f0:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031fe:	493b      	ldr	r1, [pc, #236]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003200:	4313      	orrs	r3, r2
 8003202:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d034      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321a:	d01d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800321c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003220:	d817      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800322c:	e011      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fbff 	bl	8003a38 <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3324      	adds	r3, #36	; 0x24
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fca8 	bl	8003b9c <RCCEx_PLL3_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800326e:	491f      	ldr	r1, [pc, #124]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003270:	4313      	orrs	r3, r2
 8003272:	658b      	str	r3, [r1, #88]	; 0x58
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d01c      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003296:	d816      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800329c:	d003      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800329e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a2:	d007      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80032a4:	e00f      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fc6e 	bl	8003b9c <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e2:	4902      	ldr	r1, [pc, #8]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	654b      	str	r3, [r1, #84]	; 0x54
 80032e8:	e004      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d029      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d007      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800330e:	e00f      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	4a68      	ldr	r2, [pc, #416]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800331c:	e00b      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fb87 	bl	8003a38 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800332e:	e002      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800333c:	4b5e      	ldr	r3, [pc, #376]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	495b      	ldr	r1, [pc, #364]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800334a:	4313      	orrs	r3, r2
 800334c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fc18 	bl	8003b9c <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d032      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338c:	d017      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800338e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003392:	d811      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d013      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d80b      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	4a42      	ldr	r2, [pc, #264]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80033b6:	e007      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ce:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033dc:	4936      	ldr	r1, [pc, #216]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	654b      	str	r3, [r1, #84]	; 0x54
 80033e2:	e001      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003400:	492d      	ldr	r1, [pc, #180]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003402:	4313      	orrs	r3, r2
 8003404:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	4926      	ldr	r1, [pc, #152]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003420:	4313      	orrs	r3, r2
 8003422:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	491e      	ldr	r1, [pc, #120]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800343e:	4313      	orrs	r3, r2
 8003440:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003458:	6113      	str	r3, [r2, #16]
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003464:	4914      	ldr	r1, [pc, #80]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003466:	4313      	orrs	r3, r2
 8003468:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da08      	bge.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347e:	490e      	ldr	r1, [pc, #56]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003480:	4313      	orrs	r3, r2
 8003482:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400

080034bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80034c0:	f7ff f894 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4904      	ldr	r1, [pc, #16]	; (80034e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	08005174 	.word	0x08005174

080034e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034f0:	4ba1      	ldr	r3, [pc, #644]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034fa:	4b9f      	ldr	r3, [pc, #636]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	0b1b      	lsrs	r3, r3, #12
 8003500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003504:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003506:	4b9c      	ldr	r3, [pc, #624]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003512:	4b99      	ldr	r3, [pc, #612]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8111 	beq.w	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b02      	cmp	r3, #2
 800353a:	f000 8083 	beq.w	8003644 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b02      	cmp	r3, #2
 8003542:	f200 80a1 	bhi.w	8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d056      	beq.n	8003600 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003552:	e099      	b.n	8003688 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02d      	beq.n	80035bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003560:	4b85      	ldr	r3, [pc, #532]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	4a84      	ldr	r2, [pc, #528]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358a:	4b7b      	ldr	r3, [pc, #492]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 6a03 	vldr	s12, [r7, #12]
 800359e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80035ba:	e087      	b.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80035ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035de:	ed97 6a03 	vldr	s12, [r7, #12]
 80035e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035fe:	e065      	b.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800360e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003612:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a03 	vldr	s12, [r7, #12]
 8003626:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003642:	e043      	b.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800378c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b48      	ldr	r3, [pc, #288]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a03 	vldr	s12, [r7, #12]
 800366a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003686:	e021      	b.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	0a5b      	lsrs	r3, r3, #9
 80036d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f2:	ee17 2a90 	vmov	r2, s15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003714:	edd7 6a07 	vldr	s13, [r7, #28]
 8003718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003720:	ee17 2a90 	vmov	r2, s15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	0e1b      	lsrs	r3, r3, #24
 800372e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003742:	edd7 6a07 	vldr	s13, [r7, #28]
 8003746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374e:	ee17 2a90 	vmov	r2, s15
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003756:	e008      	b.n	800376a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
 800377c:	03d09000 	.word	0x03d09000
 8003780:	46000000 	.word	0x46000000
 8003784:	4c742400 	.word	0x4c742400
 8003788:	4a742400 	.word	0x4a742400
 800378c:	4af42400 	.word	0x4af42400

08003790 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003798:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80037a2:	4b9f      	ldr	r3, [pc, #636]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	0d1b      	lsrs	r3, r3, #20
 80037a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80037ae:	4b9c      	ldr	r3, [pc, #624]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037ba:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8111 	beq.w	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	f000 8083 	beq.w	80038ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f200 80a1 	bhi.w	8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d056      	beq.n	80038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037fa:	e099      	b.n	8003930 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b7b      	ldr	r3, [pc, #492]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a03 	vldr	s12, [r7, #12]
 8003846:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003862:	e087      	b.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a03 	vldr	s12, [r7, #12]
 800388a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038a6:	e065      	b.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ea:	e043      	b.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800392e:	e021      	b.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003972:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c8:	ee17 2a90 	vmov	r2, s15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	ee17 2a90 	vmov	r2, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	03d09000 	.word	0x03d09000
 8003a28:	46000000 	.word	0x46000000
 8003a2c:	4c742400 	.word	0x4c742400
 8003a30:	4a742400 	.word	0x4a742400
 8003a34:	4af42400 	.word	0x4af42400

08003a38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a46:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d101      	bne.n	8003a56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e099      	b.n	8003b8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a56:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4e      	ldr	r2, [pc, #312]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fd fb3d 	bl	80010e0 <HAL_GetTick>
 8003a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a68:	e008      	b.n	8003a7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a6a:	f7fd fb39 	bl	80010e0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e086      	b.n	8003b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a7c:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a88:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	493f      	ldr	r1, [pc, #252]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003acc:	4931      	ldr	r1, [pc, #196]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ad2:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	492d      	ldr	r1, [pc, #180]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f023 0220 	bic.w	r2, r3, #32
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4928      	ldr	r1, [pc, #160]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003af6:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <RCCEx_PLL2_Config+0x160>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	69d2      	ldr	r2, [r2, #28]
 8003b0e:	00d2      	lsls	r2, r2, #3
 8003b10:	4920      	ldr	r1, [pc, #128]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	f043 0310 	orr.w	r3, r3, #16
 8003b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b34:	e00f      	b.n	8003b56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b48:	e005      	b.n	8003b56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd fabd 	bl	80010e0 <HAL_GetTick>
 8003b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b6a:	f7fd fab9 	bl	80010e0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e006      	b.n	8003b8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <RCCEx_PLL2_Config+0x15c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400
 8003b98:	ffff0007 	.word	0xffff0007

08003b9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003baa:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d101      	bne.n	8003bba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e099      	b.n	8003cee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003bba:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fd fa8b 	bl	80010e0 <HAL_GetTick>
 8003bca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bce:	f7fd fa87 	bl	80010e0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e086      	b.n	8003cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bec:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	051b      	lsls	r3, r3, #20
 8003bfa:	493f      	ldr	r1, [pc, #252]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	628b      	str	r3, [r1, #40]	; 0x28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	025b      	lsls	r3, r3, #9
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c30:	4931      	ldr	r1, [pc, #196]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	4928      	ldr	r1, [pc, #160]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <RCCEx_PLL3_Config+0x160>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	69d2      	ldr	r2, [r2, #28]
 8003c72:	00d2      	lsls	r2, r2, #3
 8003c74:	4920      	ldr	r1, [pc, #128]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003c92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c98:	e00f      	b.n	8003cba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cac:	e005      	b.n	8003cba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc6:	f7fd fa0b 	bl	80010e0 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ccc:	e008      	b.n	8003ce0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cce:	f7fd fa07 	bl	80010e0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e006      	b.n	8003cee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <RCCEx_PLL3_Config+0x15c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	ffff0007 	.word	0xffff0007

08003d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e042      	b.n	8003d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fd f823 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2224      	movs	r2, #36	; 0x24
 8003d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f82c 	bl	8003da0 <UART_SetConfig>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e022      	b.n	8003d98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fe7e 	bl	8004a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 ff05 	bl	8004ba0 <UART_CheckIdleState>
 8003d96:	4603      	mov	r3, r0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	b08e      	sub	sp, #56	; 0x38
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4bbf      	ldr	r3, [pc, #764]	; (80040cc <UART_SetConfig+0x32c>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4ab5      	ldr	r2, [pc, #724]	; (80040d0 <UART_SetConfig+0x330>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e06:	4313      	orrs	r3, r2
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	4bb0      	ldr	r3, [pc, #704]	; (80040d4 <UART_SetConfig+0x334>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f023 010f 	bic.w	r1, r3, #15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4aa7      	ldr	r2, [pc, #668]	; (80040d8 <UART_SetConfig+0x338>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d176      	bne.n	8003f2c <UART_SetConfig+0x18c>
 8003e3e:	4ba7      	ldr	r3, [pc, #668]	; (80040dc <UART_SetConfig+0x33c>)
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e46:	2b28      	cmp	r3, #40	; 0x28
 8003e48:	d86c      	bhi.n	8003f24 <UART_SetConfig+0x184>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0xb0>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003ef5 	.word	0x08003ef5
 8003e54:	08003f25 	.word	0x08003f25
 8003e58:	08003f25 	.word	0x08003f25
 8003e5c:	08003f25 	.word	0x08003f25
 8003e60:	08003f25 	.word	0x08003f25
 8003e64:	08003f25 	.word	0x08003f25
 8003e68:	08003f25 	.word	0x08003f25
 8003e6c:	08003f25 	.word	0x08003f25
 8003e70:	08003efd 	.word	0x08003efd
 8003e74:	08003f25 	.word	0x08003f25
 8003e78:	08003f25 	.word	0x08003f25
 8003e7c:	08003f25 	.word	0x08003f25
 8003e80:	08003f25 	.word	0x08003f25
 8003e84:	08003f25 	.word	0x08003f25
 8003e88:	08003f25 	.word	0x08003f25
 8003e8c:	08003f25 	.word	0x08003f25
 8003e90:	08003f05 	.word	0x08003f05
 8003e94:	08003f25 	.word	0x08003f25
 8003e98:	08003f25 	.word	0x08003f25
 8003e9c:	08003f25 	.word	0x08003f25
 8003ea0:	08003f25 	.word	0x08003f25
 8003ea4:	08003f25 	.word	0x08003f25
 8003ea8:	08003f25 	.word	0x08003f25
 8003eac:	08003f25 	.word	0x08003f25
 8003eb0:	08003f0d 	.word	0x08003f0d
 8003eb4:	08003f25 	.word	0x08003f25
 8003eb8:	08003f25 	.word	0x08003f25
 8003ebc:	08003f25 	.word	0x08003f25
 8003ec0:	08003f25 	.word	0x08003f25
 8003ec4:	08003f25 	.word	0x08003f25
 8003ec8:	08003f25 	.word	0x08003f25
 8003ecc:	08003f25 	.word	0x08003f25
 8003ed0:	08003f15 	.word	0x08003f15
 8003ed4:	08003f25 	.word	0x08003f25
 8003ed8:	08003f25 	.word	0x08003f25
 8003edc:	08003f25 	.word	0x08003f25
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003f25 	.word	0x08003f25
 8003ee8:	08003f25 	.word	0x08003f25
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efa:	e326      	b.n	800454a <UART_SetConfig+0x7aa>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f02:	e322      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f0a:	e31e      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f12:	e31a      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f14:	2320      	movs	r3, #32
 8003f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f1a:	e316      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f1c:	2340      	movs	r3, #64	; 0x40
 8003f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f22:	e312      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f2a:	e30e      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <UART_SetConfig+0x340>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d130      	bne.n	8003f98 <UART_SetConfig+0x1f8>
 8003f36:	4b69      	ldr	r3, [pc, #420]	; (80040dc <UART_SetConfig+0x33c>)
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d826      	bhi.n	8003f90 <UART_SetConfig+0x1f0>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x1a8>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	08003f71 	.word	0x08003f71
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f66:	e2f0      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6e:	e2ec      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f70:	2308      	movs	r3, #8
 8003f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f76:	e2e8      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7e:	e2e4      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f80:	2320      	movs	r3, #32
 8003f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f86:	e2e0      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f88:	2340      	movs	r3, #64	; 0x40
 8003f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8e:	e2dc      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f96:	e2d8      	b.n	800454a <UART_SetConfig+0x7aa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <UART_SetConfig+0x344>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d130      	bne.n	8004004 <UART_SetConfig+0x264>
 8003fa2:	4b4e      	ldr	r3, [pc, #312]	; (80040dc <UART_SetConfig+0x33c>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d826      	bhi.n	8003ffc <UART_SetConfig+0x25c>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <UART_SetConfig+0x214>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fcd 	.word	0x08003fcd
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	08003fdd 	.word	0x08003fdd
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd2:	e2ba      	b.n	800454a <UART_SetConfig+0x7aa>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fda:	e2b6      	b.n	800454a <UART_SetConfig+0x7aa>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe2:	e2b2      	b.n	800454a <UART_SetConfig+0x7aa>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fea:	e2ae      	b.n	800454a <UART_SetConfig+0x7aa>
 8003fec:	2320      	movs	r3, #32
 8003fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff2:	e2aa      	b.n	800454a <UART_SetConfig+0x7aa>
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffa:	e2a6      	b.n	800454a <UART_SetConfig+0x7aa>
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004002:	e2a2      	b.n	800454a <UART_SetConfig+0x7aa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <UART_SetConfig+0x348>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d130      	bne.n	8004070 <UART_SetConfig+0x2d0>
 800400e:	4b33      	ldr	r3, [pc, #204]	; (80040dc <UART_SetConfig+0x33c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	2b05      	cmp	r3, #5
 8004018:	d826      	bhi.n	8004068 <UART_SetConfig+0x2c8>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x280>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004039 	.word	0x08004039
 8004024:	08004041 	.word	0x08004041
 8004028:	08004049 	.word	0x08004049
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	2300      	movs	r3, #0
 800403a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403e:	e284      	b.n	800454a <UART_SetConfig+0x7aa>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004046:	e280      	b.n	800454a <UART_SetConfig+0x7aa>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404e:	e27c      	b.n	800454a <UART_SetConfig+0x7aa>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004056:	e278      	b.n	800454a <UART_SetConfig+0x7aa>
 8004058:	2320      	movs	r3, #32
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405e:	e274      	b.n	800454a <UART_SetConfig+0x7aa>
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004066:	e270      	b.n	800454a <UART_SetConfig+0x7aa>
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406e:	e26c      	b.n	800454a <UART_SetConfig+0x7aa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <UART_SetConfig+0x34c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d142      	bne.n	8004100 <UART_SetConfig+0x360>
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <UART_SetConfig+0x33c>)
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b05      	cmp	r3, #5
 8004084:	d838      	bhi.n	80040f8 <UART_SetConfig+0x358>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x2ec>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040aa:	e24e      	b.n	800454a <UART_SetConfig+0x7aa>
 80040ac:	2304      	movs	r3, #4
 80040ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b2:	e24a      	b.n	800454a <UART_SetConfig+0x7aa>
 80040b4:	2308      	movs	r3, #8
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e246      	b.n	800454a <UART_SetConfig+0x7aa>
 80040bc:	2310      	movs	r3, #16
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c2:	e242      	b.n	800454a <UART_SetConfig+0x7aa>
 80040c4:	2320      	movs	r3, #32
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e23e      	b.n	800454a <UART_SetConfig+0x7aa>
 80040cc:	cfff69f3 	.word	0xcfff69f3
 80040d0:	58000c00 	.word	0x58000c00
 80040d4:	11fff4ff 	.word	0x11fff4ff
 80040d8:	40011000 	.word	0x40011000
 80040dc:	58024400 	.word	0x58024400
 80040e0:	40004400 	.word	0x40004400
 80040e4:	40004800 	.word	0x40004800
 80040e8:	40004c00 	.word	0x40004c00
 80040ec:	40005000 	.word	0x40005000
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f6:	e228      	b.n	800454a <UART_SetConfig+0x7aa>
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fe:	e224      	b.n	800454a <UART_SetConfig+0x7aa>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4ab1      	ldr	r2, [pc, #708]	; (80043cc <UART_SetConfig+0x62c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d176      	bne.n	80041f8 <UART_SetConfig+0x458>
 800410a:	4bb1      	ldr	r3, [pc, #708]	; (80043d0 <UART_SetConfig+0x630>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004112:	2b28      	cmp	r3, #40	; 0x28
 8004114:	d86c      	bhi.n	80041f0 <UART_SetConfig+0x450>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x37c>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	080041c1 	.word	0x080041c1
 8004120:	080041f1 	.word	0x080041f1
 8004124:	080041f1 	.word	0x080041f1
 8004128:	080041f1 	.word	0x080041f1
 800412c:	080041f1 	.word	0x080041f1
 8004130:	080041f1 	.word	0x080041f1
 8004134:	080041f1 	.word	0x080041f1
 8004138:	080041f1 	.word	0x080041f1
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041f1 	.word	0x080041f1
 8004144:	080041f1 	.word	0x080041f1
 8004148:	080041f1 	.word	0x080041f1
 800414c:	080041f1 	.word	0x080041f1
 8004150:	080041f1 	.word	0x080041f1
 8004154:	080041f1 	.word	0x080041f1
 8004158:	080041f1 	.word	0x080041f1
 800415c:	080041d1 	.word	0x080041d1
 8004160:	080041f1 	.word	0x080041f1
 8004164:	080041f1 	.word	0x080041f1
 8004168:	080041f1 	.word	0x080041f1
 800416c:	080041f1 	.word	0x080041f1
 8004170:	080041f1 	.word	0x080041f1
 8004174:	080041f1 	.word	0x080041f1
 8004178:	080041f1 	.word	0x080041f1
 800417c:	080041d9 	.word	0x080041d9
 8004180:	080041f1 	.word	0x080041f1
 8004184:	080041f1 	.word	0x080041f1
 8004188:	080041f1 	.word	0x080041f1
 800418c:	080041f1 	.word	0x080041f1
 8004190:	080041f1 	.word	0x080041f1
 8004194:	080041f1 	.word	0x080041f1
 8004198:	080041f1 	.word	0x080041f1
 800419c:	080041e1 	.word	0x080041e1
 80041a0:	080041f1 	.word	0x080041f1
 80041a4:	080041f1 	.word	0x080041f1
 80041a8:	080041f1 	.word	0x080041f1
 80041ac:	080041f1 	.word	0x080041f1
 80041b0:	080041f1 	.word	0x080041f1
 80041b4:	080041f1 	.word	0x080041f1
 80041b8:	080041f1 	.word	0x080041f1
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c6:	e1c0      	b.n	800454a <UART_SetConfig+0x7aa>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ce:	e1bc      	b.n	800454a <UART_SetConfig+0x7aa>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d6:	e1b8      	b.n	800454a <UART_SetConfig+0x7aa>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041de:	e1b4      	b.n	800454a <UART_SetConfig+0x7aa>
 80041e0:	2320      	movs	r3, #32
 80041e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e6:	e1b0      	b.n	800454a <UART_SetConfig+0x7aa>
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ee:	e1ac      	b.n	800454a <UART_SetConfig+0x7aa>
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041f6:	e1a8      	b.n	800454a <UART_SetConfig+0x7aa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <UART_SetConfig+0x634>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d130      	bne.n	8004264 <UART_SetConfig+0x4c4>
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <UART_SetConfig+0x630>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b05      	cmp	r3, #5
 800420c:	d826      	bhi.n	800425c <UART_SetConfig+0x4bc>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x474>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004232:	e18a      	b.n	800454a <UART_SetConfig+0x7aa>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423a:	e186      	b.n	800454a <UART_SetConfig+0x7aa>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004242:	e182      	b.n	800454a <UART_SetConfig+0x7aa>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424a:	e17e      	b.n	800454a <UART_SetConfig+0x7aa>
 800424c:	2320      	movs	r3, #32
 800424e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004252:	e17a      	b.n	800454a <UART_SetConfig+0x7aa>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800425a:	e176      	b.n	800454a <UART_SetConfig+0x7aa>
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004262:	e172      	b.n	800454a <UART_SetConfig+0x7aa>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <UART_SetConfig+0x638>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d130      	bne.n	80042d0 <UART_SetConfig+0x530>
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <UART_SetConfig+0x630>)
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b05      	cmp	r3, #5
 8004278:	d826      	bhi.n	80042c8 <UART_SetConfig+0x528>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x4e0>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004299 	.word	0x08004299
 8004284:	080042a1 	.word	0x080042a1
 8004288:	080042a9 	.word	0x080042a9
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c1 	.word	0x080042c1
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429e:	e154      	b.n	800454a <UART_SetConfig+0x7aa>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a6:	e150      	b.n	800454a <UART_SetConfig+0x7aa>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ae:	e14c      	b.n	800454a <UART_SetConfig+0x7aa>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b6:	e148      	b.n	800454a <UART_SetConfig+0x7aa>
 80042b8:	2320      	movs	r3, #32
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042be:	e144      	b.n	800454a <UART_SetConfig+0x7aa>
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c6:	e140      	b.n	800454a <UART_SetConfig+0x7aa>
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ce:	e13c      	b.n	800454a <UART_SetConfig+0x7aa>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <UART_SetConfig+0x63c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f040 8082 	bne.w	80043e0 <UART_SetConfig+0x640>
 80042dc:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <UART_SetConfig+0x630>)
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	2b28      	cmp	r3, #40	; 0x28
 80042e6:	d86d      	bhi.n	80043c4 <UART_SetConfig+0x624>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x550>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004395 	.word	0x08004395
 80042f4:	080043c5 	.word	0x080043c5
 80042f8:	080043c5 	.word	0x080043c5
 80042fc:	080043c5 	.word	0x080043c5
 8004300:	080043c5 	.word	0x080043c5
 8004304:	080043c5 	.word	0x080043c5
 8004308:	080043c5 	.word	0x080043c5
 800430c:	080043c5 	.word	0x080043c5
 8004310:	0800439d 	.word	0x0800439d
 8004314:	080043c5 	.word	0x080043c5
 8004318:	080043c5 	.word	0x080043c5
 800431c:	080043c5 	.word	0x080043c5
 8004320:	080043c5 	.word	0x080043c5
 8004324:	080043c5 	.word	0x080043c5
 8004328:	080043c5 	.word	0x080043c5
 800432c:	080043c5 	.word	0x080043c5
 8004330:	080043a5 	.word	0x080043a5
 8004334:	080043c5 	.word	0x080043c5
 8004338:	080043c5 	.word	0x080043c5
 800433c:	080043c5 	.word	0x080043c5
 8004340:	080043c5 	.word	0x080043c5
 8004344:	080043c5 	.word	0x080043c5
 8004348:	080043c5 	.word	0x080043c5
 800434c:	080043c5 	.word	0x080043c5
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043c5 	.word	0x080043c5
 8004358:	080043c5 	.word	0x080043c5
 800435c:	080043c5 	.word	0x080043c5
 8004360:	080043c5 	.word	0x080043c5
 8004364:	080043c5 	.word	0x080043c5
 8004368:	080043c5 	.word	0x080043c5
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043b5 	.word	0x080043b5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043c5 	.word	0x080043c5
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439a:	e0d6      	b.n	800454a <UART_SetConfig+0x7aa>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a2:	e0d2      	b.n	800454a <UART_SetConfig+0x7aa>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043aa:	e0ce      	b.n	800454a <UART_SetConfig+0x7aa>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b2:	e0ca      	b.n	800454a <UART_SetConfig+0x7aa>
 80043b4:	2320      	movs	r3, #32
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ba:	e0c6      	b.n	800454a <UART_SetConfig+0x7aa>
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c2:	e0c2      	b.n	800454a <UART_SetConfig+0x7aa>
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ca:	e0be      	b.n	800454a <UART_SetConfig+0x7aa>
 80043cc:	40011400 	.word	0x40011400
 80043d0:	58024400 	.word	0x58024400
 80043d4:	40007800 	.word	0x40007800
 80043d8:	40007c00 	.word	0x40007c00
 80043dc:	40011800 	.word	0x40011800
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4aad      	ldr	r2, [pc, #692]	; (800469c <UART_SetConfig+0x8fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d176      	bne.n	80044d8 <UART_SetConfig+0x738>
 80043ea:	4bad      	ldr	r3, [pc, #692]	; (80046a0 <UART_SetConfig+0x900>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f2:	2b28      	cmp	r3, #40	; 0x28
 80043f4:	d86c      	bhi.n	80044d0 <UART_SetConfig+0x730>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x65c>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	080044d1 	.word	0x080044d1
 8004404:	080044d1 	.word	0x080044d1
 8004408:	080044d1 	.word	0x080044d1
 800440c:	080044d1 	.word	0x080044d1
 8004410:	080044d1 	.word	0x080044d1
 8004414:	080044d1 	.word	0x080044d1
 8004418:	080044d1 	.word	0x080044d1
 800441c:	080044a9 	.word	0x080044a9
 8004420:	080044d1 	.word	0x080044d1
 8004424:	080044d1 	.word	0x080044d1
 8004428:	080044d1 	.word	0x080044d1
 800442c:	080044d1 	.word	0x080044d1
 8004430:	080044d1 	.word	0x080044d1
 8004434:	080044d1 	.word	0x080044d1
 8004438:	080044d1 	.word	0x080044d1
 800443c:	080044b1 	.word	0x080044b1
 8004440:	080044d1 	.word	0x080044d1
 8004444:	080044d1 	.word	0x080044d1
 8004448:	080044d1 	.word	0x080044d1
 800444c:	080044d1 	.word	0x080044d1
 8004450:	080044d1 	.word	0x080044d1
 8004454:	080044d1 	.word	0x080044d1
 8004458:	080044d1 	.word	0x080044d1
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044d1 	.word	0x080044d1
 8004464:	080044d1 	.word	0x080044d1
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044d1 	.word	0x080044d1
 8004470:	080044d1 	.word	0x080044d1
 8004474:	080044d1 	.word	0x080044d1
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044c1 	.word	0x080044c1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044d1 	.word	0x080044d1
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d1 	.word	0x080044d1
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a6:	e050      	b.n	800454a <UART_SetConfig+0x7aa>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ae:	e04c      	b.n	800454a <UART_SetConfig+0x7aa>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b6:	e048      	b.n	800454a <UART_SetConfig+0x7aa>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044be:	e044      	b.n	800454a <UART_SetConfig+0x7aa>
 80044c0:	2320      	movs	r3, #32
 80044c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044c6:	e040      	b.n	800454a <UART_SetConfig+0x7aa>
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ce:	e03c      	b.n	800454a <UART_SetConfig+0x7aa>
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044d6:	e038      	b.n	800454a <UART_SetConfig+0x7aa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a71      	ldr	r2, [pc, #452]	; (80046a4 <UART_SetConfig+0x904>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d130      	bne.n	8004544 <UART_SetConfig+0x7a4>
 80044e2:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <UART_SetConfig+0x900>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d826      	bhi.n	800453c <UART_SetConfig+0x79c>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x754>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	0800450d 	.word	0x0800450d
 80044f8:	08004515 	.word	0x08004515
 80044fc:	0800451d 	.word	0x0800451d
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	2302      	movs	r3, #2
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e01a      	b.n	800454a <UART_SetConfig+0x7aa>
 8004514:	2304      	movs	r3, #4
 8004516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451a:	e016      	b.n	800454a <UART_SetConfig+0x7aa>
 800451c:	2308      	movs	r3, #8
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004522:	e012      	b.n	800454a <UART_SetConfig+0x7aa>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452a:	e00e      	b.n	800454a <UART_SetConfig+0x7aa>
 800452c:	2320      	movs	r3, #32
 800452e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004532:	e00a      	b.n	800454a <UART_SetConfig+0x7aa>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453a:	e006      	b.n	800454a <UART_SetConfig+0x7aa>
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004542:	e002      	b.n	800454a <UART_SetConfig+0x7aa>
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a55      	ldr	r2, [pc, #340]	; (80046a4 <UART_SetConfig+0x904>)
 8004550:	4293      	cmp	r3, r2
 8004552:	f040 80f0 	bne.w	8004736 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800455a:	2b20      	cmp	r3, #32
 800455c:	dc46      	bgt.n	80045ec <UART_SetConfig+0x84c>
 800455e:	2b02      	cmp	r3, #2
 8004560:	db75      	blt.n	800464e <UART_SetConfig+0x8ae>
 8004562:	3b02      	subs	r3, #2
 8004564:	2b1e      	cmp	r3, #30
 8004566:	d872      	bhi.n	800464e <UART_SetConfig+0x8ae>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x7d0>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045f3 	.word	0x080045f3
 8004574:	0800464f 	.word	0x0800464f
 8004578:	080045fb 	.word	0x080045fb
 800457c:	0800464f 	.word	0x0800464f
 8004580:	0800464f 	.word	0x0800464f
 8004584:	0800464f 	.word	0x0800464f
 8004588:	0800460b 	.word	0x0800460b
 800458c:	0800464f 	.word	0x0800464f
 8004590:	0800464f 	.word	0x0800464f
 8004594:	0800464f 	.word	0x0800464f
 8004598:	0800464f 	.word	0x0800464f
 800459c:	0800464f 	.word	0x0800464f
 80045a0:	0800464f 	.word	0x0800464f
 80045a4:	0800464f 	.word	0x0800464f
 80045a8:	0800461b 	.word	0x0800461b
 80045ac:	0800464f 	.word	0x0800464f
 80045b0:	0800464f 	.word	0x0800464f
 80045b4:	0800464f 	.word	0x0800464f
 80045b8:	0800464f 	.word	0x0800464f
 80045bc:	0800464f 	.word	0x0800464f
 80045c0:	0800464f 	.word	0x0800464f
 80045c4:	0800464f 	.word	0x0800464f
 80045c8:	0800464f 	.word	0x0800464f
 80045cc:	0800464f 	.word	0x0800464f
 80045d0:	0800464f 	.word	0x0800464f
 80045d4:	0800464f 	.word	0x0800464f
 80045d8:	0800464f 	.word	0x0800464f
 80045dc:	0800464f 	.word	0x0800464f
 80045e0:	0800464f 	.word	0x0800464f
 80045e4:	0800464f 	.word	0x0800464f
 80045e8:	08004641 	.word	0x08004641
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d02a      	beq.n	8004646 <UART_SetConfig+0x8a6>
 80045f0:	e02d      	b.n	800464e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80045f2:	f7fe ff63 	bl	80034bc <HAL_RCCEx_GetD3PCLK1Freq>
 80045f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045f8:	e02f      	b.n	800465a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045fa:	f107 0314 	add.w	r3, r7, #20
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe ff72 	bl	80034e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004608:	e027      	b.n	800465a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff f8be 	bl	8003790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004618:	e01f      	b.n	800465a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <UART_SetConfig+0x900>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <UART_SetConfig+0x900>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	08db      	lsrs	r3, r3, #3
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <UART_SetConfig+0x908>)
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004638:	e00f      	b.n	800465a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <UART_SetConfig+0x908>)
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800463e:	e00c      	b.n	800465a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <UART_SetConfig+0x90c>)
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 81e6 	beq.w	8004a2e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <UART_SetConfig+0x910>)
 8004668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800466c:	461a      	mov	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	fbb3 f3f2 	udiv	r3, r3, r2
 8004674:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	429a      	cmp	r2, r3
 8004684:	d305      	bcc.n	8004692 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	429a      	cmp	r2, r3
 8004690:	d910      	bls.n	80046b4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004698:	e1c9      	b.n	8004a2e <UART_SetConfig+0xc8e>
 800469a:	bf00      	nop
 800469c:	40011c00 	.word	0x40011c00
 80046a0:	58024400 	.word	0x58024400
 80046a4:	58000c00 	.word	0x58000c00
 80046a8:	03d09000 	.word	0x03d09000
 80046ac:	003d0900 	.word	0x003d0900
 80046b0:	08005184 	.word	0x08005184
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	4618      	mov	r0, r3
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	4ac1      	ldr	r2, [pc, #772]	; (80049c8 <UART_SetConfig+0xc28>)
 80046c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	f7fb fe0e 	bl	80002ec <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	020b      	lsls	r3, r1, #8
 80046e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e6:	0202      	lsls	r2, r0, #8
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	6849      	ldr	r1, [r1, #4]
 80046ec:	0849      	lsrs	r1, r1, #1
 80046ee:	4608      	mov	r0, r1
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	1814      	adds	r4, r2, r0
 80046f6:	eb43 0501 	adc.w	r5, r3, r1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	461a      	mov	r2, r3
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7fb fdf0 	bl	80002ec <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471a:	d308      	bcc.n	800472e <UART_SetConfig+0x98e>
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d204      	bcs.n	800472e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e17f      	b.n	8004a2e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004734:	e17b      	b.n	8004a2e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473e:	f040 80bd 	bne.w	80048bc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004746:	2b20      	cmp	r3, #32
 8004748:	dc48      	bgt.n	80047dc <UART_SetConfig+0xa3c>
 800474a:	2b00      	cmp	r3, #0
 800474c:	db7b      	blt.n	8004846 <UART_SetConfig+0xaa6>
 800474e:	2b20      	cmp	r3, #32
 8004750:	d879      	bhi.n	8004846 <UART_SetConfig+0xaa6>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x9b8>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	080047e3 	.word	0x080047e3
 800475c:	080047eb 	.word	0x080047eb
 8004760:	08004847 	.word	0x08004847
 8004764:	08004847 	.word	0x08004847
 8004768:	080047f3 	.word	0x080047f3
 800476c:	08004847 	.word	0x08004847
 8004770:	08004847 	.word	0x08004847
 8004774:	08004847 	.word	0x08004847
 8004778:	08004803 	.word	0x08004803
 800477c:	08004847 	.word	0x08004847
 8004780:	08004847 	.word	0x08004847
 8004784:	08004847 	.word	0x08004847
 8004788:	08004847 	.word	0x08004847
 800478c:	08004847 	.word	0x08004847
 8004790:	08004847 	.word	0x08004847
 8004794:	08004847 	.word	0x08004847
 8004798:	08004813 	.word	0x08004813
 800479c:	08004847 	.word	0x08004847
 80047a0:	08004847 	.word	0x08004847
 80047a4:	08004847 	.word	0x08004847
 80047a8:	08004847 	.word	0x08004847
 80047ac:	08004847 	.word	0x08004847
 80047b0:	08004847 	.word	0x08004847
 80047b4:	08004847 	.word	0x08004847
 80047b8:	08004847 	.word	0x08004847
 80047bc:	08004847 	.word	0x08004847
 80047c0:	08004847 	.word	0x08004847
 80047c4:	08004847 	.word	0x08004847
 80047c8:	08004847 	.word	0x08004847
 80047cc:	08004847 	.word	0x08004847
 80047d0:	08004847 	.word	0x08004847
 80047d4:	08004847 	.word	0x08004847
 80047d8:	08004839 	.word	0x08004839
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d02e      	beq.n	800483e <UART_SetConfig+0xa9e>
 80047e0:	e031      	b.n	8004846 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e2:	f7fd ff33 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80047e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80047e8:	e033      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ea:	f7fd ff45 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 80047ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80047f0:	e02f      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f2:	f107 0314 	add.w	r3, r7, #20
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fe76 	bl	80034e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004800:	e027      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe ffc2 	bl	8003790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004810:	e01f      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004812:	4b6e      	ldr	r3, [pc, #440]	; (80049cc <UART_SetConfig+0xc2c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800481e:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <UART_SetConfig+0xc2c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	08db      	lsrs	r3, r3, #3
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	4a69      	ldr	r2, [pc, #420]	; (80049d0 <UART_SetConfig+0xc30>)
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004830:	e00f      	b.n	8004852 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004832:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <UART_SetConfig+0xc30>)
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004836:	e00c      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <UART_SetConfig+0xc34>)
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80ea 	beq.w	8004a2e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <UART_SetConfig+0xc28>)
 8004860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004864:	461a      	mov	r2, r3
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	fbb3 f3f2 	udiv	r3, r3, r2
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d916      	bls.n	80048b4 <UART_SetConfig+0xb14>
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d212      	bcs.n	80048b4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	b29b      	uxth	r3, r3
 8004892:	f023 030f 	bic.w	r3, r3, #15
 8004896:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	b29b      	uxth	r3, r3
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048a6:	4313      	orrs	r3, r2
 80048a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	e0bc      	b.n	8004a2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048ba:	e0b8      	b.n	8004a2e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	dc4b      	bgt.n	800495c <UART_SetConfig+0xbbc>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f2c0 8087 	blt.w	80049d8 <UART_SetConfig+0xc38>
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	f200 8084 	bhi.w	80049d8 <UART_SetConfig+0xc38>
 80048d0:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0xb38>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	08004963 	.word	0x08004963
 80048dc:	0800496b 	.word	0x0800496b
 80048e0:	080049d9 	.word	0x080049d9
 80048e4:	080049d9 	.word	0x080049d9
 80048e8:	08004973 	.word	0x08004973
 80048ec:	080049d9 	.word	0x080049d9
 80048f0:	080049d9 	.word	0x080049d9
 80048f4:	080049d9 	.word	0x080049d9
 80048f8:	08004983 	.word	0x08004983
 80048fc:	080049d9 	.word	0x080049d9
 8004900:	080049d9 	.word	0x080049d9
 8004904:	080049d9 	.word	0x080049d9
 8004908:	080049d9 	.word	0x080049d9
 800490c:	080049d9 	.word	0x080049d9
 8004910:	080049d9 	.word	0x080049d9
 8004914:	080049d9 	.word	0x080049d9
 8004918:	08004993 	.word	0x08004993
 800491c:	080049d9 	.word	0x080049d9
 8004920:	080049d9 	.word	0x080049d9
 8004924:	080049d9 	.word	0x080049d9
 8004928:	080049d9 	.word	0x080049d9
 800492c:	080049d9 	.word	0x080049d9
 8004930:	080049d9 	.word	0x080049d9
 8004934:	080049d9 	.word	0x080049d9
 8004938:	080049d9 	.word	0x080049d9
 800493c:	080049d9 	.word	0x080049d9
 8004940:	080049d9 	.word	0x080049d9
 8004944:	080049d9 	.word	0x080049d9
 8004948:	080049d9 	.word	0x080049d9
 800494c:	080049d9 	.word	0x080049d9
 8004950:	080049d9 	.word	0x080049d9
 8004954:	080049d9 	.word	0x080049d9
 8004958:	080049b9 	.word	0x080049b9
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d02e      	beq.n	80049be <UART_SetConfig+0xc1e>
 8004960:	e03a      	b.n	80049d8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fd fe73 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8004966:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004968:	e03c      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496a:	f7fd fe85 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 800496e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004970:	e038      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004972:	f107 0314 	add.w	r3, r7, #20
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fdb6 	bl	80034e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004980:	e030      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe ff02 	bl	8003790 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004990:	e028      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004992:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <UART_SetConfig+0xc2c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <UART_SetConfig+0xc2c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <UART_SetConfig+0xc30>)
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049b0:	e018      	b.n	80049e4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <UART_SetConfig+0xc30>)
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b6:	e015      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <UART_SetConfig+0xc34>)
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049bc:	e012      	b.n	80049e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049c4:	e00e      	b.n	80049e4 <UART_SetConfig+0xc44>
 80049c6:	bf00      	nop
 80049c8:	08005184 	.word	0x08005184
 80049cc:	58024400 	.word	0x58024400
 80049d0:	03d09000 	.word	0x03d09000
 80049d4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80049e2:	bf00      	nop
    }

    if (pclk != 0U)
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d021      	beq.n	8004a2e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <UART_SetConfig+0xcb8>)
 80049f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d909      	bls.n	8004a28 <UART_SetConfig+0xc88>
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1a:	d205      	bcs.n	8004a28 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	e002      	b.n	8004a2e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3738      	adds	r7, #56	; 0x38
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	08005184 	.word	0x08005184

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d10a      	bne.n	8004b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb0:	f7fc fa96 	bl	80010e0 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d10e      	bne.n	8004be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f82f 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e025      	b.n	8004c2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d10e      	bne.n	8004c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f819 	bl	8004c36 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e00f      	b.n	8004c2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b09c      	sub	sp, #112	; 0x70
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c46:	e0a9      	b.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	f000 80a5 	beq.w	8004d9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c52:	f7fc fa45 	bl	80010e0 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d140      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e6      	bne.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e069      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d051      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d06:	d149      	bne.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	613b      	str	r3, [r7, #16]
   return(result);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d64:	623a      	str	r2, [r7, #32]
 8004d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	6a3a      	ldr	r2, [r7, #32]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e010      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	f43f af46 	beq.w	8004c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3770      	adds	r7, #112	; 0x70
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UARTEx_DisableFifoMode+0x16>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e027      	b.n	8004e2c <HAL_UARTEx_DisableFifoMode+0x66>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e02d      	b.n	8004eac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f84f 	bl	8004f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e02d      	b.n	8004f28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f811 	bl	8004f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d108      	bne.n	8004f52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f50:	e031      	b.n	8004fb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f52:	2310      	movs	r3, #16
 8004f54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f56:	2310      	movs	r3, #16
 8004f58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	0e5b      	lsrs	r3, r3, #25
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	0f5b      	lsrs	r3, r3, #29
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	7b3a      	ldrb	r2, [r7, #12]
 8004f7e:	4911      	ldr	r1, [pc, #68]	; (8004fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f80:	5c8a      	ldrb	r2, [r1, r2]
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f86:	7b3a      	ldrb	r2, [r7, #12]
 8004f88:	490f      	ldr	r1, [pc, #60]	; (8004fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004f8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	7b7a      	ldrb	r2, [r7, #13]
 8004f9c:	4909      	ldr	r1, [pc, #36]	; (8004fc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004f9e:	5c8a      	ldrb	r2, [r1, r2]
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fa4:	7b7a      	ldrb	r2, [r7, #13]
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004faa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	0800519c 	.word	0x0800519c
 8004fc8:	080051a4 	.word	0x080051a4

08004fcc <arm_mat_init_f32>:
 8004fcc:	8001      	strh	r1, [r0, #0]
 8004fce:	8042      	strh	r2, [r0, #2]
 8004fd0:	6043      	str	r3, [r0, #4]
 8004fd2:	4770      	bx	lr

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4d0d      	ldr	r5, [pc, #52]	; (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	42a6      	cmp	r6, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4d0b      	ldr	r5, [pc, #44]	; (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	; (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 f82e 	bl	8005048 <_init>
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffc:	4798      	blx	r3
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f855 3b04 	ldr.w	r3, [r5], #4
 8005006:	4798      	blx	r3
 8005008:	3601      	adds	r6, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	080051b4 	.word	0x080051b4
 8005010:	080051b4 	.word	0x080051b4
 8005014:	080051b4 	.word	0x080051b4
 8005018:	080051b8 	.word	0x080051b8

0800501c <memcpy>:
 800501c:	440a      	add	r2, r1
 800501e:	4291      	cmp	r1, r2
 8005020:	f100 33ff 	add.w	r3, r0, #4294967295
 8005024:	d100      	bne.n	8005028 <memcpy+0xc>
 8005026:	4770      	bx	lr
 8005028:	b510      	push	{r4, lr}
 800502a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005032:	4291      	cmp	r1, r2
 8005034:	d1f9      	bne.n	800502a <memcpy+0xe>
 8005036:	bd10      	pop	{r4, pc}

08005038 <memset>:
 8005038:	4402      	add	r2, r0
 800503a:	4603      	mov	r3, r0
 800503c:	4293      	cmp	r3, r2
 800503e:	d100      	bne.n	8005042 <memset+0xa>
 8005040:	4770      	bx	lr
 8005042:	f803 1b01 	strb.w	r1, [r3], #1
 8005046:	e7f9      	b.n	800503c <memset+0x4>

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
